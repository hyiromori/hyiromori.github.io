(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[function(e,t,n){"use strict";e.exports=n(34)},function(e,t,n){e.exports=n(45)()},function(e,t,n){"use strict";e.exports=function(){}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var s=e[o];"number"==typeof s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),t.push(s))}},t}},function(e,t,n){var r={},o=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),i=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),s=null,a=0,u=[],c=n(44);function l(e,t){for(var n=0;n<e.length;n++){var o=e[n],i=r[o.id];if(i){i.refs++;for(var s=0;s<i.parts.length;s++)i.parts[s](o.parts[s]);for(;s<o.parts.length;s++)i.parts.push(g(o.parts[s],t))}else{var a=[];for(s=0;s<o.parts.length;s++)a.push(g(o.parts[s],t));r[o.id]={id:o.id,refs:1,parts:a}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],s=t.base?i[0]+t.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};r[s]?r[s].parts.push(a):n.push(r[s]={id:s,parts:[a]})}return n}function f(e,t){var n=i(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(e.insertAt.before,n);n.insertBefore(t,o)}}function p(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function h(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return m(t,e.attrs),f(e,t),t}function m(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function g(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var u=a++;n=s||(s=h(t)),r=v.bind(null,n,u,!1),o=v.bind(null,n,u,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",m(t,e.attrs),f(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=c(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([r],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,n,t),o=function(){p(n),n.href&&URL.revokeObjectURL(n.href)}):(n=h(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){p(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return l(n,t),function(e){for(var o=[],i=0;i<n.length;i++){var s=n[i];(a=r[s.id]).refs--,o.push(a)}e&&l(d(e,t),t);for(i=0;i<o.length;i++){var a;if(0===(a=o[i]).refs){for(var u=0;u<a.parts.length;u++)a.parts[u]();delete r[a.id]}}}};var y=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function v(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=y(t,o);else{var i=document.createTextNode(o),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(i,s[t]):e.appendChild(i)}}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,s,a){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,s,a],l=0;(u=new Error(t.replace(/%s/g,function(){return c[l++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t){var n,r=[0,26,44,70,100,134,172,196,242,292,346,404,466,532,581,655,733,815,901,991,1085,1156,1258,1364,1474,1588,1706,1828,1921,2051,2185,2323,2465,2611,2761,2876,3034,3196,3362,3532,3706];t.getSymbolSize=function(e){if(!e)throw new Error('"version" cannot be null or undefined');if(e<1||e>40)throw new Error('"version" should be in range from 1 to 40');return 4*e+17},t.getSymbolTotalCodewords=function(e){return r[e]},t.getBCHDigit=function(e){for(var t=0;0!==e;)t++,e>>>=1;return t},t.setToSJISFunction=function(e){if("function"!=typeof e)throw new Error('"toSJISFunc" is not a valid function.');n=e},t.isKanjiModeEnabled=function(){return void 0!==n},t.toSJIS=function(e){return n(e)}},function(e,t,n){var r=n(20),o=n(21);t.NUMERIC={id:"Numeric",bit:1,ccBits:[10,12,14]},t.ALPHANUMERIC={id:"Alphanumeric",bit:2,ccBits:[9,11,13]},t.BYTE={id:"Byte",bit:4,ccBits:[8,16,16]},t.KANJI={id:"Kanji",bit:8,ccBits:[8,10,12]},t.MIXED={bit:-1},t.getCharCountIndicator=function(e,t){if(!e.ccBits)throw new Error("Invalid mode: "+e);if(!r.isValid(t))throw new Error("Invalid version: "+t);return t>=1&&t<10?e.ccBits[0]:t<27?e.ccBits[1]:e.ccBits[2]},t.getBestModeForData=function(e){return o.testNumeric(e)?t.NUMERIC:o.testAlphanumeric(e)?t.ALPHANUMERIC:o.testKanji(e)?t.KANJI:t.BYTE},t.toString=function(e){if(e&&e.id)return e.id;throw new Error("Invalid mode")},t.isValid=function(e){return e&&e.bit&&e.ccBits},t.from=function(e,n){if(t.isValid(e))return e;try{return function(e){if("string"!=typeof e)throw new Error("Param is not a string");switch(e.toLowerCase()){case"numeric":return t.NUMERIC;case"alphanumeric":return t.ALPHANUMERIC;case"kanji":return t.KANJI;case"byte":return t.BYTE;default:throw new Error("Unknown mode: "+e)}}(e)}catch(e){return n}}},function(e,t,n){"use strict";var r=n(12);i.TYPED_ARRAY_SUPPORT=function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()}catch(e){return!1}}();var o=i.TYPED_ARRAY_SUPPORT?2147483647:1073741823;function i(e,t,n){return i.TYPED_ARRAY_SUPPORT||this instanceof i?"number"==typeof e?u(this,e):function(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer)return function(e,t,n,r){if(n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");var o;o=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);i.TYPED_ARRAY_SUPPORT?o.__proto__=i.prototype:o=c(e,o);return o}(e,t,n,r);if("string"==typeof t)return function(e,t){var n=0|d(t),r=a(e,n),o=r.write(t);o!==n&&(r=r.slice(0,o));return r}(e,t);return function(e,t){if(i.isBuffer(t)){var n=0|s(t.length),r=a(e,n);return 0===r.length?r:(t.copy(r,0,0,n),r)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||function(e){return e!=e}(t.length)?a(e,0):c(e,t);if("Buffer"===t.type&&Array.isArray(t.data))return c(e,t.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}(this,e,t,n):new i(e,t,n)}function s(e){if(e>=o)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o.toString(16)+" bytes");return 0|e}function a(e,t){var n;return i.TYPED_ARRAY_SUPPORT?(n=new Uint8Array(t)).__proto__=i.prototype:(null===(n=e)&&(n=new i(t)),n.length=t),n}function u(e,t){var n=a(e,t<0?0:0|s(t));if(!i.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)n[r]=0;return n}function c(e,t){for(var n=t.length<0?0:0|s(t.length),r=a(e,n),o=0;o<n;o+=1)r[o]=255&t[o];return r}function l(e,t){var n;t=t||1/0;for(var r=e.length,o=null,i=[],s=0;s<r;++s){if((n=e.charCodeAt(s))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(s+1===r){(t-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function d(e){return i.isBuffer(e)?e.length:"undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer)?e.byteLength:("string"!=typeof e&&(e=""+e),0===e.length?0:l(e).length)}i.TYPED_ARRAY_SUPPORT&&(i.prototype.__proto__=Uint8Array.prototype,i.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&i[Symbol.species]===i&&Object.defineProperty(i,Symbol.species,{value:null,configurable:!0,enumerable:!1,writable:!1})),i.prototype.write=function(e,t,n){void 0===t?(n=this.length,t=0):void 0===n&&"string"==typeof t?(n=this.length,t=0):isFinite(t)&&(t|=0,isFinite(n)?n|=0:n=void 0);var r=this.length-t;if((void 0===n||n>r)&&(n=r),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");return function(e,t,n,r){return function(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}(l(t,e.length-n),e,n,r)}(this,e,t,n)},i.prototype.slice=function(e,t){var n,r=this.length;if(e=~~e,t=void 0===t?r:~~t,e<0?(e+=r)<0&&(e=0):e>r&&(e=r),t<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),i.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=i.prototype;else{var o=t-e;n=new i(o,void 0);for(var s=0;s<o;++s)n[s]=this[s+e]}return n},i.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o,s=r-n;if(this===e&&n<t&&t<r)for(o=s-1;o>=0;--o)e[o+t]=this[o+n];else if(s<1e3||!i.TYPED_ARRAY_SUPPORT)for(o=0;o<s;++o)e[o+t]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+s),t);return s},i.prototype.fill=function(e,t,n){if("string"==typeof e){if("string"==typeof t?(t=0,n=this.length):"string"==typeof n&&(n=this.length),1===e.length){var r=e.charCodeAt(0);r<256&&(e=r)}}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var o;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(o=t;o<n;++o)this[o]=e;else{var s=i.isBuffer(e)?e:new i(e),a=s.length;for(o=0;o<n-t;++o)this[o+t]=s[o%a]}return this},i.concat=function(e,t){if(!r(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return a(null,0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var o=u(null,t),s=0;for(n=0;n<e.length;++n){var c=e[n];if(!i.isBuffer(c))throw new TypeError('"list" argument must be an Array of Buffers');c.copy(o,s),s+=c.length}return o},i.byteLength=d,i.prototype._isBuffer=!0,i.isBuffer=function(e){return!(null==e||!e._isBuffer)},e.exports=i},,function(e,t,n){"use strict";var r=n(2),o=n.n(r),i=n(5),s=n.n(i);function a(e){return"/"===e.charAt(0)}function u(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var c=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],r=t&&t.split("/")||[],o=e&&a(e),i=t&&a(t),s=o||i;if(e&&a(e)?r=n:n.length&&(r.pop(),r=r.concat(n)),!r.length)return"/";var c=void 0;if(r.length){var l=r[r.length-1];c="."===l||".."===l||""===l}else c=!1;for(var d=0,f=r.length;f>=0;f--){var p=r[f];"."===p?u(r,f):".."===p?(u(r,f),d++):d&&(u(r,f),d--)}if(!s)for(;d--;d)r.unshift("..");!s||""===r[0]||r[0]&&a(r[0])||r.unshift("");var h=r.join("/");return c&&"/"!==h.substr(-1)&&(h+="/"),h},l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var d=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var r=void 0===t?"undefined":l(t);if(r!==(void 0===n?"undefined":l(n)))return!1;if("object"===r){var o=t.valueOf(),i=n.valueOf();if(o!==t||i!==n)return e(o,i);var s=Object.keys(t),a=Object.keys(n);return s.length===a.length&&s.every(function(r){return e(t[r],n[r])})}return!1},f=function(e){return"/"===e.charAt(0)?e:"/"+e},p=function(e){return"/"===e.charAt(0)?e.substr(1):e},h=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)},m=function(e,t){return h(e,t)?e.substr(t.length):e},g=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},y=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o},v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},b=function(e,t,n,r){var o=void 0;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=v({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=c(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},_=function(){var e=null,t=[];return{setPrompt:function(t){return o()(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,i){if(null!=e){var s="function"==typeof e?e(t,n):e;"string"==typeof s?"function"==typeof r?r(s,i):(o()(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),i(!0)):i(!1!==s)}else i(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}},w=!("undefined"==typeof window||!window.document||!window.document.createElement),E=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},k=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},S=function(e,t){return t(window.confirm(e))},x=("function"==typeof Symbol&&Symbol.iterator,Object.assign,Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}),T={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+p(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:p,decodePath:f},slash:{encodePath:f,decodePath:f}},C=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},A=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)},R=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};s()(w,"Hash history needs a DOM");var t=window.history,n=-1===window.navigator.userAgent.indexOf("Firefox"),r=e.getUserConfirmation,i=void 0===r?S:r,a=e.hashType,u=void 0===a?"slash":a,c=e.basename?g(f(e.basename)):"",l=T[u],p=l.encodePath,v=l.decodePath,R=function(){var e=v(C());return o()(!c||h(e,c),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+c+'".'),c&&(e=m(e,c)),b(e)},P=_(),O=function(e){x(W,e),W.length=t.length,P.notifyListeners(W.location,W.action)},N=!1,M=null,B=function(){var e=C(),t=p(e);if(e!==t)A(t);else{var n=R(),r=W.location;if(!N&&function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&d(e.state,t.state)}(r,n))return;if(M===y(n))return;M=null,j(n)}},j=function(e){N?(N=!1,O()):P.confirmTransitionTo(e,"POP",i,function(t){t?O({action:"POP",location:e}):I(e)})},I=function(e){var t=W.location,n=F.lastIndexOf(y(t));-1===n&&(n=0);var r=F.lastIndexOf(y(e));-1===r&&(r=0);var o=n-r;o&&(N=!0,V(o))},L=C(),U=p(L);L!==U&&A(U);var D=R(),F=[y(D)],V=function(e){o()(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},z=0,q=function(e){1===(z+=e)?E(window,"hashchange",B):0===z&&k(window,"hashchange",B)},H=!1,W={length:t.length,action:"POP",location:D,createHref:function(e){return"#"+p(c+y(e))},push:function(e,t){o()(void 0===t,"Hash history cannot push state; it is ignored");var n=b(e,void 0,void 0,W.location);P.confirmTransitionTo(n,"PUSH",i,function(e){if(e){var t=y(n),r=p(c+t);if(C()!==r){M=t,function(e){window.location.hash=e}(r);var i=F.lastIndexOf(y(W.location)),s=F.slice(0,-1===i?0:i+1);s.push(t),F=s,O({action:"PUSH",location:n})}else o()(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),O()}})},replace:function(e,t){o()(void 0===t,"Hash history cannot replace state; it is ignored");var n=b(e,void 0,void 0,W.location);P.confirmTransitionTo(n,"REPLACE",i,function(e){if(e){var t=y(n),r=p(c+t);C()!==r&&(M=t,A(r));var o=F.indexOf(y(W.location));-1!==o&&(F[o]=t),O({action:"REPLACE",location:n})}})},go:V,goBack:function(){return V(-1)},goForward:function(){return V(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=P.setPrompt(e);return H||(q(1),H=!0),function(){return H&&(H=!1,q(-1)),t()}},listen:function(e){var t=P.appendListener(e);return q(1),function(){q(-1),t()}}};return W};"function"==typeof Symbol&&Symbol.iterator,Object.assign;n.d(t,"a",function(){return R}),n.d(t,"b",function(){return b})},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){t.L={bit:1},t.M={bit:0},t.Q={bit:3},t.H={bit:2},t.isValid=function(e){return e&&void 0!==e.bit&&e.bit>=0&&e.bit<4},t.from=function(e,n){if(t.isValid(e))return e;try{return function(e){if("string"!=typeof e)throw new Error("Param is not a string");switch(e.toLowerCase()){case"l":case"low":return t.L;case"m":case"medium":return t.M;case"q":case"quartile":return t.Q;case"h":case"high":return t.H;default:throw new Error("Unknown EC Level: "+e)}}(e)}catch(e){return n}}},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,i,s,a,u){if(r(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,o,i,s,a,u],d=0;(c=new Error(t.replace(/%s/g,function(){return l[d++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,s,a=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var c in n=Object(arguments[u]))o.call(n,c)&&(a[c]=n[c]);if(r){s=r(n);for(var l=0;l<s.length;l++)i.call(n,s[l])&&(a[s[l]]=n[s[l]])}}return a}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(13),o=[1,1,1,1,1,1,1,1,1,1,2,2,1,2,2,4,1,2,4,4,2,4,4,4,2,4,6,5,2,4,6,6,2,5,8,8,4,5,8,8,4,5,8,11,4,8,10,11,4,9,12,16,4,9,16,16,6,10,12,18,6,10,17,16,6,11,16,19,6,13,18,21,7,14,21,25,8,16,20,25,8,17,23,25,9,17,23,34,9,18,25,30,10,20,27,32,12,21,29,35,12,23,34,37,12,25,34,40,13,26,35,42,14,28,38,45,15,29,40,48,16,31,43,51,17,33,45,54,18,35,48,57,19,37,51,60,19,38,53,63,20,40,56,66,21,43,59,70,22,45,62,74,24,47,65,77,25,49,68,81],i=[7,10,13,17,10,16,22,28,15,26,36,44,20,36,52,64,26,48,72,88,36,64,96,112,40,72,108,130,48,88,132,156,60,110,160,192,72,130,192,224,80,150,224,264,96,176,260,308,104,198,288,352,120,216,320,384,132,240,360,432,144,280,408,480,168,308,448,532,180,338,504,588,196,364,546,650,224,416,600,700,224,442,644,750,252,476,690,816,270,504,750,900,300,560,810,960,312,588,870,1050,336,644,952,1110,360,700,1020,1200,390,728,1050,1260,420,784,1140,1350,450,812,1200,1440,480,868,1290,1530,510,924,1350,1620,540,980,1440,1710,570,1036,1530,1800,570,1064,1590,1890,600,1120,1680,1980,630,1204,1770,2100,660,1260,1860,2220,720,1316,1950,2310,750,1372,2040,2430];t.getBlocksCount=function(e,t){switch(t){case r.L:return o[4*(e-1)+0];case r.M:return o[4*(e-1)+1];case r.Q:return o[4*(e-1)+2];case r.H:return o[4*(e-1)+3];default:return}},t.getTotalCodewordsCount=function(e,t){switch(t){case r.L:return i[4*(e-1)+0];case r.M:return i[4*(e-1)+1];case r.Q:return i[4*(e-1)+2];case r.H:return i[4*(e-1)+3];default:return}}},function(e,t){t.isValid=function(e){return!isNaN(e)&&e>=1&&e<=40}},function(e,t){var n="(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+",r="(?:(?![A-Z0-9 $%*+\\-./:]|"+(n=n.replace(/u/g,"\\u"))+").)+";t.KANJI=new RegExp(n,"g"),t.BYTE_KANJI=new RegExp("[^A-Z0-9 $%*+\\-./:]+","g"),t.BYTE=new RegExp(r,"g"),t.NUMERIC=new RegExp("[0-9]+","g"),t.ALPHANUMERIC=new RegExp("[A-Z $%*+\\-./:]+","g");var o=new RegExp("^"+n+"$"),i=new RegExp("^[0-9]+$"),s=new RegExp("^[A-Z0-9 $%*+\\-./:]+$");t.testKanji=function(e){return o.test(e)},t.testNumeric=function(e){return i.test(e)},t.testAlphanumeric=function(e){return s.test(e)}},function(e,t){function n(e){if("string"!=typeof e)throw new Error("Color should be defined as hex string");var t=e.slice().replace("#","").split("");if(t.length<3||5===t.length||t.length>8)throw new Error("Invalid hex color: "+e);3!==t.length&&4!==t.length||(t=Array.prototype.concat.apply([],t.map(function(e){return[e,e]}))),6===t.length&&t.push("F","F");var n=parseInt(t.join(""),16);return{r:n>>24&255,g:n>>16&255,b:n>>8&255,a:255&n,hex:"#"+t.slice(0,6).join("")}}t.getOptions=function(e){e||(e={}),e.color||(e.color={});var t=void 0===e.margin||null===e.margin||e.margin<0?4:e.margin,r=e.width&&e.width>=21?e.width:void 0,o=e.scale||4;return{width:r,scale:r?4:o,margin:t,color:{dark:n(e.color.dark||"#000000ff"),light:n(e.color.light||"#ffffffff")},type:e.type,rendererOpts:e.rendererOpts||{}}},t.getScale=function(e,t){return t.width&&t.width>=e+2*t.margin?t.width/(e+2*t.margin):t.scale},t.getImageWidth=function(e,n){var r=t.getScale(e,n);return Math.floor((e+2*n.margin)*r)},t.qrToImageData=function(e,n,r){for(var o=n.modules.size,i=n.modules.data,s=t.getScale(o,r),a=Math.floor((o+2*r.margin)*s),u=r.margin*s,c=[r.color.light,r.color.dark],l=0;l<a;l++)for(var d=0;d<a;d++){var f=4*(l*a+d),p=r.color.light;if(l>=u&&d>=u&&l<a-u&&d<a-u)p=c[i[Math.floor((l-u)/s)*o+Math.floor((d-u)/s)]?1:0];e[f++]=p.r,e[f++]=p.g,e[f++]=p.b,e[f]=p.a}}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(33)},function(e,t,n){(function(e,r){var o;
/*!
 * Platform.js <https://mths.be/platform>
 * Copyright 2014-2018 Benjamin Tan <https://bnjmnt4n.now.sh/>
 * Copyright 2011-2013 John-David Dalton <http://allyoucanleet.com/>
 * Available under MIT license <https://mths.be/mit>
 */(function(){"use strict";var i={function:!0,object:!0},s=i[typeof window]&&window||this,a=i[typeof t]&&t,u=i[typeof e]&&e&&!e.nodeType&&e,c=a&&u&&"object"==typeof r&&r;!c||c.global!==c&&c.window!==c&&c.self!==c||(s=c);var l=Math.pow(2,53)-1,d=/\bOpera/,f=Object.prototype,p=f.hasOwnProperty,h=f.toString;function m(e){return(e=String(e)).charAt(0).toUpperCase()+e.slice(1)}function g(e){return e=w(e),/^(?:webOS|i(?:OS|P))/.test(e)?e:m(e)}function y(e,t){for(var n in e)p.call(e,n)&&t(e[n],n,e)}function v(e){return null==e?m(e):h.call(e).slice(8,-1)}function b(e){return String(e).replace(/([ -])(?!$)/g,"$1?")}function _(e,t){var n=null;return function(e,t){var n=-1,r=e?e.length:0;if("number"==typeof r&&r>-1&&r<=l)for(;++n<r;)t(e[n],n,e);else y(e,t)}(e,function(r,o){n=t(n,r,o,e)}),n}function w(e){return String(e).replace(/^ +| +$/g,"")}var E=function e(t){var n=s,r=t&&"object"==typeof t&&"String"!=v(t);r&&(n=t,t=null);var o=n.navigator||{},i=o.userAgent||"";t||(t=i);var a,u,c=r?!!o.likeChrome:/\bChrome\b/.test(t)&&!/internal|\n/i.test(h.toString()),l=r?"Object":"ScriptBridgingProxyObject",f=r?"Object":"Environment",p=r&&n.java?"JavaPackage":v(n.java),m=r?"Object":"RuntimeObject",E=/\bJava/.test(p)&&n.java,k=E&&v(n.environment)==f,S=E?"a":"α",x=E?"b":"β",T=n.document||{},C=n.operamini||n.opera,A=d.test(A=r&&C?C["[[Class]]"]:v(C))?A:C=null,R=t,P=[],O=null,N=t==i,M=N&&C&&"function"==typeof C.version&&C.version(),B=function(e){return _(e,function(e,n){return e||RegExp("\\b"+(n.pattern||b(n))+"\\b","i").exec(t)&&(n.label||n)})}([{label:"EdgeHTML",pattern:"Edge"},"Trident",{label:"WebKit",pattern:"AppleWebKit"},"iCab","Presto","NetFront","Tasman","KHTML","Gecko"]),j=function(e){return _(e,function(e,n){return e||RegExp("\\b"+(n.pattern||b(n))+"\\b","i").exec(t)&&(n.label||n)})}(["Adobe AIR","Arora","Avant Browser","Breach","Camino","Electron","Epiphany","Fennec","Flock","Galeon","GreenBrowser","iCab","Iceweasel","K-Meleon","Konqueror","Lunascape","Maxthon",{label:"Microsoft Edge",pattern:"Edge"},"Midori","Nook Browser","PaleMoon","PhantomJS","Raven","Rekonq","RockMelt",{label:"Samsung Internet",pattern:"SamsungBrowser"},"SeaMonkey",{label:"Silk",pattern:"(?:Cloud9|Silk-Accelerated)"},"Sleipnir","SlimBrowser",{label:"SRWare Iron",pattern:"Iron"},"Sunrise","Swiftfox","Waterfox","WebPositive","Opera Mini",{label:"Opera Mini",pattern:"OPiOS"},"Opera",{label:"Opera",pattern:"OPR"},"Chrome",{label:"Chrome Mobile",pattern:"(?:CriOS|CrMo)"},{label:"Firefox",pattern:"(?:Firefox|Minefield)"},{label:"Firefox for iOS",pattern:"FxiOS"},{label:"IE",pattern:"IEMobile"},{label:"IE",pattern:"MSIE"},"Safari"]),I=D([{label:"BlackBerry",pattern:"BB10"},"BlackBerry",{label:"Galaxy S",pattern:"GT-I9000"},{label:"Galaxy S2",pattern:"GT-I9100"},{label:"Galaxy S3",pattern:"GT-I9300"},{label:"Galaxy S4",pattern:"GT-I9500"},{label:"Galaxy S5",pattern:"SM-G900"},{label:"Galaxy S6",pattern:"SM-G920"},{label:"Galaxy S6 Edge",pattern:"SM-G925"},{label:"Galaxy S7",pattern:"SM-G930"},{label:"Galaxy S7 Edge",pattern:"SM-G935"},"Google TV","Lumia","iPad","iPod","iPhone","Kindle",{label:"Kindle Fire",pattern:"(?:Cloud9|Silk-Accelerated)"},"Nexus","Nook","PlayBook","PlayStation Vita","PlayStation","TouchPad","Transformer",{label:"Wii U",pattern:"WiiU"},"Wii","Xbox One",{label:"Xbox 360",pattern:"Xbox"},"Xoom"]),L=function(e){return _(e,function(e,n,r){return e||(n[I]||n[/^[a-z]+(?: +[a-z]+\b)*/i.exec(I)]||RegExp("\\b"+b(r)+"(?:\\b|\\w*\\d)","i").exec(t))&&r})}({Apple:{iPad:1,iPhone:1,iPod:1},Archos:{},Amazon:{Kindle:1,"Kindle Fire":1},Asus:{Transformer:1},"Barnes & Noble":{Nook:1},BlackBerry:{PlayBook:1},Google:{"Google TV":1,Nexus:1},HP:{TouchPad:1},HTC:{},LG:{},Microsoft:{Xbox:1,"Xbox One":1},Motorola:{Xoom:1},Nintendo:{"Wii U":1,Wii:1},Nokia:{Lumia:1},Samsung:{"Galaxy S":1,"Galaxy S2":1,"Galaxy S3":1,"Galaxy S4":1},Sony:{PlayStation:1,"PlayStation Vita":1}}),U=function(e){return _(e,function(e,n){var r=n.pattern||b(n);return!e&&(e=RegExp("\\b"+r+"(?:/[\\d.]+|[ \\w.]*)","i").exec(t))&&(e=function(e,t,n){var r={"10.0":"10",6.4:"10 Technical Preview",6.3:"8.1",6.2:"8",6.1:"Server 2008 R2 / 7","6.0":"Server 2008 / Vista",5.2:"Server 2003 / XP 64-bit",5.1:"XP",5.01:"2000 SP1","5.0":"2000","4.0":"NT","4.90":"ME"};return t&&n&&/^Win/i.test(e)&&!/^Windows Phone /i.test(e)&&(r=r[/[\d.]+$/.exec(e)])&&(e="Windows "+r),e=String(e),t&&n&&(e=e.replace(RegExp(t,"i"),n)),e=g(e.replace(/ ce$/i," CE").replace(/\bhpw/i,"web").replace(/\bMacintosh\b/,"Mac OS").replace(/_PowerPC\b/i," OS").replace(/\b(OS X) [^ \d]+/i,"$1").replace(/\bMac (OS X)\b/,"$1").replace(/\/(\d)/," $1").replace(/_/g,".").replace(/(?: BePC|[ .]*fc[ \d.]+)$/i,"").replace(/\bx86\.64\b/gi,"x86_64").replace(/\b(Windows Phone) OS\b/,"$1").replace(/\b(Chrome OS \w+) [\d.]+\b/,"$1").split(" on ")[0])}(e,r,n.label||n)),e})}(["Windows Phone","Android","CentOS",{label:"Chrome OS",pattern:"CrOS"},"Debian","Fedora","FreeBSD","Gentoo","Haiku","Kubuntu","Linux Mint","OpenBSD","Red Hat","SuSE","Ubuntu","Xubuntu","Cygwin","Symbian OS","hpwOS","webOS ","webOS","Tablet OS","Tizen","Linux","Mac OS X","Macintosh","Mac","Windows 98;","Windows "]);function D(e){return _(e,function(e,n){var r=n.pattern||b(n);return!e&&(e=RegExp("\\b"+r+" *\\d+[.\\w_]*","i").exec(t)||RegExp("\\b"+r+" *\\w+-[\\w]*","i").exec(t)||RegExp("\\b"+r+"(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)","i").exec(t))&&((e=String(n.label&&!RegExp(r,"i").test(n.label)?n.label:e).split("/"))[1]&&!/[\d.]+/.test(e[0])&&(e[0]+=" "+e[1]),n=n.label||n,e=g(e[0].replace(RegExp(r,"i"),n).replace(RegExp("; *(?:"+n+"[_-])?","i")," ").replace(RegExp("("+n+")[-_.]?(\\w)","i"),"$1 $2"))),e})}if(B&&(B=[B]),L&&!I&&(I=D([L])),(a=/\bGoogle TV\b/.exec(I))&&(I=a[0]),/\bSimulator\b/i.test(t)&&(I=(I?I+" ":"")+"Simulator"),"Opera Mini"==j&&/\bOPiOS\b/.test(t)&&P.push("running in Turbo/Uncompressed mode"),"IE"==j&&/\blike iPhone OS\b/.test(t)?(L=(a=e(t.replace(/like iPhone OS/,""))).manufacturer,I=a.product):/^iP/.test(I)?(j||(j="Safari"),U="iOS"+((a=/ OS ([\d_]+)/i.exec(t))?" "+a[1].replace(/_/g,"."):"")):"Konqueror"!=j||/buntu/i.test(U)?L&&"Google"!=L&&(/Chrome/.test(j)&&!/\bMobile Safari\b/i.test(t)||/\bVita\b/.test(I))||/\bAndroid\b/.test(U)&&/^Chrome/.test(j)&&/\bVersion\//i.test(t)?(j="Android Browser",U=/\bAndroid\b/.test(U)?U:"Android"):"Silk"==j?(/\bMobi/i.test(t)||(U="Android",P.unshift("desktop mode")),/Accelerated *= *true/i.test(t)&&P.unshift("accelerated")):"PaleMoon"==j&&(a=/\bFirefox\/([\d.]+)\b/.exec(t))?P.push("identifying as Firefox "+a[1]):"Firefox"==j&&(a=/\b(Mobile|Tablet|TV)\b/i.exec(t))?(U||(U="Firefox OS"),I||(I=a[1])):!j||(a=!/\bMinefield\b/i.test(t)&&/\b(?:Firefox|Safari)\b/.exec(j))?(j&&!I&&/[\/,]|^[^(]+?\)/.test(t.slice(t.indexOf(a+"/")+8))&&(j=null),(a=I||L||U)&&(I||L||/\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(U))&&(j=/[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(U)?U:a)+" Browser")):"Electron"==j&&(a=(/\bChrome\/([\d.]+)\b/.exec(t)||0)[1])&&P.push("Chromium "+a):U="Kubuntu",M||(M=function(e){return _(e,function(e,n){return e||(RegExp(n+"(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)","i").exec(t)||0)[1]||null})}(["(?:Cloud9|CriOS|CrMo|Edge|FxiOS|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\d.]+$))","Version",b(j),"(?:Firefox|Minefield|NetFront)"])),(a=("iCab"==B&&parseFloat(M)>3?"WebKit":/\bOpera\b/.test(j)&&(/\bOPR\b/.test(t)?"Blink":"Presto"))||/\b(?:Midori|Nook|Safari)\b/i.test(t)&&!/^(?:Trident|EdgeHTML)$/.test(B)&&"WebKit"||!B&&/\bMSIE\b/i.test(t)&&("Mac OS"==U?"Tasman":"Trident")||"WebKit"==B&&/\bPlayStation\b(?! Vita\b)/i.test(j)&&"NetFront")&&(B=[a]),"IE"==j&&(a=(/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(t)||0)[1])?(j+=" Mobile",U="Windows Phone "+(/\+$/.test(a)?a:a+".x"),P.unshift("desktop mode")):/\bWPDesktop\b/i.test(t)?(j="IE Mobile",U="Windows Phone 8.x",P.unshift("desktop mode"),M||(M=(/\brv:([\d.]+)/.exec(t)||0)[1])):"IE"!=j&&"Trident"==B&&(a=/\brv:([\d.]+)/.exec(t))&&(j&&P.push("identifying as "+j+(M?" "+M:"")),j="IE",M=a[1]),N){if(function(e,t){var n=null!=e?typeof e[t]:"number";return!(/^(?:boolean|number|string|undefined)$/.test(n)||"object"==n&&!e[t])}(n,"global"))if(E&&(R=(a=E.lang.System).getProperty("os.arch"),U=U||a.getProperty("os.name")+" "+a.getProperty("os.version")),k){try{M=n.require("ringo/engine").version.join("."),j="RingoJS"}catch(e){(a=n.system)&&a.global.system==n.system&&(j="Narwhal",U||(U=a[0].os||null))}j||(j="Rhino")}else"object"==typeof n.process&&!n.process.browser&&(a=n.process)&&("object"==typeof a.versions&&("string"==typeof a.versions.electron?(P.push("Node "+a.versions.node),j="Electron",M=a.versions.electron):"string"==typeof a.versions.nw&&(P.push("Chromium "+M,"Node "+a.versions.node),j="NW.js",M=a.versions.nw)),j||(j="Node.js",R=a.arch,U=a.platform,M=(M=/[\d.]+/.exec(a.version))?M[0]:null));else v(a=n.runtime)==l?(j="Adobe AIR",U=a.flash.system.Capabilities.os):v(a=n.phantom)==m?(j="PhantomJS",M=(a=a.version||null)&&a.major+"."+a.minor+"."+a.patch):"number"==typeof T.documentMode&&(a=/\bTrident\/(\d+)/i.exec(t))?(M=[M,T.documentMode],(a=+a[1]+4)!=M[1]&&(P.push("IE "+M[1]+" mode"),B&&(B[1]=""),M[1]=a),M="IE"==j?String(M[1].toFixed(1)):M[0]):"number"==typeof T.documentMode&&/^(?:Chrome|Firefox)\b/.test(j)&&(P.push("masking as "+j+" "+M),j="IE",M="11.0",B=["Trident"],U="Windows");U=U&&g(U)}if(M&&(a=/(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(M)||/(?:alpha|beta)(?: ?\d)?/i.exec(t+";"+(N&&o.appMinorVersion))||/\bMinefield\b/i.test(t)&&"a")&&(O=/b/i.test(a)?"beta":"alpha",M=M.replace(RegExp(a+"\\+?$"),"")+("beta"==O?x:S)+(/\d+\+?/.exec(a)||"")),"Fennec"==j||"Firefox"==j&&/\b(?:Android|Firefox OS)\b/.test(U))j="Firefox Mobile";else if("Maxthon"==j&&M)M=M.replace(/\.[\d.]+/,".x");else if(/\bXbox\b/i.test(I))"Xbox 360"==I&&(U=null),"Xbox 360"==I&&/\bIEMobile\b/.test(t)&&P.unshift("mobile mode");else if(!/^(?:Chrome|IE|Opera)$/.test(j)&&(!j||I||/Browser|Mobi/.test(j))||"Windows CE"!=U&&!/Mobi/i.test(t))if("IE"==j&&N)try{null===n.external&&P.unshift("platform preview")}catch(e){P.unshift("embedded")}else(/\bBlackBerry\b/.test(I)||/\bBB10\b/.test(t))&&(a=(RegExp(I.replace(/ +/g," *")+"/([.\\d]+)","i").exec(t)||0)[1]||M)?(U=((a=[a,/BB10/.test(t)])[1]?(I=null,L="BlackBerry"):"Device Software")+" "+a[0],M=null):this!=y&&"Wii"!=I&&(N&&C||/Opera/.test(j)&&/\b(?:MSIE|Firefox)\b/i.test(t)||"Firefox"==j&&/\bOS X (?:\d+\.){2,}/.test(U)||"IE"==j&&(U&&!/^Win/.test(U)&&M>5.5||/\bWindows XP\b/.test(U)&&M>8||8==M&&!/\bTrident\b/.test(t)))&&!d.test(a=e.call(y,t.replace(d,"")+";"))&&a.name&&(a="ing as "+a.name+((a=a.version)?" "+a:""),d.test(j)?(/\bIE\b/.test(a)&&"Mac OS"==U&&(U=null),a="identify"+a):(a="mask"+a,j=A?g(A.replace(/([a-z])([A-Z])/g,"$1 $2")):"Opera",/\bIE\b/.test(a)&&(U=null),N||(M=null)),B=["Presto"],P.push(a));else j+=" Mobile";(a=(/\bAppleWebKit\/([\d.]+\+?)/i.exec(t)||0)[1])&&(a=[parseFloat(a.replace(/\.(\d)$/,".0$1")),a],"Safari"==j&&"+"==a[1].slice(-1)?(j="WebKit Nightly",O="alpha",M=a[1].slice(0,-1)):M!=a[1]&&M!=(a[2]=(/\bSafari\/([\d.]+\+?)/i.exec(t)||0)[1])||(M=null),a[1]=(/\bChrome\/([\d.]+)/i.exec(t)||0)[1],537.36==a[0]&&537.36==a[2]&&parseFloat(a[1])>=28&&"WebKit"==B&&(B=["Blink"]),N&&(c||a[1])?(B&&(B[1]="like Chrome"),a=a[1]||((a=a[0])<530?1:a<532?2:a<532.05?3:a<533?4:a<534.03?5:a<534.07?6:a<534.1?7:a<534.13?8:a<534.16?9:a<534.24?10:a<534.3?11:a<535.01?12:a<535.02?"13+":a<535.07?15:a<535.11?16:a<535.19?17:a<536.05?18:a<536.1?19:a<537.01?20:a<537.11?"21+":a<537.13?23:a<537.18?24:a<537.24?25:a<537.36?26:"Blink"!=B?"27":"28")):(B&&(B[1]="like Safari"),a=(a=a[0])<400?1:a<500?2:a<526?3:a<533?4:a<534?"4+":a<535?5:a<537?6:a<538?7:a<601?8:"8"),B&&(B[1]+=" "+(a+="number"==typeof a?".x":/[.+]/.test(a)?"":"+")),"Safari"==j&&(!M||parseInt(M)>45)&&(M=a)),"Opera"==j&&(a=/\bzbov|zvav$/.exec(U))?(j+=" ",P.unshift("desktop mode"),"zvav"==a?(j+="Mini",M=null):j+="Mobile",U=U.replace(RegExp(" *"+a+"$"),"")):"Safari"==j&&/\bChrome\b/.exec(B&&B[1])&&(P.unshift("desktop mode"),j="Chrome Mobile",M=null,/\bOS X\b/.test(U)?(L="Apple",U="iOS 4.3+"):U=null),M&&0==M.indexOf(a=/[\d.]+$/.exec(U))&&t.indexOf("/"+a+"-")>-1&&(U=w(U.replace(a,""))),B&&!/\b(?:Avant|Nook)\b/.test(j)&&(/Browser|Lunascape|Maxthon/.test(j)||"Safari"!=j&&/^iOS/.test(U)&&/\bSafari\b/.test(B[1])||/^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|Web)/.test(j)&&B[1])&&(a=B[B.length-1])&&P.push(a),P.length&&(P=["("+P.join("; ")+")"]),L&&I&&I.indexOf(L)<0&&P.push("on "+L),I&&P.push((/^on /.test(P[P.length-1])?"":"on ")+I),U&&(a=/ ([\d.+]+)$/.exec(U),u=a&&"/"==U.charAt(U.length-a[0].length-1),U={architecture:32,family:a&&!u?U.replace(a[0],""):U,version:a?a[1]:null,toString:function(){var e=this.version;return this.family+(e&&!u?" "+e:"")+(64==this.architecture?" 64-bit":"")}}),(a=/\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(R))&&!/\bi686\b/i.test(R)?(U&&(U.architecture=64,U.family=U.family.replace(RegExp(" *"+a),"")),j&&(/\bWOW64\b/i.test(t)||N&&/\w(?:86|32)$/.test(o.cpuClass||o.platform)&&!/\bWin64; x64\b/i.test(t))&&P.unshift("32-bit")):U&&/^OS X/.test(U.family)&&"Chrome"==j&&parseFloat(M)>=39&&(U.architecture=64),t||(t=null);var F={};return F.description=t,F.layout=B&&B[0],F.manufacturer=L,F.name=j,F.prerelease=O,F.product=I,F.ua=t,F.version=j&&M,F.os=U||{architecture:null,family:null,version:null,toString:function(){return"null"}},F.parse=e,F.toString=function(){return this.description||""},F.version&&P.unshift(M),F.name&&P.unshift(j),U&&j&&(U!=String(U).split(" ")[0]||U!=j.split(" ")[0]&&!I)&&P.push(I?"("+U+")":"on "+U),P.length&&(F.description=P.join(" ")),F}();s.platform=E,void 0===(o=function(){return E}.call(t,n,t,e))||(e.exports=o)}).call(this)}).call(this,n(41)(e),n(18))},,,,,,function(e,t,n){
/*!
 * SkyWay Copyright(c) 2018 NTT Communications Corporation
 * peerjs Copyright(c) 2013 Michelle Bu <michelle@michellebu.com>
 */
!function(t,n){e.exports=n()}(window,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s="./src/peer.js")}({"./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){"use strict";t.byteLength=function(e){return 3*e.length/4-c(e)},t.toByteArray=function(e){var t,n,r,s,a,u=e.length;s=c(e),a=new i(3*u/4-s),n=s>0?u-4:u;var l=0;for(t=0;t<n;t+=4)r=o[e.charCodeAt(t)]<<18|o[e.charCodeAt(t+1)]<<12|o[e.charCodeAt(t+2)]<<6|o[e.charCodeAt(t+3)],a[l++]=r>>16&255,a[l++]=r>>8&255,a[l++]=255&r;2===s?(r=o[e.charCodeAt(t)]<<2|o[e.charCodeAt(t+1)]>>4,a[l++]=255&r):1===s&&(r=o[e.charCodeAt(t)]<<10|o[e.charCodeAt(t+1)]<<4|o[e.charCodeAt(t+2)]>>2,a[l++]=r>>8&255,a[l++]=255&r);return a},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,i="",s=[],a=0,u=n-o;a<u;a+=16383)s.push(d(e,a,a+16383>u?u:a+16383));1===o?(t=e[n-1],i+=r[t>>2],i+=r[t<<4&63],i+="=="):2===o&&(t=(e[n-2]<<8)+e[n-1],i+=r[t>>10],i+=r[t>>4&63],i+=r[t<<2&63],i+="=");return s.push(i),s.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)r[a]=s[a],o[s.charCodeAt(a)]=a;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");return"="===e[t-2]?2:"="===e[t-1]?1:0}function l(e){return r[e>>18&63]+r[e>>12&63]+r[e>>6&63]+r[63&e]}function d(e,t,n){for(var r,o=[],i=t;i<n;i+=3)r=(e[i]<<16)+(e[i+1]<<8)+e[i+2],o.push(l(r));return o.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},"./node_modules/decode-uri-component/index.js":
/*!****************************************************!*\
  !*** ./node_modules/decode-uri-component/index.js ***!
  \****************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){"use strict";var r=new RegExp("%[a-f0-9]{2}","gi"),o=new RegExp("(%[a-f0-9]{2})+","gi");function i(e,t){try{return decodeURIComponent(e.join(""))}catch(e){}if(1===e.length)return e;t=t||1;var n=e.slice(0,t),r=e.slice(t);return Array.prototype.concat.call([],i(n),i(r))}function s(e){try{return decodeURIComponent(e)}catch(o){for(var t=e.match(r),n=1;n<t.length;n++)t=(e=i(t,n).join("")).match(r);return e}}e.exports=function(e){if("string"!=typeof e)throw new TypeError("Expected `encodedURI` to be of type `string`, got `"+typeof e+"`");try{return e=e.replace(/\+/g," "),decodeURIComponent(e)}catch(t){return function(e){for(var t={"%FE%FF":"��","%FF%FE":"��"},n=o.exec(e);n;){try{t[n[0]]=decodeURIComponent(n[0])}catch(e){var r=s(n[0]);r!==n[0]&&(t[n[0]]=r)}n=o.exec(e)}t["%C2"]="�";for(var i=Object.keys(t),a=0;a<i.length;a++){var u=i[a];e=e.replace(new RegExp(u,"g"),t[u])}return e}(e)}}},"./node_modules/detect-browser/index.js":
/*!**********************************************!*\
  !*** ./node_modules/detect-browser/index.js ***!
  \**********************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){(function(t){function r(e){var t=s([["iOS",/iP(hone|od|ad)/],["Android OS",/Android/],["BlackBerry OS",/BlackBerry|BB10/],["Windows Mobile",/IEMobile/],["Amazon OS",/Kindle/],["Windows 3.11",/Win16/],["Windows 95",/(Windows 95)|(Win95)|(Windows_95)/],["Windows 98",/(Windows 98)|(Win98)/],["Windows 2000",/(Windows NT 5.0)|(Windows 2000)/],["Windows XP",/(Windows NT 5.1)|(Windows XP)/],["Windows Server 2003",/(Windows NT 5.2)/],["Windows Vista",/(Windows NT 6.0)/],["Windows 7",/(Windows NT 6.1)/],["Windows 8",/(Windows NT 6.2)/],["Windows 8.1",/(Windows NT 6.3)/],["Windows 10",/(Windows NT 10.0)/],["Windows ME",/Windows ME/],["Open BSD",/OpenBSD/],["Sun OS",/SunOS/],["Linux",/(Linux)|(X11)/],["Mac OS",/(Mac_PowerPC)|(Macintosh)/],["QNX",/QNX/],["BeOS",/BeOS/],["OS/2",/OS\/2/],["Search Bot",/(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves\/Teoma)|(ia_archiver)/]]).filter(function(t){return t.rule&&t.rule.test(e)})[0];return t?t.name:null}function o(){return"undefined"==typeof navigator&&void 0!==t?{name:"node",version:t.version.slice(1),os:n(/*! os */"./node_modules/os-browserify/browser.js").type().toLowerCase()}:null}function i(e){var t=s([["aol",/AOLShield\/([0-9\._]+)/],["edge",/Edge\/([0-9\._]+)/],["yandexbrowser",/YaBrowser\/([0-9\._]+)/],["vivaldi",/Vivaldi\/([0-9\.]+)/],["kakaotalk",/KAKAOTALK\s([0-9\.]+)/],["chrome",/(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["phantomjs",/PhantomJS\/([0-9\.]+)(:?\s|$)/],["crios",/CriOS\/([0-9\.]+)(:?\s|$)/],["firefox",/Firefox\/([0-9\.]+)(?:\s|$)/],["fxios",/FxiOS\/([0-9\.]+)/],["opera",/Opera\/([0-9\.]+)(?:\s|$)/],["opera",/OPR\/([0-9\.]+)(:?\s|$)$/],["ie",/Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],["ie",/MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],["ie",/MSIE\s(7\.0)/],["bb10",/BB10;\sTouch.*Version\/([0-9\.]+)/],["android",/Android\s([0-9\.]+)/],["ios",/Version\/([0-9\._]+).*Mobile.*Safari.*/],["safari",/Version\/([0-9\._]+).*Safari/]]);if(!e)return null;var n=t.map(function(t){var n=t.rule.exec(e),r=n&&n[1].split(/[._]/).slice(0,3);return r&&r.length<3&&(r=r.concat(1==r.length?[0,0]:[0])),n&&{name:t.name,version:r.join(".")}}).filter(Boolean)[0]||null;return n&&(n.os=r(e)),n}function s(e){return e.map(function(e){return{name:e[0],rule:e[1]}})}e.exports={detect:function(){var e=o();return e||("undefined"!=typeof navigator?i(navigator.userAgent):null)},detectOS:r,getNodeVersion:o,parseUserAgent:i}}).call(this,n(/*! ./../process/browser.js */"./node_modules/process/browser.js"))},"./node_modules/enum/dist/enum.js":
/*!****************************************!*\
  !*** ./node_modules/enum/dist/enum.js ***!
  \****************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){"use strict";(function(t){var r=function(e){return e&&e.__esModule?e.default:e},o=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},i=r(n(/*! ./enumItem */"./node_modules/enum/dist/enumItem.js")),s=n(/*! ./isType */"./node_modules/enum/dist/isType.js").isString,a=n(/*! ./indexOf */"./node_modules/enum/dist/indexOf.js").indexOf,u=r(n(/*! is-buffer */"./node_modules/is-buffer/index.js")),c="LE",l=function(){function e(t,n){var r=this;if(o(this,e),this.size=4,this.indirection=1,n&&s(n)&&(n={name:n}),this._options=n||{},this._options.separator=this._options.separator||" | ",this._options.endianness=this._options.endianness||c,this._options.ignoreCase=this._options.ignoreCase||!1,this._options.freez=this._options.freez||!1,this.enums=[],t.length){this._enumLastIndex=t.length;var a=t;t={};for(var u=0;u<a.length;u++)t[a[u]]=Math.pow(2,u)}for(var l in t)f(this._options.name,l),this[l]=new i(l,t[l],{ignoreCase:this._options.ignoreCase}),this.enums.push(this[l]);this._enumMap=t,this._options.ignoreCase&&(this.getLowerCaseEnums=function(){for(var e={},t=0,n=this.enums.length;t<n;t++)e[this.enums[t].key.toLowerCase()]=this.enums[t];return e}),this._options.name&&(this.name=this._options.name);this.isFlaggable=function(){for(var e=0,t=r.enums.length;e<t;e++){var n=r.enums[e];if(0===n.value||n.value&n.value-1)return!1}return!0}(),this._options.freez&&this.freezeEnums()}return e.prototype.getKey=function(e){var t=this.get(e);if(t)return t.key},e.prototype.getValue=function(e){var t=this.get(e);if(t)return t.value},e.prototype.get=function(e,t){if(null!==e&&void 0!==e){if(u(e)&&(e=e["readUInt32"+this._options.endianness](t||0)),i.isEnumItem(e)){if(a.call(this.enums,e)>=0)return e;if(!this.isFlaggable||this.isFlaggable&&e.key.indexOf(this._options.separator)<0)return;return this.get(e.key)}if(s(e)){var n=this;if(this._options.ignoreCase&&(n=this.getLowerCaseEnums(),e=e.toLowerCase()),e.indexOf(this._options.separator)>0){for(var r=e.split(this._options.separator),o=0,c=0;c<r.length;c++){o|=n[r[c]].value}return new i(e,o)}return n[e]}for(var l in this)if(this.hasOwnProperty(l)&&this[l].value===e)return this[l];var d=null;if(this.isFlaggable)for(var f in this)this.hasOwnProperty(f)&&0!=(e&this[f].value)&&(d?d+=this._options.separator:d="",d+=f);return this.get(d||null)}},e.prototype.set=function(e,t,n){var r=this.get(n);if(r)return e["writeUInt32"+this._options.endianness](r.value,t||0)},e.prototype.freezeEnums=function(){function e(e){return e}return Object.isFrozen&&Object.isSealed&&Object.getOwnPropertyNames&&Object.getOwnPropertyDescriptor&&Object.defineProperties&&Object.__defineGetter__&&Object.__defineSetter__&&function t(n){if("object"==typeof n&&null!==n&&!Object.isFrozen(n)&&!Object.isSealed(n)){for(var r in n)n.hasOwnProperty(r)&&(n.__defineGetter__(r,e.bind(null,n[r])),n.__defineSetter__(r,function(e){throw TypeError("Cannot redefine property; Enum Type is not extensible.")}),t(n[r]));Object.freeze?Object.freeze(n):function(e){Object.getOwnPropertyNames(e).forEach(function(t){Object.getOwnPropertyDescriptor(e,t).configurable&&Object.defineProperties(e,t,{writable:!1,configurable:!1})})}(n)}}(this),this},e.prototype.toJSON=function(){return this._enumMap},e.prototype.extend=function(e){if(e.length){var t=e;e={};for(var n=0;n<t.length;n++){var r=this._enumLastIndex+n;e[t[n]]=Math.pow(2,r)}for(var o in e)f(this._options.name,o),this[o]=new i(o,e[o],{ignoreCase:this._options.ignoreCase}),this.enums.push(this[o]);for(var s in this._enumMap)e[s]=this._enumMap[s];this._enumLastIndex+=e.length,this._enumMap=e,this._options.freez&&this.freezeEnums()}},e.register=function(){var n=void 0===arguments[0]?"Enum":arguments[0];t[n]||(t[n]=e)},e}();e.exports=l;var d=["_options","get","getKey","getValue","enums","isFlaggable","_enumMap","toJSON","_enumLastIndex"];function f(e,t){if(e&&"name"===t||a.call(d,t)>=0)throw new Error("Enum key "+t+" is a reserved word!")}}).call(this,n(/*! ./../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/enum/dist/enumItem.js":
/*!********************************************!*\
  !*** ./node_modules/enum/dist/enumItem.js ***!
  \********************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){"use strict";var r=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},o=n(/*! ./isType */"./node_modules/enum/dist/isType.js"),i=o.isObject,s=o.isString,a=function(){function e(t,n){var o=void 0===arguments[2]?{}:arguments[2];r(this,e),this.key=t,this.value=n,this._options=o,this._options.ignoreCase=this._options.ignoreCase||!1}return e.prototype.has=function(t){return e.isEnumItem(t)?0!=(this.value&t.value):s(t)?this._options.ignoreCase?this.key.toLowerCase().indexOf(t.toLowerCase())>=0:this.key.indexOf(t)>=0:0!=(this.value&t)},e.prototype.is=function(t){return e.isEnumItem(t)?this.key===t.key:s(t)?this._options.ignoreCase?this.key.toLowerCase()===t.toLowerCase():this.key===t:this.value===t},e.prototype.toString=function(){return this.key},e.prototype.toJSON=function(){return this.key},e.prototype.valueOf=function(){return this.value},e.isEnumItem=function(t){return t instanceof e||i(t)&&void 0!==t.key&&void 0!==t.value},e}();e.exports=a},"./node_modules/enum/dist/indexOf.js":
/*!*******************************************!*\
  !*** ./node_modules/enum/dist/indexOf.js ***!
  \*******************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){"use strict";t.__esModule=!0;var r=Array.prototype.indexOf||function(e,t){void 0===t&&(t=0),t<0&&(t+=this.length),t<0&&(t=0);for(var n=this.length;t<n;t++)if(t in this&&this[t]===e)return t;return-1};t.indexOf=r},"./node_modules/enum/dist/isType.js":
/*!******************************************!*\
  !*** ./node_modules/enum/dist/isType.js ***!
  \******************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){"use strict";t.__esModule=!0;var r=function(e,t){return typeof t===e};t.isType=r;t.isObject=function(e){return r("object",e)};t.isString=function(e){return r("string",e)}},"./node_modules/enum/index.js":
/*!************************************!*\
  !*** ./node_modules/enum/index.js ***!
  \************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){e.exports=n(/*! ./dist/enum */"./node_modules/enum/dist/enum.js")},"./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function r(e){return"function"==typeof e}function o(e){return"object"==typeof e&&null!==e}function i(e){return void 0===e}e.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(e){if(!function(e){return"number"==typeof e}(e)||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},n.prototype.emit=function(e){var t,n,s,a,u,c;if(this._events||(this._events={}),"error"===e&&(!this._events.error||o(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var l=new Error('Uncaught, unspecified "error" event. ('+t+")");throw l.context=t,l}if(i(n=this._events[e]))return!1;if(r(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:a=Array.prototype.slice.call(arguments,1),n.apply(this,a)}else if(o(n))for(a=Array.prototype.slice.call(arguments,1),s=(c=n.slice()).length,u=0;u<s;u++)c[u].apply(this,a);return!0},n.prototype.addListener=function(e,t){var s;if(!r(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,r(t.listener)?t.listener:t),this._events[e]?o(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,o(this._events[e])&&!this._events[e].warned&&(s=i(this._maxListeners)?n.defaultMaxListeners:this._maxListeners)&&s>0&&this._events[e].length>s&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(e,t){if(!r(t))throw TypeError("listener must be a function");var n=!1;function o(){this.removeListener(e,o),n||(n=!0,t.apply(this,arguments))}return o.listener=t,this.on(e,o),this},n.prototype.removeListener=function(e,t){var n,i,s,a;if(!r(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(s=(n=this._events[e]).length,i=-1,n===t||r(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(o(n)){for(a=s;a-- >0;)if(n[a]===t||n[a].listener&&n[a].listener===t){i=a;break}if(i<0)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(i,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},n.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(r(n=this._events[e]))this.removeListener(e,n);else if(n)for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},n.prototype.listeners=function(e){return this._events&&this._events[e]?r(this._events[e])?[this._events[e]]:this._events[e].slice():[]},n.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(r(t))return 1;if(t)return t.length}return 0},n.listenerCount=function(e,t){return e.listenerCount(t)}},"./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){t.read=function(e,t,n,r,o){var i,s,a=8*o-r-1,u=(1<<a)-1,c=u>>1,l=-7,d=n?o-1:0,f=n?-1:1,p=e[t+d];for(d+=f,i=p&(1<<-l)-1,p>>=-l,l+=a;l>0;i=256*i+e[t+d],d+=f,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=r;l>0;s=256*s+e[t+d],d+=f,l-=8);if(0===i)i=1-c;else{if(i===u)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,r),i-=c}return(p?-1:1)*s*Math.pow(2,i-r)},t.write=function(e,t,n,r,o,i){var s,a,u,c=8*i-o-1,l=(1<<c)-1,d=l>>1,f=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:i-1,h=r?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),(t+=s+d>=1?f/u:f*Math.pow(2,1-d))*u>=2&&(s++,u/=2),s+d>=l?(a=0,s=l):s+d>=1?(a=(t*u-1)*Math.pow(2,o),s+=d):(a=t*Math.pow(2,d-1)*Math.pow(2,o),s=0));o>=8;e[n+p]=255&a,p+=h,a/=256,o-=8);for(s=s<<o|a,c+=o;c>0;e[n+p]=255&s,p+=h,s/=256,c-=8);e[n+p-h]|=128*m}},"./node_modules/is-buffer/index.js":
/*!*****************************************!*\
  !*** ./node_modules/is-buffer/index.js ***!
  \*****************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},"./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},"./node_modules/js-binarypack/lib/binarypack.js":
/*!******************************************************!*\
  !*** ./node_modules/js-binarypack/lib/binarypack.js ***!
  \******************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){var r=n(/*! ./bufferbuilder */"./node_modules/js-binarypack/lib/bufferbuilder.js").BufferBuilder,o=n(/*! ./bufferbuilder */"./node_modules/js-binarypack/lib/bufferbuilder.js").binaryFeatures,i={unpack:function(e){return new s(e).unpack()},pack:function(e){var t=new a;return t.pack(e),t.getBuffer()}};function s(e){this.index=0,this.dataBuffer=e,this.dataView=new Uint8Array(this.dataBuffer),this.length=this.dataBuffer.byteLength}function a(){this.bufferBuilder=new r}function u(e){var t=e.charCodeAt(0);return t<=2047?"00":t<=65535?"000":t<=2097151?"0000":t<=67108863?"00000":"000000"}e.exports=i,s.prototype.unpack=function(){var e,t=this.unpack_uint8();if(t<128)return t;if((224^t)<32)return(224^t)-32;if((e=160^t)<=15)return this.unpack_raw(e);if((e=176^t)<=15)return this.unpack_string(e);if((e=144^t)<=15)return this.unpack_array(e);if((e=128^t)<=15)return this.unpack_map(e);switch(t){case 192:return null;case 193:return;case 194:return!1;case 195:return!0;case 202:return this.unpack_float();case 203:return this.unpack_double();case 204:return this.unpack_uint8();case 205:return this.unpack_uint16();case 206:return this.unpack_uint32();case 207:return this.unpack_uint64();case 208:return this.unpack_int8();case 209:return this.unpack_int16();case 210:return this.unpack_int32();case 211:return this.unpack_int64();case 212:case 213:case 214:case 215:return;case 216:return e=this.unpack_uint16(),this.unpack_string(e);case 217:return e=this.unpack_uint32(),this.unpack_string(e);case 218:return e=this.unpack_uint16(),this.unpack_raw(e);case 219:return e=this.unpack_uint32(),this.unpack_raw(e);case 220:return e=this.unpack_uint16(),this.unpack_array(e);case 221:return e=this.unpack_uint32(),this.unpack_array(e);case 222:return e=this.unpack_uint16(),this.unpack_map(e);case 223:return e=this.unpack_uint32(),this.unpack_map(e)}},s.prototype.unpack_uint8=function(){var e=255&this.dataView[this.index];return this.index++,e},s.prototype.unpack_uint16=function(){var e=this.read(2),t=256*(255&e[0])+(255&e[1]);return this.index+=2,t},s.prototype.unpack_uint32=function(){var e=this.read(4),t=256*(256*(256*e[0]+e[1])+e[2])+e[3];return this.index+=4,t},s.prototype.unpack_uint64=function(){var e=this.read(8),t=256*(256*(256*(256*(256*(256*(256*e[0]+e[1])+e[2])+e[3])+e[4])+e[5])+e[6])+e[7];return this.index+=8,t},s.prototype.unpack_int8=function(){var e=this.unpack_uint8();return e<128?e:e-256},s.prototype.unpack_int16=function(){var e=this.unpack_uint16();return e<32768?e:e-65536},s.prototype.unpack_int32=function(){var e=this.unpack_uint32();return e<Math.pow(2,31)?e:e-Math.pow(2,32)},s.prototype.unpack_int64=function(){var e=this.unpack_uint64();return e<Math.pow(2,63)?e:e-Math.pow(2,64)},s.prototype.unpack_raw=function(e){if(this.length<this.index+e)throw new Error("BinaryPackFailure: index is out of range "+this.index+" "+e+" "+this.length);var t=this.dataBuffer.slice(this.index,this.index+e);return this.index+=e,t},s.prototype.unpack_string=function(e){for(var t,n,r=this.read(e),o=0,i="";o<e;)(t=r[o])<128?(i+=String.fromCharCode(t),o++):(192^t)<32?(n=(192^t)<<6|63&r[o+1],i+=String.fromCharCode(n),o+=2):(n=(15&t)<<12|(63&r[o+1])<<6|63&r[o+2],i+=String.fromCharCode(n),o+=3);return this.index+=e,i},s.prototype.unpack_array=function(e){for(var t=new Array(e),n=0;n<e;n++)t[n]=this.unpack();return t},s.prototype.unpack_map=function(e){for(var t={},n=0;n<e;n++){var r=this.unpack(),o=this.unpack();t[r]=o}return t},s.prototype.unpack_float=function(){var e=this.unpack_uint32(),t=(e>>23&255)-127;return(0==e>>31?1:-1)*(8388607&e|8388608)*Math.pow(2,t-23)},s.prototype.unpack_double=function(){var e=this.unpack_uint32(),t=this.unpack_uint32(),n=e>>31,r=(e>>20&2047)-1023,o=(1048575&e|1048576)*Math.pow(2,r-20)+t*Math.pow(2,r-52);return(0==n?1:-1)*o},s.prototype.read=function(e){var t=this.index;if(t+e<=this.length)return this.dataView.subarray(t,t+e);throw new Error("BinaryPackFailure: read index out of range")},a.prototype.getBuffer=function(){return this.bufferBuilder.getBuffer()},a.prototype.pack=function(e){var t=typeof e;if("string"==t)this.pack_string(e);else if("number"==t)Math.floor(e)===e?this.pack_integer(e):this.pack_double(e);else if("boolean"==t)!0===e?this.bufferBuilder.append(195):!1===e&&this.bufferBuilder.append(194);else if("undefined"==t)this.bufferBuilder.append(192);else{if("object"!=t)throw new Error('Type "'+t+'" not yet supported');if(null===e)this.bufferBuilder.append(192);else{var n=e.constructor;if(n==Array)this.pack_array(e);else if(n==Blob||n==File)this.pack_bin(e);else if(n==ArrayBuffer)o.useArrayBufferView?this.pack_bin(new Uint8Array(e)):this.pack_bin(e);else if("BYTES_PER_ELEMENT"in e)o.useArrayBufferView?this.pack_bin(new Uint8Array(e.buffer)):this.pack_bin(e.buffer);else if(n==Object)this.pack_object(e);else if(n==Date)this.pack_string(e.toString());else{if("function"!=typeof e.toBinaryPack)throw new Error('Type "'+n.toString()+'" not yet supported');this.bufferBuilder.append(e.toBinaryPack())}}}this.bufferBuilder.flush()},a.prototype.pack_bin=function(e){var t=e.length||e.byteLength||e.size;if(t<=15)this.pack_uint8(160+t);else if(t<=65535)this.bufferBuilder.append(218),this.pack_uint16(t);else{if(!(t<=4294967295))throw new Error("Invalid length");this.bufferBuilder.append(219),this.pack_uint32(t)}this.bufferBuilder.append(e)},a.prototype.pack_string=function(e){var t=function(e){return e.length>600?new Blob([e]).size:e.replace(/[^\u0000-\u007F]/g,u).length}(e);if(t<=15)this.pack_uint8(176+t);else if(t<=65535)this.bufferBuilder.append(216),this.pack_uint16(t);else{if(!(t<=4294967295))throw new Error("Invalid length");this.bufferBuilder.append(217),this.pack_uint32(t)}this.bufferBuilder.append(e)},a.prototype.pack_array=function(e){var t=e.length;if(t<=15)this.pack_uint8(144+t);else if(t<=65535)this.bufferBuilder.append(220),this.pack_uint16(t);else{if(!(t<=4294967295))throw new Error("Invalid length");this.bufferBuilder.append(221),this.pack_uint32(t)}for(var n=0;n<t;n++)this.pack(e[n])},a.prototype.pack_integer=function(e){if(-32<=e&&e<=127)this.bufferBuilder.append(255&e);else if(0<=e&&e<=255)this.bufferBuilder.append(204),this.pack_uint8(e);else if(-128<=e&&e<=127)this.bufferBuilder.append(208),this.pack_int8(e);else if(0<=e&&e<=65535)this.bufferBuilder.append(205),this.pack_uint16(e);else if(-32768<=e&&e<=32767)this.bufferBuilder.append(209),this.pack_int16(e);else if(0<=e&&e<=4294967295)this.bufferBuilder.append(206),this.pack_uint32(e);else if(-2147483648<=e&&e<=2147483647)this.bufferBuilder.append(210),this.pack_int32(e);else if(-0x8000000000000000<=e&&e<=0x8000000000000000)this.bufferBuilder.append(211),this.pack_int64(e);else{if(!(0<=e&&e<=0x10000000000000000))throw new Error("Invalid integer");this.bufferBuilder.append(207),this.pack_uint64(e)}},a.prototype.pack_double=function(e){var t=0;e<0&&(t=1,e=-e);var n=Math.floor(Math.log(e)/Math.LN2),r=e/Math.pow(2,n)-1,o=Math.floor(r*Math.pow(2,52)),i=Math.pow(2,32),s=t<<31|n+1023<<20|o/i&1048575,a=o%i;this.bufferBuilder.append(203),this.pack_int32(s),this.pack_int32(a)},a.prototype.pack_object=function(e){var t=Object.keys(e).length;if(t<=15)this.pack_uint8(128+t);else if(t<=65535)this.bufferBuilder.append(222),this.pack_uint16(t);else{if(!(t<=4294967295))throw new Error("Invalid length");this.bufferBuilder.append(223),this.pack_uint32(t)}for(var n in e)e.hasOwnProperty(n)&&(this.pack(n),this.pack(e[n]))},a.prototype.pack_uint8=function(e){this.bufferBuilder.append(e)},a.prototype.pack_uint16=function(e){this.bufferBuilder.append(e>>8),this.bufferBuilder.append(255&e)},a.prototype.pack_uint32=function(e){var t=4294967295&e;this.bufferBuilder.append((4278190080&t)>>>24),this.bufferBuilder.append((16711680&t)>>>16),this.bufferBuilder.append((65280&t)>>>8),this.bufferBuilder.append(255&t)},a.prototype.pack_uint64=function(e){var t=e/Math.pow(2,32),n=e%Math.pow(2,32);this.bufferBuilder.append((4278190080&t)>>>24),this.bufferBuilder.append((16711680&t)>>>16),this.bufferBuilder.append((65280&t)>>>8),this.bufferBuilder.append(255&t),this.bufferBuilder.append((4278190080&n)>>>24),this.bufferBuilder.append((16711680&n)>>>16),this.bufferBuilder.append((65280&n)>>>8),this.bufferBuilder.append(255&n)},a.prototype.pack_int8=function(e){this.bufferBuilder.append(255&e)},a.prototype.pack_int16=function(e){this.bufferBuilder.append((65280&e)>>8),this.bufferBuilder.append(255&e)},a.prototype.pack_int32=function(e){this.bufferBuilder.append(e>>>24&255),this.bufferBuilder.append((16711680&e)>>>16),this.bufferBuilder.append((65280&e)>>>8),this.bufferBuilder.append(255&e)},a.prototype.pack_int64=function(e){var t=Math.floor(e/Math.pow(2,32)),n=e%Math.pow(2,32);this.bufferBuilder.append((4278190080&t)>>>24),this.bufferBuilder.append((16711680&t)>>>16),this.bufferBuilder.append((65280&t)>>>8),this.bufferBuilder.append(255&t),this.bufferBuilder.append((4278190080&n)>>>24),this.bufferBuilder.append((16711680&n)>>>16),this.bufferBuilder.append((65280&n)>>>8),this.bufferBuilder.append(255&n)}},"./node_modules/js-binarypack/lib/bufferbuilder.js":
/*!*********************************************************!*\
  !*** ./node_modules/js-binarypack/lib/bufferbuilder.js ***!
  \*********************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){var n={};n.useBlobBuilder=function(){try{return new Blob([]),!1}catch(e){return!0}}(),n.useArrayBufferView=!n.useBlobBuilder&&function(){try{return 0===new Blob([new Uint8Array([])]).size}catch(e){return!0}}(),e.exports.binaryFeatures=n;var r=e.exports.BlobBuilder;function o(){this._pieces=[],this._parts=[]}"undefined"!=typeof window&&(r=e.exports.BlobBuilder=window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder||window.BlobBuilder),o.prototype.append=function(e){"number"==typeof e?this._pieces.push(e):(this.flush(),this._parts.push(e))},o.prototype.flush=function(){if(this._pieces.length>0){var e=new Uint8Array(this._pieces);n.useArrayBufferView||(e=e.buffer),this._parts.push(e),this._pieces=[]}},o.prototype.getBuffer=function(){if(this.flush(),n.useBlobBuilder){for(var e=new r,t=0,o=this._parts.length;t<o;t++)e.append(this._parts[t]);return e.getBlob()}return new Blob(this._parts)},e.exports.BufferBuilder=o},"./node_modules/node-libs-browser/node_modules/buffer/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/buffer/index.js ***!
  \*********************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(/*! base64-js */"./node_modules/base64-js/index.js"),o=n(/*! ieee754 */"./node_modules/ieee754/index.js"),i=n(/*! isarray */"./node_modules/isarray/index.js");function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(s()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return d(this,e)}return c(this,e,t,n)}function c(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=f(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|h(t,n),o=(e=a(e,r)).write(t,n);o!==r&&(e=e.slice(0,o));return e}(e,t,n):function(e,t){if(u.isBuffer(t)){var n=0|p(t.length);return 0===(e=a(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||function(e){return e!=e}(t.length)?a(e,0):f(e,t);if("Buffer"===t.type&&i(t.data))return f(e,t.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function d(e,t){if(l(t),e=a(e,t<0?0:0|p(t)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function f(e,t){var n=t.length<0?0:0|p(t.length);e=a(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function p(e){if(e>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|e}function h(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return F(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return V(e).length;default:if(r)return F(e).length;t=(""+t).toLowerCase(),r=!0}}function m(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function g(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=u.from(t,r)),u.isBuffer(t))return 0===t.length?-1:y(e,t,n,r,o);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):y(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function y(e,t,n,r,o){var i,s=1,a=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;s=2,a/=2,u/=2,n/=2}function c(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(o){var l=-1;for(i=n;i<a;i++)if(c(e,i)===c(t,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===u)return l*s}else-1!==l&&(i-=i-l),l=-1}else for(n+u>a&&(n=a-u),i=n;i>=0;i--){for(var d=!0,f=0;f<u;f++)if(c(e,i+f)!==c(t,f)){d=!1;break}if(d)return i}return-1}function v(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var s=0;s<r;++s){var a=parseInt(t.substr(2*s,2),16);if(isNaN(a))return s;e[n+s]=a}return s}function b(e,t,n,r){return z(F(t,e.length-n),e,n,r)}function _(e,t,n,r){return z(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function w(e,t,n,r){return _(e,t,n,r)}function E(e,t,n,r){return z(V(t),e,n,r)}function k(e,t,n,r){return z(function(e,t){for(var n,r,o,i=[],s=0;s<e.length&&!((t-=2)<0);++s)n=e.charCodeAt(s),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(t,e.length-n),e,n,r)}function S(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function x(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var i,s,a,u,c=e[o],l=null,d=c>239?4:c>223?3:c>191?2:1;if(o+d<=n)switch(d){case 1:c<128&&(l=c);break;case 2:128==(192&(i=e[o+1]))&&(u=(31&c)<<6|63&i)>127&&(l=u);break;case 3:i=e[o+1],s=e[o+2],128==(192&i)&&128==(192&s)&&(u=(15&c)<<12|(63&i)<<6|63&s)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:i=e[o+1],s=e[o+2],a=e[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(l=u)}null===l?(l=65533,d=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),o+=d}return function(e){var t=e.length;if(t<=T)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=T));return n}(r)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=s(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,n){return c(null,e,t,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,n){return function(e,t,n,r){return l(t),t<=0?a(e,t):void 0!==n?"string"==typeof r?a(e,t).fill(n,r):a(e,t).fill(n):a(e,t)}(null,e,t,n)},u.allocUnsafe=function(e){return d(null,e)},u.allocUnsafeSlow=function(e){return d(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,o=0,i=Math.min(n,r);o<i;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=u.allocUnsafe(t),o=0;for(n=0;n<e.length;++n){var s=e[n];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,o),o+=s.length}return r},u.byteLength=h,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)m(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)m(this,t,t+3),m(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)m(this,t,t+7),m(this,t+1,t+6),m(this,t+2,t+5),m(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?x(this,0,e):function(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return R(this,t,n);case"utf8":case"utf-8":return x(this,t,n);case"ascii":return C(this,t,n);case"latin1":case"binary":return A(this,t,n);case"base64":return S(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,n,r,o){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&t>=n)return 0;if(r>=o)return-1;if(t>=n)return 1;if(t>>>=0,n>>>=0,r>>>=0,o>>>=0,this===e)return 0;for(var i=o-r,s=n-t,a=Math.min(i,s),c=this.slice(r,o),l=e.slice(t,n),d=0;d<a;++d)if(c[d]!==l[d]){i=c[d],s=l[d];break}return i<s?-1:s<i?1:0},u.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},u.prototype.indexOf=function(e,t,n){return g(this,e,t,n,!0)},u.prototype.lastIndexOf=function(e,t,n){return g(this,e,t,n,!1)},u.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return v(this,e,t,n);case"utf8":case"utf-8":return b(this,e,t,n);case"ascii":return _(this,e,t,n);case"latin1":case"binary":return w(this,e,t,n);case"base64":return E(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,e,t,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var T=4096;function C(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function A(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function R(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=t;i<n;++i)o+=D(e[i]);return o}function P(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function O(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function N(e,t,n,r,o,i){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function M(e,t,n,r){t<0&&(t=65535+t+1);for(var o=0,i=Math.min(e.length-n,2);o<i;++o)e[n+o]=(t&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function B(e,t,n,r){t<0&&(t=4294967295+t+1);for(var o=0,i=Math.min(e.length-n,4);o<i;++o)e[n+o]=t>>>8*(r?o:3-o)&255}function j(e,t,n,r,o,i){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function I(e,t,n,r,i){return i||j(e,0,n,4),o.write(e,t,n,r,23,4),n+4}function L(e,t,n,r,i){return i||j(e,0,n,8),o.write(e,t,n,r,52,8),n+8}u.prototype.slice=function(e,t){var n,r=this.length;if(e=~~e,t=void 0===t?r:~~t,e<0?(e+=r)<0&&(e=0):e>r&&(e=r),t<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=u.prototype;else{var o=t-e;n=new u(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+e]}return n},u.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||O(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r},u.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||O(e,t,this.length);for(var r=this[e+--t],o=1;t>0&&(o*=256);)r+=this[e+--t]*o;return r},u.prototype.readUInt8=function(e,t){return t||O(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||O(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||O(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||O(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||O(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||O(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*t)),r},u.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||O(e,t,this.length);for(var r=t,o=1,i=this[e+--r];r>0&&(o*=256);)i+=this[e+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},u.prototype.readInt8=function(e,t){return t||O(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||O(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(e,t){t||O(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(e,t){return t||O(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||O(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||O(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||O(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||O(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||O(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[t]=255&e;++i<n&&(o*=256);)this[t+i]=e/o&255;return t+n},u.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+n},u.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):M(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):M(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):B(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):B(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);N(this,e,t,n,o-1,-o)}var i=0,s=1,a=0;for(this[t]=255&e;++i<n&&(s*=256);)e<0&&0===a&&0!==this[t+i-1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+n},u.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);N(this,e,t,n,o-1,-o)}var i=n-1,s=1,a=0;for(this[t+i]=255&e;--i>=0&&(s*=256);)e<0&&0===a&&0!==this[t+i+1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+n},u.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):M(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):M(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):B(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):B(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,n){return I(this,e,t,!0,n)},u.prototype.writeFloatBE=function(e,t,n){return I(this,e,t,!1,n)},u.prototype.writeDoubleLE=function(e,t,n){return L(this,e,t,!0,n)},u.prototype.writeDoubleBE=function(e,t,n){return L(this,e,t,!1,n)},u.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o,i=r-n;if(this===e&&n<t&&t<r)for(o=i-1;o>=0;--o)e[o+t]=this[o+n];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)e[o+t]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+i),t);return i},u.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var i;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(i=t;i<n;++i)this[i]=e;else{var s=u.isBuffer(e)?e:F(new u(e,r).toString()),a=s.length;for(i=0;i<n-t;++i)this[i+t]=s[i%a]}return this};var U=/[^+\/0-9A-Za-z-_]/g;function D(e){return e<16?"0"+e.toString(16):e.toString(16)}function F(e,t){var n;t=t||1/0;for(var r=e.length,o=null,i=[],s=0;s<r;++s){if((n=e.charCodeAt(s))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(s+1===r){(t-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function V(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(U,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function z(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}}).call(this,n(/*! ./../../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/object-sizeof/byte_size.js":
/*!*************************************************!*\
  !*** ./node_modules/object-sizeof/byte_size.js ***!
  \*************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){e.exports={STRING:2,BOOLEAN:4,NUMBER:8}},"./node_modules/object-sizeof/index.js":
/*!*********************************************!*\
  !*** ./node_modules/object-sizeof/index.js ***!
  \*********************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){"use strict";var r=n(/*! ./byte_size */"./node_modules/object-sizeof/byte_size.js"),o=n(/*! buffer */"./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer;e.exports=function e(t){if(null!==t&&"object"==typeof t){if(o.isBuffer(t))return t.length;var n=0;for(var i in t)if(Object.hasOwnProperty.call(t,i)){n+=e(i);try{n+=e(t[i])}catch(e){e instanceof RangeError&&(n=0)}}return n}return"string"==typeof t?t.length*r.STRING:"boolean"==typeof t?r.BOOLEAN:"number"==typeof t?r.NUMBER:0}},"./node_modules/os-browserify/browser.js":
/*!***********************************************!*\
  !*** ./node_modules/os-browserify/browser.js ***!
  \***********************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){t.endianness=function(){return"LE"},t.hostname=function(){return"undefined"!=typeof location?location.hostname:""},t.loadavg=function(){return[]},t.uptime=function(){return 0},t.freemem=function(){return Number.MAX_VALUE},t.totalmem=function(){return Number.MAX_VALUE},t.cpus=function(){return[]},t.type=function(){return"Browser"},t.release=function(){return"undefined"!=typeof navigator?navigator.appVersion:""},t.networkInterfaces=t.getNetworkInterfaces=function(){return{}},t.arch=function(){return"javascript"},t.platform=function(){return"browser"},t.tmpdir=t.tmpDir=function(){return"/tmp"},t.EOL="\n",t.homedir=function(){return"/"}},"./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var u,c=[],l=!1,d=-1;function f(){l&&u&&(l=!1,u.length?c=u.concat(c):d=-1,c.length&&p())}function p(){if(!l){var e=a(f);l=!0;for(var t=c.length;t;){for(u=c,c=[];++d<t;)u&&u[d].run();d=-1,t=c.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||l||a(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},"./node_modules/query-string/index.js":
/*!********************************************!*\
  !*** ./node_modules/query-string/index.js ***!
  \********************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){"use strict";var r=n(/*! strict-uri-encode */"./node_modules/strict-uri-encode/index.js"),o=n(/*! object-assign */"./node_modules/query-string/node_modules/object-assign/index.js"),i=n(/*! decode-uri-component */"./node_modules/decode-uri-component/index.js");function s(e,t){return t.encode?t.strict?r(e):encodeURIComponent(e):e}t.extract=function(e){return e.split("?")[1]||""},t.parse=function(e,t){var n=function(e){var t;switch(e.arrayFormat){case"index":return function(e,n,r){t=/\[(\d*)\]$/.exec(e),e=e.replace(/\[\d*\]$/,""),t?(void 0===r[e]&&(r[e]={}),r[e][t[1]]=n):r[e]=n};case"bracket":return function(e,n,r){t=/(\[\])$/.exec(e),e=e.replace(/\[\]$/,""),t?void 0!==r[e]?r[e]=[].concat(r[e],n):r[e]=[n]:r[e]=n};default:return function(e,t,n){void 0!==n[e]?n[e]=[].concat(n[e],t):n[e]=t}}}(t=o({arrayFormat:"none"},t)),r=Object.create(null);return"string"!=typeof e?r:(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach(function(e){var t=e.replace(/\+/g," ").split("="),o=t.shift(),s=t.length>0?t.join("="):void 0;s=void 0===s?null:i(s),n(i(o),s,r)}),Object.keys(r).sort().reduce(function(e,t){var n=r[t];return Boolean(n)&&"object"==typeof n&&!Array.isArray(n)?e[t]=function e(t){return Array.isArray(t)?t.sort():"object"==typeof t?e(Object.keys(t)).sort(function(e,t){return Number(e)-Number(t)}).map(function(e){return t[e]}):t}(n):e[t]=n,e},Object.create(null))):r},t.stringify=function(e,t){var n=function(e){switch(e.arrayFormat){case"index":return function(t,n,r){return null===n?[s(t,e),"[",r,"]"].join(""):[s(t,e),"[",s(r,e),"]=",s(n,e)].join("")};case"bracket":return function(t,n){return null===n?s(t,e):[s(t,e),"[]=",s(n,e)].join("")};default:return function(t,n){return null===n?s(t,e):[s(t,e),"=",s(n,e)].join("")}}}(t=o({encode:!0,strict:!0,arrayFormat:"none"},t));return e?Object.keys(e).sort().map(function(r){var o=e[r];if(void 0===o)return"";if(null===o)return s(r,t);if(Array.isArray(o)){var i=[];return o.slice().forEach(function(e){void 0!==e&&i.push(n(r,e,i.length))}),i.join("&")}return s(r,t)+"="+s(o,t)}).filter(function(e){return e.length>0}).join("&"):""}},"./node_modules/query-string/node_modules/object-assign/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/query-string/node_modules/object-assign/index.js ***!
  \***********************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,s,a=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var c in n=Object(arguments[u]))o.call(n,c)&&(a[c]=n[c]);if(r){s=r(n);for(var l=0;l<s.length;l++)i.call(n,s[l])&&(a[s[l]]=n[s[l]])}}return a}},"./node_modules/sdp-interop/lib/array-equals.js":
/*!******************************************************!*\
  !*** ./node_modules/sdp-interop/lib/array-equals.js ***!
  \******************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){e.exports=function e(t){if(!t)return!1;if(this.length!=t.length)return!1;for(var n=0,r=this.length;n<r;n++)if(this[n]instanceof Array&&t[n]instanceof Array){if(!e.apply(this[n],[t[n]]))return!1}else if(this[n]!=t[n])return!1;return!0}},"./node_modules/sdp-interop/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/sdp-interop/lib/index.js ***!
  \***********************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){t.Interop=n(/*! ./interop */"./node_modules/sdp-interop/lib/interop.js")},"./node_modules/sdp-interop/lib/interop.js":
/*!*************************************************!*\
  !*** ./node_modules/sdp-interop/lib/interop.js ***!
  \*************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){"use strict";var r=n(/*! ./transform */"./node_modules/sdp-interop/lib/transform.js"),o=n(/*! ./array-equals */"./node_modules/sdp-interop/lib/array-equals.js");function i(){this.cache={mlB2UMap:{},mlU2BMap:{}}}e.exports=i,i.prototype.candidateToUnifiedPlan=function(e){var t=new RTCIceCandidate(e);return t.sdpMLineIndex=this.cache.mlB2UMap[t.sdpMLineIndex],t},i.prototype.candidateToPlanB=function(e){var t=new RTCIceCandidate(e);if(0===t.sdpMid.indexOf("audio"))t.sdpMid="audio";else{if(0!==t.sdpMid.indexOf("video"))throw new Error("candidate with "+t.sdpMid+" not allowed");t.sdpMid="video"}return t.sdpMLineIndex=this.cache.mlU2BMap[t.sdpMLineIndex],t},i.prototype.getFirstSendingIndexFromAnswer=function(e){if(!this.cache.answer)return null;var t=r.parse(this.cache.answer);if(t&&t.media&&Array.isArray(t.media))for(var n=0;n<t.media.length;n++)if(t.media[n].type==e&&(!t.media[n].direction||"sendrecv"===t.media[n].direction||"sendonly"===t.media[n].direction))return n;return null},i.prototype.toPlanB=function(e){var t=this;if("object"!=typeof e||null===e||"string"!=typeof e.sdp)return console.warn("An empty description was passed as an argument."),e;var n=r.parse(e.sdp);if(void 0===n.media||!Array.isArray(n.media)||0===n.media.length)return console.warn("The description has no media."),e;if(n.media.length<=3&&n.media.every(function(e){return-1!==["video","audio","data"].indexOf(e.mid)}))return console.warn("This description does not look like Unified Plan."),e;for(var o=e.sdp,i=!1,s=0;s<n.media.length;s++){n.media[s].rtp.forEach(function(e){if("NULL"===e.codec){i=!0;var n=r.parse(t.cache.offer);e.codec=n.media[s].rtp[0].codec}})}i&&(o=r.write(n)),this.cache[e.type]=o;var a=n.media;n.media=[];var u={},c=[];a.forEach(function(e){if(("string"!=typeof e.rtcpMux||"rtcp-mux"!==e.rtcpMux)&&"inactive"!==e.direction)throw new Error("Cannot convert to Plan B because m-lines without the rtcp-mux attribute were found.");void 0!==u[e.type]&&"inactive"!==u[e.type].direction||(u[e.type]=e)}),a.forEach(function(e){if("application"===e.type)return n.media.push(e),void c.push(e.mid);"object"==typeof e.sources&&Object.keys(e.sources).forEach(function(t){"object"!=typeof u[e.type].sources&&(u[e.type].sources={}),u[e.type].sources[t]=e.sources[t],void 0!==e.msid&&(u[e.type].sources[t].msid=e.msid)}),void 0!==e.ssrcGroups&&Array.isArray(e.ssrcGroups)&&(void 0!==u[e.type].ssrcGroups&&Array.isArray(u[e.type].ssrcGroups)||(u[e.type].ssrcGroups=[]),u[e.type].ssrcGroups=u[e.type].ssrcGroups.concat(e.ssrcGroups)),u[e.type]===e&&(e.mid=e.type,delete e.bundleOnly,delete e.msid,"inactive"!==e.direction&&c.push(e.type),n.media.push(e))}),n.groups.some(function(e){if("BUNDLE"===e.type)return e.mids=c.join(" "),!0}),n.msidSemantic={semantic:"WMS",token:"*"};var l=r.write(n);return new RTCSessionDescription({type:e.type,sdp:l})},i.prototype.toUnifiedPlan=function(e){var t=this;if("object"!=typeof e||null===e||"string"!=typeof e.sdp)return console.warn("An empty description was passed as an argument."),e;var n=r.parse(e.sdp);if(void 0===n.media||!Array.isArray(n.media)||0===n.media.length)return console.warn("The description has no media."),e;if(n.media.length>3||!n.media.every(function(e){return-1!==["video","audio","data"].indexOf(e.mid)}))return console.warn("This description does not look like Plan B."),e;var i=[];n.media.forEach(function(e){i.push(e.mid)});var s,a=!1;if(void 0!==n.groups&&Array.isArray(n.groups)&&(a=n.groups.every(function(e){return"BUNDLE"!==e.type||o.apply(e.mids.sort(),[i.sort()])})),!a)throw new Error("Cannot convert to Unified Plan because m-lines that are not bundled were found.");void 0!==this.cache[e.type]&&(s=r.parse(this.cache[e.type]));var u={audio:{},video:{}},c={},l=0,d=0;if(n.media.forEach(function(n){if(("string"!=typeof n.rtcpMux||"rtcp-mux"!==n.rtcpMux)&&"inactive"!==n.direction)throw new Error("Cannot convert to Unified Plan because m-lines without the rtcp-mux attribute were found.");if("application"!==n.type){var r=n.sources,o=n.ssrcGroups,i=n.candidates,a=n.iceUfrag,f=n.icePwd,p=n.fingerprint,h=n.port;delete n.sources,delete n.ssrcGroups,delete n.candidates,delete n.iceUfrag,delete n.icePwd,delete n.fingerprint,delete n.port,delete n.mid;var m={};void 0!==o&&Array.isArray(o)&&o.forEach(function(e){"SIM"!==e.semantics&&void 0!==e.ssrcs&&Array.isArray(e.ssrcs)&&e.ssrcs.forEach(function(t){void 0===m[t]&&(m[t]=[]),m[t].push(e)})});var g={};"object"==typeof r&&Object.keys(r).forEach(function(o){var y;if("offer"!==e.type||r[o].msid)if(void 0!==m[o]&&Array.isArray(m[o])&&m[o].some(function(e){return e.ssrcs.some(function(e){if("object"==typeof g[e])return y=g[e],!0})}),"object"==typeof y)y.sources[o]=r[o],delete r[o].msid;else{if(y=Object.create(n),g[o]=y,void 0!==r[o].msid&&(y.msid=r[o].msid,delete r[o].msid),y.sources={},y.sources[o]=r[o],y.ssrcGroups=m[o],void 0!==s&&void 0!==s.media&&Array.isArray(s.media)&&s.media.forEach(function(e){"object"==typeof e.sources&&Object.keys(e.sources).forEach(function(t){t===o&&(y.mid=e.mid)})}),void 0===y.mid){if("answer"===e.type)throw new Error("An unmapped SSRC was found.");y.mid=[n.type,"-",o].join("")}y.candidates=i,y.iceUfrag=a,y.icePwd=f,y.fingerprint=p,y.port=h,c[y.mid]=y,t.cache.mlU2BMap[d]=l,void 0===t.cache.mlB2UMap[l]&&(t.cache.mlB2UMap[l]=d),d++}else u[n.type][o]=r[o]}),l++}else c[n.mid]=n}),n.media=[],i=[],"answer"===e.type)for(var f=0;f<s.media.length;f++){var p=s.media[f];void 0===c[p.mid]&&(delete p.msid,delete p.sources,delete p.ssrcGroups,p.direction&&"sendrecv"!==p.direction?"sendonly"===p.direction&&(p.direction="inactive"):p.direction="recvonly"),n.media.push(p),"string"==typeof p.mid&&i.push(p.mid)}else void 0!==s&&void 0!==s.media&&Array.isArray(s.media)&&s.media.forEach(function(e){i.push(e.mid),void 0!==c[e.mid]?n.media.push(c[e.mid]):(delete e.msid,delete e.sources,delete e.ssrcGroups,e.direction&&"sendrecv"!==e.direction||(e.direction="recvonly"),e.direction&&"sendonly"!==e.direction||(e.direction="inactive"),n.media.push(e))}),Object.keys(c).forEach(function(e){-1===i.indexOf(e)&&(i.push(e),"recvonly"===c[e].direction?n.media.some(function(t){if(("sendrecv"===t.direction||"sendonly"===t.direction)&&t.type===c[e].type)return Object.keys(c[e].sources).forEach(function(n){t.sources[n]=c[e].sources[n]}),!0}):n.media.push(c[e]))});["audio","video"].forEach(function(e){if(n&&n.media&&Array.isArray(n.media)){var r=null;if(Object.keys(u[e]).length>0&&null===(r=t.getFirstSendingIndexFromAnswer(e)))for(var o=0;o<n.media.length;o++)if(n.media[o].type===e){r=o;break}if(r&&n.media.length>r){var i=n.media[r];Object.keys(u[e]).forEach(function(t){i.sources&&i.sources[t]&&console.warn("Replacing an existing SSRC."),i.sources||(i.sources={}),i.sources[t]=u[e][t]})}}}),n.groups.some(function(e){if("BUNDLE"===e.type)return e.mids=i.join(" "),!0}),n.msidSemantic={semantic:"WMS",token:"*"};var h=r.write(n);return this.cache[e.type]=h,new RTCSessionDescription({type:e.type,sdp:h})}},"./node_modules/sdp-interop/lib/transform.js":
/*!***************************************************!*\
  !*** ./node_modules/sdp-interop/lib/transform.js ***!
  \***************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){var r=n(/*! sdp-transform */"./node_modules/sdp-transform/lib/index.js");t.write=function(e,t){return void 0!==e&&void 0!==e.media&&Array.isArray(e.media)&&e.media.forEach(function(e){void 0!==e.sources&&0!==Object.keys(e.sources).length&&(e.ssrcs=[],Object.keys(e.sources).forEach(function(t){var n=e.sources[t];Object.keys(n).forEach(function(r){e.ssrcs.push({id:t,attribute:r,value:n[r]})})}),delete e.sources),void 0!==e.ssrcGroups&&Array.isArray(e.ssrcGroups)&&e.ssrcGroups.forEach(function(e){void 0!==e.ssrcs&&Array.isArray(e.ssrcs)&&(e.ssrcs=e.ssrcs.join(" "))})}),void 0!==e&&void 0!==e.groups&&Array.isArray(e.groups)&&e.groups.forEach(function(e){void 0!==e.mids&&Array.isArray(e.mids)&&(e.mids=e.mids.join(" "))}),r.write(e,t)},t.parse=function(e){var t=r.parse(e);return void 0!==t&&void 0!==t.media&&Array.isArray(t.media)&&t.media.forEach(function(e){void 0!==e.ssrcs&&Array.isArray(e.ssrcs)&&(e.sources={},e.ssrcs.forEach(function(t){e.sources[t.id]||(e.sources[t.id]={}),e.sources[t.id][t.attribute]=t.value}),delete e.ssrcs),void 0!==e.ssrcGroups&&Array.isArray(e.ssrcGroups)&&e.ssrcGroups.forEach(function(e){"string"==typeof e.ssrcs&&(e.ssrcs=e.ssrcs.split(" "))})}),void 0!==t&&void 0!==t.groups&&Array.isArray(t.groups)&&t.groups.forEach(function(e){"string"==typeof e.mids&&(e.mids=e.mids.split(" "))}),t}},"./node_modules/sdp-transform/lib/grammar.js":
/*!***************************************************!*\
  !*** ./node_modules/sdp-transform/lib/grammar.js ***!
  \***************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){var n=e.exports={v:[{name:"version",reg:/^(\d*)$/}],o:[{name:"origin",reg:/^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,names:["username","sessionId","sessionVersion","netType","ipVer","address"],format:"%s %s %d %s IP%d %s"}],s:[{name:"name"}],i:[{name:"description"}],u:[{name:"uri"}],e:[{name:"email"}],p:[{name:"phone"}],z:[{name:"timezones"}],r:[{name:"repeats"}],t:[{name:"timing",reg:/^(\d*) (\d*)/,names:["start","stop"],format:"%d %d"}],c:[{name:"connection",reg:/^IN IP(\d) (\S*)/,names:["version","ip"],format:"IN IP%d %s"}],b:[{push:"bandwidth",reg:/^(TIAS|AS|CT|RR|RS):(\d*)/,names:["type","limit"],format:"%s:%s"}],m:[{reg:/^(\w*) (\d*) ([\w\/]*)(?: (.*))?/,names:["type","port","protocol","payloads"],format:"%s %d %s %s"}],a:[{push:"rtp",reg:/^rtpmap:(\d*) ([\w\-\.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,names:["payload","codec","rate","encoding"],format:function(e){return e.encoding?"rtpmap:%d %s/%s/%s":e.rate?"rtpmap:%d %s/%s":"rtpmap:%d %s"}},{push:"fmtp",reg:/^fmtp:(\d*) ([\S| ]*)/,names:["payload","config"],format:"fmtp:%d %s"},{name:"control",reg:/^control:(.*)/,format:"control:%s"},{name:"rtcp",reg:/^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,names:["port","netType","ipVer","address"],format:function(e){return null!=e.address?"rtcp:%d %s IP%d %s":"rtcp:%d"}},{push:"rtcpFbTrrInt",reg:/^rtcp-fb:(\*|\d*) trr-int (\d*)/,names:["payload","value"],format:"rtcp-fb:%d trr-int %d"},{push:"rtcpFb",reg:/^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,names:["payload","type","subtype"],format:function(e){return null!=e.subtype?"rtcp-fb:%s %s %s":"rtcp-fb:%s %s"}},{push:"ext",reg:/^extmap:(\d+)(?:\/(\w+))? (\S*)(?: (\S*))?/,names:["value","direction","uri","config"],format:function(e){return"extmap:%d"+(e.direction?"/%s":"%v")+" %s"+(e.config?" %s":"")}},{push:"crypto",reg:/^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,names:["id","suite","config","sessionConfig"],format:function(e){return null!=e.sessionConfig?"crypto:%d %s %s %s":"crypto:%d %s %s"}},{name:"setup",reg:/^setup:(\w*)/,format:"setup:%s"},{name:"mid",reg:/^mid:([^\s]*)/,format:"mid:%s"},{name:"msid",reg:/^msid:(.*)/,format:"msid:%s"},{name:"ptime",reg:/^ptime:(\d*)/,format:"ptime:%d"},{name:"maxptime",reg:/^maxptime:(\d*)/,format:"maxptime:%d"},{name:"direction",reg:/^(sendrecv|recvonly|sendonly|inactive)/},{name:"icelite",reg:/^(ice-lite)/},{name:"iceUfrag",reg:/^ice-ufrag:(\S*)/,format:"ice-ufrag:%s"},{name:"icePwd",reg:/^ice-pwd:(\S*)/,format:"ice-pwd:%s"},{name:"fingerprint",reg:/^fingerprint:(\S*) (\S*)/,names:["type","hash"],format:"fingerprint:%s %s"},{push:"candidates",reg:/^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,names:["foundation","component","transport","priority","ip","port","type","raddr","rport","tcptype","generation","network-id","network-cost"],format:function(e){var t="candidate:%s %d %s %d %s %d typ %s";return t+=null!=e.raddr?" raddr %s rport %d":"%v%v",t+=null!=e.tcptype?" tcptype %s":"%v",null!=e.generation&&(t+=" generation %d"),t+=null!=e["network-id"]?" network-id %d":"%v",t+=null!=e["network-cost"]?" network-cost %d":"%v"}},{name:"endOfCandidates",reg:/^(end-of-candidates)/},{name:"remoteCandidates",reg:/^remote-candidates:(.*)/,format:"remote-candidates:%s"},{name:"iceOptions",reg:/^ice-options:(\S*)/,format:"ice-options:%s"},{push:"ssrcs",reg:/^ssrc:(\d*) ([\w_]*)(?::(.*))?/,names:["id","attribute","value"],format:function(e){var t="ssrc:%d";return null!=e.attribute&&(t+=" %s",null!=e.value&&(t+=":%s")),t}},{push:"ssrcGroups",reg:/^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,names:["semantics","ssrcs"],format:"ssrc-group:%s %s"},{name:"msidSemantic",reg:/^msid-semantic:\s?(\w*) (\S*)/,names:["semantic","token"],format:"msid-semantic: %s %s"},{push:"groups",reg:/^group:(\w*) (.*)/,names:["type","mids"],format:"group:%s %s"},{name:"rtcpMux",reg:/^(rtcp-mux)/},{name:"rtcpRsize",reg:/^(rtcp-rsize)/},{name:"sctpmap",reg:/^sctpmap:([\w_\/]*) (\S*)(?: (\S*))?/,names:["sctpmapNumber","app","maxMessageSize"],format:function(e){return null!=e.maxMessageSize?"sctpmap:%s %s %s":"sctpmap:%s %s"}},{name:"xGoogleFlag",reg:/^x-google-flag:([^\s]*)/,format:"x-google-flag:%s"},{push:"rids",reg:/^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,names:["id","direction","params"],format:function(e){return e.params?"rid:%s %s %s":"rid:%s %s"}},{push:"imageattrs",reg:new RegExp("^imageattr:(\\d+|\\*)[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"),names:["pt","dir1","attrs1","dir2","attrs2"],format:function(e){return"imageattr:%s %s %s"+(e.dir2?" %s %s":"")}},{name:"simulcast",reg:new RegExp("^simulcast:(send|recv) ([a-zA-Z0-9\\-_~;,]+)(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?$"),names:["dir1","list1","dir2","list2"],format:function(e){return"simulcast:%s %s"+(e.dir2?" %s %s":"")}},{name:"simulcast_03",reg:/^simulcast:[\s\t]+([\S+\s\t]+)$/,names:["value"],format:"simulcast: %s"},{name:"framerate",reg:/^framerate:(\d+(?:$|\.\d+))/,format:"framerate:%s"},{push:"invalid",names:["value"]}]};Object.keys(n).forEach(function(e){n[e].forEach(function(e){e.reg||(e.reg=/(.*)/),e.format||(e.format="%s")})})},"./node_modules/sdp-transform/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/sdp-transform/lib/index.js ***!
  \*************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){var r=n(/*! ./parser */"./node_modules/sdp-transform/lib/parser.js"),o=n(/*! ./writer */"./node_modules/sdp-transform/lib/writer.js");t.write=o,t.parse=r.parse,t.parseFmtpConfig=r.parseFmtpConfig,t.parseParams=r.parseParams,t.parsePayloads=r.parsePayloads,t.parseRemoteCandidates=r.parseRemoteCandidates,t.parseImageAttributes=r.parseImageAttributes,t.parseSimulcastStreamList=r.parseSimulcastStreamList},"./node_modules/sdp-transform/lib/parser.js":
/*!**************************************************!*\
  !*** ./node_modules/sdp-transform/lib/parser.js ***!
  \**************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){var r=function(e){return String(Number(e))===e?Number(e):e},o=function(e,t,n){var o=e.name&&e.names;e.push&&!t[e.push]?t[e.push]=[]:o&&!t[e.name]&&(t[e.name]={});var i=e.push?{}:o?t[e.name]:t;!function(e,t,n,o){if(o&&!n)t[o]=r(e[1]);else for(var i=0;i<n.length;i+=1)null!=e[i+1]&&(t[n[i]]=r(e[i+1]))}(n.match(e.reg),i,e.names,e.name),e.push&&t[e.push].push(i)},i=n(/*! ./grammar */"./node_modules/sdp-transform/lib/grammar.js"),s=RegExp.prototype.test.bind(/^([a-z])=(.*)/);t.parse=function(e){var t={},n=[],r=t;return e.split(/(\r\n|\r|\n)/).filter(s).forEach(function(e){var t=e[0],s=e.slice(2);"m"===t&&(n.push({rtp:[],fmtp:[]}),r=n[n.length-1]);for(var a=0;a<(i[t]||[]).length;a+=1){var u=i[t][a];if(u.reg.test(s))return o(u,r,s)}}),t.media=n,t};var a=function(e,t){var n=t.split(/=(.+)/,2);return 2===n.length&&(e[n[0]]=r(n[1])),e};t.parseParams=function(e){return e.split(/\;\s?/).reduce(a,{})},t.parseFmtpConfig=t.parseParams,t.parsePayloads=function(e){return e.split(" ").map(Number)},t.parseRemoteCandidates=function(e){for(var t=[],n=e.split(" ").map(r),o=0;o<n.length;o+=3)t.push({component:n[o],ip:n[o+1],port:n[o+2]});return t},t.parseImageAttributes=function(e){return e.split(" ").map(function(e){return e.substring(1,e.length-1).split(",").reduce(a,{})})},t.parseSimulcastStreamList=function(e){return e.split(";").map(function(e){return e.split(",").map(function(e){var t,n=!1;return"~"!==e[0]?t=r(e):(t=r(e.substring(1,e.length)),n=!0),{scid:t,paused:n}})})}},"./node_modules/sdp-transform/lib/writer.js":
/*!**************************************************!*\
  !*** ./node_modules/sdp-transform/lib/writer.js ***!
  \**************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){var r=n(/*! ./grammar */"./node_modules/sdp-transform/lib/grammar.js"),o=/%[sdv%]/g,i=function(e,t,n){var r=[e+"="+(t.format instanceof Function?t.format(t.push?n:n[t.name]):t.format)];if(t.names)for(var i=0;i<t.names.length;i+=1){var s=t.names[i];t.name?r.push(n[t.name][s]):r.push(n[t.names[i]])}else r.push(n[t.name]);return function(e){var t=1,n=arguments,r=n.length;return e.replace(o,function(e){if(t>=r)return e;var o=n[t];switch(t+=1,e){case"%%":return"%";case"%s":return String(o);case"%d":return Number(o);case"%v":return""}})}.apply(null,r)},s=["v","o","s","i","u","e","p","c","b","t","r","z","a"],a=["i","c","b","a"];e.exports=function(e,t){t=t||{},null==e.version&&(e.version=0),null==e.name&&(e.name=" "),e.media.forEach(function(e){null==e.payloads&&(e.payloads="")});var n=t.outerOrder||s,o=t.innerOrder||a,u=[];return n.forEach(function(t){r[t].forEach(function(n){n.name in e&&null!=e[n.name]?u.push(i(t,n,e)):n.push in e&&null!=e[n.push]&&e[n.push].forEach(function(e){u.push(i(t,n,e))})})}),e.media.forEach(function(e){u.push(i("m",r.m[0],e)),o.forEach(function(t){r[t].forEach(function(n){n.name in e&&null!=e[n.name]?u.push(i(t,n,e)):n.push in e&&null!=e[n.push]&&e[n.push].forEach(function(e){u.push(i(t,n,e))})})})}),u.join("\r\n")+"\r\n"}},"./node_modules/socket.io-client/lib/index.js":
/*!****************************************************!*\
  !*** ./node_modules/socket.io-client/lib/index.js ***!
  \****************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){var r=n(/*! ./url */"./node_modules/socket.io-client/lib/url.js"),o=n(/*! socket.io-parser */"./node_modules/socket.io-client/node_modules/socket.io-parser/index.js"),i=n(/*! ./manager */"./node_modules/socket.io-client/lib/manager.js"),s=n(/*! debug */"./node_modules/socket.io-client/node_modules/debug/src/browser.js")("socket.io-client");e.exports=t=u;var a=t.managers={};function u(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,o=r(e),u=o.source,c=o.id,l=o.path,d=a[c]&&l in a[c].nsps;return t.forceNew||t["force new connection"]||!1===t.multiplex||d?(s("ignoring socket cache for %s",u),n=i(u,t)):(a[c]||(s("new io instance for %s",u),a[c]=i(u,t)),n=a[c]),o.query&&!t.query&&(t.query=o.query),n.socket(o.path,t)}t.protocol=o.protocol,t.connect=u,t.Manager=n(/*! ./manager */"./node_modules/socket.io-client/lib/manager.js"),t.Socket=n(/*! ./socket */"./node_modules/socket.io-client/lib/socket.js")},"./node_modules/socket.io-client/lib/manager.js":
/*!******************************************************!*\
  !*** ./node_modules/socket.io-client/lib/manager.js ***!
  \******************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){var r=n(/*! engine.io-client */"./node_modules/socket.io-client/node_modules/engine.io-client/index.js"),o=n(/*! ./socket */"./node_modules/socket.io-client/lib/socket.js"),i=n(/*! component-emitter */"./node_modules/socket.io-client/node_modules/component-emitter/index.js"),s=n(/*! socket.io-parser */"./node_modules/socket.io-client/node_modules/socket.io-parser/index.js"),a=n(/*! ./on */"./node_modules/socket.io-client/lib/on.js"),u=n(/*! component-bind */"./node_modules/socket.io-client/node_modules/component-bind/index.js"),c=n(/*! debug */"./node_modules/socket.io-client/node_modules/debug/src/browser.js")("socket.io-client:manager"),l=n(/*! indexof */"./node_modules/socket.io-client/node_modules/indexof/index.js"),d=n(/*! backo2 */"./node_modules/socket.io-client/node_modules/backo2/index.js"),f=Object.prototype.hasOwnProperty;function p(e,t){if(!(this instanceof p))return new p(e,t);e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.nsps={},this.subs=[],this.opts=t,this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(t.randomizationFactor||.5),this.backoff=new d({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this.readyState="closed",this.uri=e,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=t.parser||s;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==t.autoConnect,this.autoConnect&&this.open()}e.exports=p,p.prototype.emitAll=function(){for(var e in this.emit.apply(this,arguments),this.nsps)f.call(this.nsps,e)&&this.nsps[e].emit.apply(this.nsps[e],arguments)},p.prototype.updateSocketIds=function(){for(var e in this.nsps)f.call(this.nsps,e)&&(this.nsps[e].id=this.generateId(e))},p.prototype.generateId=function(e){return("/"===e?"":e+"#")+this.engine.id},i(p.prototype),p.prototype.reconnection=function(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection},p.prototype.reconnectionAttempts=function(e){return arguments.length?(this._reconnectionAttempts=e,this):this._reconnectionAttempts},p.prototype.reconnectionDelay=function(e){return arguments.length?(this._reconnectionDelay=e,this.backoff&&this.backoff.setMin(e),this):this._reconnectionDelay},p.prototype.randomizationFactor=function(e){return arguments.length?(this._randomizationFactor=e,this.backoff&&this.backoff.setJitter(e),this):this._randomizationFactor},p.prototype.reconnectionDelayMax=function(e){return arguments.length?(this._reconnectionDelayMax=e,this.backoff&&this.backoff.setMax(e),this):this._reconnectionDelayMax},p.prototype.timeout=function(e){return arguments.length?(this._timeout=e,this):this._timeout},p.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},p.prototype.open=p.prototype.connect=function(e,t){if(c("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;c("opening %s",this.uri),this.engine=r(this.uri,this.opts);var n=this.engine,o=this;this.readyState="opening",this.skipReconnect=!1;var i=a(n,"open",function(){o.onopen(),e&&e()}),s=a(n,"error",function(t){if(c("connect_error"),o.cleanup(),o.readyState="closed",o.emitAll("connect_error",t),e){var n=new Error("Connection error");n.data=t,e(n)}else o.maybeReconnectOnOpen()});if(!1!==this._timeout){var u=this._timeout;c("connect attempt will timeout after %d",u);var l=setTimeout(function(){c("connect attempt timed out after %d",u),i.destroy(),n.close(),n.emit("error","timeout"),o.emitAll("connect_timeout",u)},u);this.subs.push({destroy:function(){clearTimeout(l)}})}return this.subs.push(i),this.subs.push(s),this},p.prototype.onopen=function(){c("open"),this.cleanup(),this.readyState="open",this.emit("open");var e=this.engine;this.subs.push(a(e,"data",u(this,"ondata"))),this.subs.push(a(e,"ping",u(this,"onping"))),this.subs.push(a(e,"pong",u(this,"onpong"))),this.subs.push(a(e,"error",u(this,"onerror"))),this.subs.push(a(e,"close",u(this,"onclose"))),this.subs.push(a(this.decoder,"decoded",u(this,"ondecoded")))},p.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},p.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},p.prototype.ondata=function(e){this.decoder.add(e)},p.prototype.ondecoded=function(e){this.emit("packet",e)},p.prototype.onerror=function(e){c("error",e),this.emitAll("error",e)},p.prototype.socket=function(e,t){var n=this.nsps[e];if(!n){n=new o(this,e,t),this.nsps[e]=n;var r=this;n.on("connecting",i),n.on("connect",function(){n.id=r.generateId(e)}),this.autoConnect&&i()}function i(){~l(r.connecting,n)||r.connecting.push(n)}return n},p.prototype.destroy=function(e){var t=l(this.connecting,e);~t&&this.connecting.splice(t,1),this.connecting.length||this.close()},p.prototype.packet=function(e){c("writing packet %j",e);var t=this;e.query&&0===e.type&&(e.nsp+="?"+e.query),t.encoding?t.packetBuffer.push(e):(t.encoding=!0,this.encoder.encode(e,function(n){for(var r=0;r<n.length;r++)t.engine.write(n[r],e.options);t.encoding=!1,t.processPacketQueue()}))},p.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var e=this.packetBuffer.shift();this.packet(e)}},p.prototype.cleanup=function(){c("cleanup");for(var e=this.subs.length,t=0;t<e;t++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},p.prototype.close=p.prototype.disconnect=function(){c("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},p.prototype.onclose=function(e){c("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()},p.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var e=this;if(this.backoff.attempts>=this._reconnectionAttempts)c("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var t=this.backoff.duration();c("will wait %dms before reconnect attempt",t),this.reconnecting=!0;var n=setTimeout(function(){e.skipReconnect||(c("attempting reconnect"),e.emitAll("reconnect_attempt",e.backoff.attempts),e.emitAll("reconnecting",e.backoff.attempts),e.skipReconnect||e.open(function(t){t?(c("reconnect attempt error"),e.reconnecting=!1,e.reconnect(),e.emitAll("reconnect_error",t.data)):(c("reconnect success"),e.onreconnect())}))},t);this.subs.push({destroy:function(){clearTimeout(n)}})}},p.prototype.onreconnect=function(){var e=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",e)}},"./node_modules/socket.io-client/lib/on.js":
/*!*************************************************!*\
  !*** ./node_modules/socket.io-client/lib/on.js ***!
  \*************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){e.exports=function(e,t,n){return e.on(t,n),{destroy:function(){e.removeListener(t,n)}}}},"./node_modules/socket.io-client/lib/socket.js":
/*!*****************************************************!*\
  !*** ./node_modules/socket.io-client/lib/socket.js ***!
  \*****************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){var r=n(/*! socket.io-parser */"./node_modules/socket.io-client/node_modules/socket.io-parser/index.js"),o=n(/*! component-emitter */"./node_modules/socket.io-client/node_modules/component-emitter/index.js"),i=n(/*! to-array */"./node_modules/socket.io-client/node_modules/to-array/index.js"),s=n(/*! ./on */"./node_modules/socket.io-client/lib/on.js"),a=n(/*! component-bind */"./node_modules/socket.io-client/node_modules/component-bind/index.js"),u=n(/*! debug */"./node_modules/socket.io-client/node_modules/debug/src/browser.js")("socket.io-client:socket"),c=n(/*! parseqs */"./node_modules/socket.io-client/node_modules/parseqs/index.js");e.exports=f;var l={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},d=o.prototype.emit;function f(e,t,n){this.io=e,this.nsp=t,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}o(f.prototype),f.prototype.subEvents=function(){if(!this.subs){var e=this.io;this.subs=[s(e,"open",a(this,"onopen")),s(e,"packet",a(this,"onpacket")),s(e,"close",a(this,"onclose"))]}},f.prototype.open=f.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},f.prototype.send=function(){var e=i(arguments);return e.unshift("message"),this.emit.apply(this,e),this},f.prototype.emit=function(e){if(l.hasOwnProperty(e))return d.apply(this,arguments),this;var t=i(arguments),n={type:r.EVENT,data:t,options:{}};return n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof t[t.length-1]&&(u("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),delete this.flags,this},f.prototype.packet=function(e){e.nsp=this.nsp,this.io.packet(e)},f.prototype.onopen=function(){if(u("transport is open - connecting"),"/"!==this.nsp)if(this.query){var e="object"==typeof this.query?c.encode(this.query):this.query;u("sending connect packet with query %s",e),this.packet({type:r.CONNECT,query:e})}else this.packet({type:r.CONNECT})},f.prototype.onclose=function(e){u("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",e)},f.prototype.onpacket=function(e){if(e.nsp===this.nsp)switch(e.type){case r.CONNECT:this.onconnect();break;case r.EVENT:case r.BINARY_EVENT:this.onevent(e);break;case r.ACK:case r.BINARY_ACK:this.onack(e);break;case r.DISCONNECT:this.ondisconnect();break;case r.ERROR:this.emit("error",e.data)}},f.prototype.onevent=function(e){var t=e.data||[];u("emitting event %j",t),null!=e.id&&(u("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?d.apply(this,t):this.receiveBuffer.push(t)},f.prototype.ack=function(e){var t=this,n=!1;return function(){if(!n){n=!0;var o=i(arguments);u("sending ack %j",o),t.packet({type:r.ACK,id:e,data:o})}}},f.prototype.onack=function(e){var t=this.acks[e.id];"function"==typeof t?(u("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):u("bad ack %s",e.id)},f.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},f.prototype.emitBuffered=function(){var e;for(e=0;e<this.receiveBuffer.length;e++)d.apply(this,this.receiveBuffer[e]);for(this.receiveBuffer=[],e=0;e<this.sendBuffer.length;e++)this.packet(this.sendBuffer[e]);this.sendBuffer=[]},f.prototype.ondisconnect=function(){u("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},f.prototype.destroy=function(){if(this.subs){for(var e=0;e<this.subs.length;e++)this.subs[e].destroy();this.subs=null}this.io.destroy(this)},f.prototype.close=f.prototype.disconnect=function(){return this.connected&&(u("performing disconnect (%s)",this.nsp),this.packet({type:r.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},f.prototype.compress=function(e){return this.flags=this.flags||{},this.flags.compress=e,this}},"./node_modules/socket.io-client/lib/url.js":
/*!**************************************************!*\
  !*** ./node_modules/socket.io-client/lib/url.js ***!
  \**************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){(function(t){var r=n(/*! parseuri */"./node_modules/socket.io-client/node_modules/parseuri/index.js"),o=n(/*! debug */"./node_modules/socket.io-client/node_modules/debug/src/browser.js")("socket.io-client:url");e.exports=function(e,n){var i=e;n=n||t.location,null==e&&(e=n.protocol+"//"+n.host);"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(o("protocol-less url %s",e),e=void 0!==n?n.protocol+"//"+e:"https://"+e),o("parse %s",e),i=r(e));i.port||(/^(http|ws)$/.test(i.protocol)?i.port="80":/^(http|ws)s$/.test(i.protocol)&&(i.port="443"));i.path=i.path||"/";var s=-1!==i.host.indexOf(":")?"["+i.host+"]":i.host;return i.id=i.protocol+"://"+s+":"+i.port,i.href=i.protocol+"://"+s+(n&&n.port===i.port?"":":"+i.port),i}}).call(this,n(/*! ./../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/socket.io-client/node_modules/after/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/after/index.js ***!
  \*******************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){function n(){}e.exports=function(e,t,r){var o=!1;return r=r||n,i.count=e,0===e?t():i;function i(e,n){if(i.count<=0)throw new Error("after called too many times");--i.count,e?(o=!0,t(e),t=r):0!==i.count||o||t(null,n)}}},"./node_modules/socket.io-client/node_modules/arraybuffer.slice/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/arraybuffer.slice/index.js ***!
  \*******************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){e.exports=function(e,t,n){var r=e.byteLength;if(t=t||0,n=n||r,e.slice)return e.slice(t,n);if(t<0&&(t+=r),n<0&&(n+=r),n>r&&(n=r),t>=r||t>=n||0===r)return new ArrayBuffer(0);for(var o=new Uint8Array(e),i=new Uint8Array(n-t),s=t,a=0;s<n;s++,a++)i[a]=o[s];return i.buffer}},"./node_modules/socket.io-client/node_modules/backo2/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/backo2/index.js ***!
  \********************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){function n(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=n,n.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(e){this.ms=e},n.prototype.setMax=function(e){this.max=e},n.prototype.setJitter=function(e){this.jitter=e}},"./node_modules/socket.io-client/node_modules/base64-arraybuffer/lib/base64-arraybuffer.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/base64-arraybuffer/lib/base64-arraybuffer.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){!function(){"use strict";for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),r=0;r<e.length;r++)n[e.charCodeAt(r)]=r;t.encode=function(t){var n,r=new Uint8Array(t),o=r.length,i="";for(n=0;n<o;n+=3)i+=e[r[n]>>2],i+=e[(3&r[n])<<4|r[n+1]>>4],i+=e[(15&r[n+1])<<2|r[n+2]>>6],i+=e[63&r[n+2]];return o%3==2?i=i.substring(0,i.length-1)+"=":o%3==1&&(i=i.substring(0,i.length-2)+"=="),i},t.decode=function(e){var t,r,o,i,s,a=.75*e.length,u=e.length,c=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var l=new ArrayBuffer(a),d=new Uint8Array(l);for(t=0;t<u;t+=4)r=n[e.charCodeAt(t)],o=n[e.charCodeAt(t+1)],i=n[e.charCodeAt(t+2)],s=n[e.charCodeAt(t+3)],d[c++]=r<<2|o>>4,d[c++]=(15&o)<<4|i>>2,d[c++]=(3&i)<<6|63&s;return l}}()},"./node_modules/socket.io-client/node_modules/blob/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/blob/index.js ***!
  \******************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){(function(t){var n=t.BlobBuilder||t.WebKitBlobBuilder||t.MSBlobBuilder||t.MozBlobBuilder,r=function(){try{return 2===new Blob(["hi"]).size}catch(e){return!1}}(),o=r&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(e){return!1}}(),i=n&&n.prototype.append&&n.prototype.getBlob;function s(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.buffer instanceof ArrayBuffer){var r=n.buffer;if(n.byteLength!==r.byteLength){var o=new Uint8Array(n.byteLength);o.set(new Uint8Array(r,n.byteOffset,n.byteLength)),r=o.buffer}e[t]=r}}}function a(e,t){t=t||{};var r=new n;s(e);for(var o=0;o<e.length;o++)r.append(e[o]);return t.type?r.getBlob(t.type):r.getBlob()}function u(e,t){return s(e),new Blob(e,t||{})}e.exports=r?o?t.Blob:u:i?a:void 0}).call(this,n(/*! ./../../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/socket.io-client/node_modules/component-bind/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/component-bind/index.js ***!
  \****************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){var n=[].slice;e.exports=function(e,t){if("string"==typeof t&&(t=e[t]),"function"!=typeof t)throw new Error("bind() requires a function");var r=n.call(arguments,2);return function(){return t.apply(e,r.concat(n.call(arguments)))}}},"./node_modules/socket.io-client/node_modules/component-emitter/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/component-emitter/index.js ***!
  \*******************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}e.exports=r,r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o=0;o<r.length;o++)if((n=r[o])===t||n.fn===t){r.splice(o,1);break}return this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),n=this._callbacks["$"+e];if(n)for(var r=0,o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t);return this},r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}},"./node_modules/socket.io-client/node_modules/component-inherit/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/component-inherit/index.js ***!
  \*******************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){e.exports=function(e,t){var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},"./node_modules/socket.io-client/node_modules/debug/src/browser.js":
/*!*************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/debug/src/browser.js ***!
  \*************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){(function(r){function o(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(t=e.exports=n(/*! ./debug */"./node_modules/socket.io-client/node_modules/debug/src/debug.js")).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var o=0,i=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&"%c"===e&&(i=++o)}),e.splice(i,0,r)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=o,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(o())}).call(this,n(/*! ./../../../../process/browser.js */"./node_modules/process/browser.js"))},"./node_modules/socket.io-client/node_modules/debug/src/debug.js":
/*!***********************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/debug/src/debug.js ***!
  \***********************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){var r;function o(e){function n(){if(n.enabled){var e=n,o=+new Date,i=o-(r||o);e.diff=i,e.prev=r,e.curr=o,r=o;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=t.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var u=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;u++;var o=t.formatters[r];if("function"==typeof o){var i=s[u];n=o.call(e,i),s.splice(u,1),u--}return n}),t.formatArgs.call(e,s),(n.log||t.log||console.log.bind(console)).apply(e,s)}}return n.namespace=e,n.enabled=t.enabled(e),n.useColors=t.useColors(),n.color=function(e){var n,r=0;for(n in e)r=(r<<5)-r+e.charCodeAt(n),r|=0;return t.colors[Math.abs(r)%t.colors.length]}(e),"function"==typeof t.init&&t.init(n),n}(t=e.exports=o.debug=o.default=o).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){t.save(e),t.names=[],t.skips=[];for(var n=("string"==typeof e?e:"").split(/[\s,]+/),r=n.length,o=0;o<r;o++)n[o]&&("-"===(e=n[o].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(/*! ms */"./node_modules/socket.io-client/node_modules/ms/index.js"),t.names=[],t.skips=[],t.formatters={}},"./node_modules/socket.io-client/node_modules/engine.io-client/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/engine.io-client/index.js ***!
  \******************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){e.exports=n(/*! ./lib/index */"./node_modules/socket.io-client/node_modules/engine.io-client/lib/index.js")},"./node_modules/socket.io-client/node_modules/engine.io-client/lib/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/engine.io-client/lib/index.js ***!
  \**********************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){e.exports=n(/*! ./socket */"./node_modules/socket.io-client/node_modules/engine.io-client/lib/socket.js"),e.exports.parser=n(/*! engine.io-parser */"./node_modules/socket.io-client/node_modules/engine.io-parser/lib/browser.js")},"./node_modules/socket.io-client/node_modules/engine.io-client/lib/socket.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/engine.io-client/lib/socket.js ***!
  \***********************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){(function(t){var r=n(/*! ./transports/index */"./node_modules/socket.io-client/node_modules/engine.io-client/lib/transports/index.js"),o=n(/*! component-emitter */"./node_modules/socket.io-client/node_modules/component-emitter/index.js"),i=n(/*! debug */"./node_modules/socket.io-client/node_modules/debug/src/browser.js")("engine.io-client:socket"),s=n(/*! indexof */"./node_modules/socket.io-client/node_modules/indexof/index.js"),a=n(/*! engine.io-parser */"./node_modules/socket.io-client/node_modules/engine.io-parser/lib/browser.js"),u=n(/*! parseuri */"./node_modules/socket.io-client/node_modules/parseuri/index.js"),c=n(/*! parsejson */"./node_modules/socket.io-client/node_modules/parsejson/index.js"),l=n(/*! parseqs */"./node_modules/socket.io-client/node_modules/parseqs/index.js");function d(e,n){if(!(this instanceof d))return new d(e,n);n=n||{},e&&"object"==typeof e&&(n=e,e=null),e?(e=u(e),n.hostname=e.host,n.secure="https"===e.protocol||"wss"===e.protocol,n.port=e.port,e.query&&(n.query=e.query)):n.host&&(n.hostname=u(n.host).host),this.secure=null!=n.secure?n.secure:t.location&&"https:"===location.protocol,n.hostname&&!n.port&&(n.port=this.secure?"443":"80"),this.agent=n.agent||!1,this.hostname=n.hostname||(t.location?location.hostname:"localhost"),this.port=n.port||(t.location&&location.port?location.port:this.secure?443:80),this.query=n.query||{},"string"==typeof this.query&&(this.query=l.decode(this.query)),this.upgrade=!1!==n.upgrade,this.path=(n.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!n.forceJSONP,this.jsonp=!1!==n.jsonp,this.forceBase64=!!n.forceBase64,this.enablesXDR=!!n.enablesXDR,this.timestampParam=n.timestampParam||"t",this.timestampRequests=n.timestampRequests,this.transports=n.transports||["polling","websocket"],this.transportOptions=n.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=n.policyPort||843,this.rememberUpgrade=n.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=n.onlyBinaryUpgrades,this.perMessageDeflate=!1!==n.perMessageDeflate&&(n.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=n.pfx||null,this.key=n.key||null,this.passphrase=n.passphrase||null,this.cert=n.cert||null,this.ca=n.ca||null,this.ciphers=n.ciphers||null,this.rejectUnauthorized=void 0===n.rejectUnauthorized||n.rejectUnauthorized,this.forceNode=!!n.forceNode;var r="object"==typeof t&&t;r.global===r&&(n.extraHeaders&&Object.keys(n.extraHeaders).length>0&&(this.extraHeaders=n.extraHeaders),n.localAddress&&(this.localAddress=n.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}e.exports=d,d.priorWebsocketSuccess=!1,o(d.prototype),d.protocol=a.protocol,d.Socket=d,d.Transport=n(/*! ./transport */"./node_modules/socket.io-client/node_modules/engine.io-client/lib/transport.js"),d.transports=n(/*! ./transports/index */"./node_modules/socket.io-client/node_modules/engine.io-client/lib/transports/index.js"),d.parser=n(/*! engine.io-parser */"./node_modules/socket.io-client/node_modules/engine.io-parser/lib/browser.js"),d.prototype.createTransport=function(e){i('creating transport "%s"',e);var t=function(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(this.query);t.EIO=a.protocol,t.transport=e;var n=this.transportOptions[e]||{};return this.id&&(t.sid=this.id),new r[e]({query:t,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0})},d.prototype.open=function(){var e;if(this.rememberUpgrade&&d.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length){var t=this;return void setTimeout(function(){t.emit("error","No transports available")},0)}e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)},d.prototype.setTransport=function(e){i("setting transport %s",e.name);var t=this;this.transport&&(i("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",function(){t.onDrain()}).on("packet",function(e){t.onPacket(e)}).on("error",function(e){t.onError(e)}).on("close",function(){t.onClose("transport close")})},d.prototype.probe=function(e){i('probing transport "%s"',e);var t=this.createTransport(e,{probe:1}),n=!1,r=this;function o(){if(r.onlyBinaryUpgrades){var o=!this.supportsBinary&&r.transport.supportsBinary;n=n||o}n||(i('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",function(o){if(!n)if("pong"===o.type&&"probe"===o.data){if(i('probe transport "%s" pong',e),r.upgrading=!0,r.emit("upgrading",t),!t)return;d.priorWebsocketSuccess="websocket"===t.name,i('pausing current transport "%s"',r.transport.name),r.transport.pause(function(){n||"closed"!==r.readyState&&(i("changing transport and sending upgrade packet"),f(),r.setTransport(t),t.send([{type:"upgrade"}]),r.emit("upgrade",t),t=null,r.upgrading=!1,r.flush())})}else{i('probe transport "%s" failed',e);var s=new Error("probe error");s.transport=t.name,r.emit("upgradeError",s)}}))}function s(){n||(n=!0,f(),t.close(),t=null)}function a(n){var o=new Error("probe error: "+n);o.transport=t.name,s(),i('probe transport "%s" failed because of error: %s',e,n),r.emit("upgradeError",o)}function u(){a("transport closed")}function c(){a("socket closed")}function l(e){t&&e.name!==t.name&&(i('"%s" works - aborting "%s"',e.name,t.name),s())}function f(){t.removeListener("open",o),t.removeListener("error",a),t.removeListener("close",u),r.removeListener("close",c),r.removeListener("upgrading",l)}d.priorWebsocketSuccess=!1,t.once("open",o),t.once("error",a),t.once("close",u),this.once("close",c),this.once("upgrading",l),t.open()},d.prototype.onOpen=function(){if(i("socket open"),this.readyState="open",d.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){i("starting upgrade probes");for(var e=0,t=this.upgrades.length;e<t;e++)this.probe(this.upgrades[e])}},d.prototype.onPacket=function(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(i('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(c(e.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else i('packet received with socket readyState "%s"',this.readyState)},d.prototype.onHandshake=function(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},d.prototype.onHeartbeat=function(e){clearTimeout(this.pingTimeoutTimer);var t=this;t.pingTimeoutTimer=setTimeout(function(){"closed"!==t.readyState&&t.onClose("ping timeout")},e||t.pingInterval+t.pingTimeout)},d.prototype.setPing=function(){var e=this;clearTimeout(e.pingIntervalTimer),e.pingIntervalTimer=setTimeout(function(){i("writing ping packet - expecting pong within %sms",e.pingTimeout),e.ping(),e.onHeartbeat(e.pingTimeout)},e.pingInterval)},d.prototype.ping=function(){var e=this;this.sendPacket("ping",function(){e.emit("ping")})},d.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},d.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(i("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},d.prototype.write=d.prototype.send=function(e,t,n){return this.sendPacket("message",e,t,n),this},d.prototype.sendPacket=function(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var o={type:e,data:t,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}},d.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var e=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?r():t()}):this.upgrading?r():t()}function t(){e.onClose("forced close"),i("socket closing - telling transport to close"),e.transport.close()}function n(){e.removeListener("upgrade",n),e.removeListener("upgradeError",n),t()}function r(){e.once("upgrade",n),e.once("upgradeError",n)}return this},d.prototype.onError=function(e){i("socket error %j",e),d.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)},d.prototype.onClose=function(e,t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){i('socket close with reason: "%s"',e);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",e,t),this.writeBuffer=[],this.prevBufferLen=0}},d.prototype.filterUpgrades=function(e){for(var t=[],n=0,r=e.length;n<r;n++)~s(this.transports,e[n])&&t.push(e[n]);return t}}).call(this,n(/*! ./../../../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/socket.io-client/node_modules/engine.io-client/lib/transport.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/engine.io-client/lib/transport.js ***!
  \**************************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){var r=n(/*! engine.io-parser */"./node_modules/socket.io-client/node_modules/engine.io-parser/lib/browser.js"),o=n(/*! component-emitter */"./node_modules/socket.io-client/node_modules/component-emitter/index.js");function i(e){this.path=e.path,this.hostname=e.hostname,this.port=e.port,this.secure=e.secure,this.query=e.query,this.timestampParam=e.timestampParam,this.timestampRequests=e.timestampRequests,this.readyState="",this.agent=e.agent||!1,this.socket=e.socket,this.enablesXDR=e.enablesXDR,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.forceNode=e.forceNode,this.extraHeaders=e.extraHeaders,this.localAddress=e.localAddress}e.exports=i,o(i.prototype),i.prototype.onError=function(e,t){var n=new Error(e);return n.type="TransportError",n.description=t,this.emit("error",n),this},i.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},i.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},i.prototype.send=function(e){if("open"!==this.readyState)throw new Error("Transport not open");this.write(e)},i.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},i.prototype.onData=function(e){var t=r.decodePacket(e,this.socket.binaryType);this.onPacket(t)},i.prototype.onPacket=function(e){this.emit("packet",e)},i.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},"./node_modules/socket.io-client/node_modules/engine.io-client/lib/transports/index.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/engine.io-client/lib/transports/index.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){(function(e){var r=n(/*! xmlhttprequest-ssl */"./node_modules/socket.io-client/node_modules/engine.io-client/lib/xmlhttprequest.js"),o=n(/*! ./polling-xhr */"./node_modules/socket.io-client/node_modules/engine.io-client/lib/transports/polling-xhr.js"),i=n(/*! ./polling-jsonp */"./node_modules/socket.io-client/node_modules/engine.io-client/lib/transports/polling-jsonp.js"),s=n(/*! ./websocket */"./node_modules/socket.io-client/node_modules/engine.io-client/lib/transports/websocket.js");t.polling=function(t){var n=!1,s=!1,a=!1!==t.jsonp;if(e.location){var u="https:"===location.protocol,c=location.port;c||(c=u?443:80),n=t.hostname!==location.hostname||c!==t.port,s=t.secure!==u}if(t.xdomain=n,t.xscheme=s,"open"in new r(t)&&!t.forceJSONP)return new o(t);if(!a)throw new Error("JSONP disabled");return new i(t)},t.websocket=s}).call(this,n(/*! ./../../../../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/socket.io-client/node_modules/engine.io-client/lib/transports/polling-jsonp.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/engine.io-client/lib/transports/polling-jsonp.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){(function(t){var r=n(/*! ./polling */"./node_modules/socket.io-client/node_modules/engine.io-client/lib/transports/polling.js"),o=n(/*! component-inherit */"./node_modules/socket.io-client/node_modules/component-inherit/index.js");e.exports=c;var i,s=/\n/g,a=/\\n/g;function u(){}function c(e){r.call(this,e),this.query=this.query||{},i||(t.___eio||(t.___eio=[]),i=t.___eio),this.index=i.length;var n=this;i.push(function(e){n.onData(e)}),this.query.j=this.index,t.document&&t.addEventListener&&t.addEventListener("beforeunload",function(){n.script&&(n.script.onerror=u)},!1)}o(c,r),c.prototype.supportsBinary=!1,c.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),r.prototype.doClose.call(this)},c.prototype.doPoll=function(){var e=this,t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=function(t){e.onError("jsonp poll error",t)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(t,n):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout(function(){var e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)},100)},c.prototype.doWrite=function(e,t){var n=this;if(!this.form){var r,o=document.createElement("form"),i=document.createElement("textarea"),u=this.iframeId="eio_iframe_"+this.index;o.className="socketio",o.style.position="absolute",o.style.top="-1000px",o.style.left="-1000px",o.target=u,o.method="POST",o.setAttribute("accept-charset","utf-8"),i.name="d",o.appendChild(i),document.body.appendChild(o),this.form=o,this.area=i}function c(){l(),t()}function l(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(e){n.onError("jsonp polling iframe removal error",e)}try{var e='<iframe src="javascript:0" name="'+n.iframeId+'">';r=document.createElement(e)}catch(e){(r=document.createElement("iframe")).name=n.iframeId,r.src="javascript:0"}r.id=n.iframeId,n.form.appendChild(r),n.iframe=r}this.form.action=this.uri(),l(),e=e.replace(a,"\\\n"),this.area.value=e.replace(s,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&c()}:this.iframe.onload=c}}).call(this,n(/*! ./../../../../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/socket.io-client/node_modules/engine.io-client/lib/transports/polling-xhr.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/engine.io-client/lib/transports/polling-xhr.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){(function(t){var r=n(/*! xmlhttprequest-ssl */"./node_modules/socket.io-client/node_modules/engine.io-client/lib/xmlhttprequest.js"),o=n(/*! ./polling */"./node_modules/socket.io-client/node_modules/engine.io-client/lib/transports/polling.js"),i=n(/*! component-emitter */"./node_modules/socket.io-client/node_modules/component-emitter/index.js"),s=n(/*! component-inherit */"./node_modules/socket.io-client/node_modules/component-inherit/index.js"),a=n(/*! debug */"./node_modules/socket.io-client/node_modules/debug/src/browser.js")("engine.io-client:polling-xhr");function u(){}function c(e){if(o.call(this,e),this.requestTimeout=e.requestTimeout,this.extraHeaders=e.extraHeaders,t.location){var n="https:"===location.protocol,r=location.port;r||(r=n?443:80),this.xd=e.hostname!==t.location.hostname||r!==e.port,this.xs=e.secure!==n}}function l(e){this.method=e.method||"GET",this.uri=e.uri,this.xd=!!e.xd,this.xs=!!e.xs,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.agent=e.agent,this.isBinary=e.isBinary,this.supportsBinary=e.supportsBinary,this.enablesXDR=e.enablesXDR,this.requestTimeout=e.requestTimeout,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.extraHeaders=e.extraHeaders,this.create()}function d(){for(var e in l.requests)l.requests.hasOwnProperty(e)&&l.requests[e].abort()}e.exports=c,e.exports.Request=l,s(c,o),c.prototype.supportsBinary=!0,c.prototype.request=function(e){return(e=e||{}).uri=this.uri(),e.xd=this.xd,e.xs=this.xs,e.agent=this.agent||!1,e.supportsBinary=this.supportsBinary,e.enablesXDR=this.enablesXDR,e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized,e.requestTimeout=this.requestTimeout,e.extraHeaders=this.extraHeaders,new l(e)},c.prototype.doWrite=function(e,t){var n="string"!=typeof e&&void 0!==e,r=this.request({method:"POST",data:e,isBinary:n}),o=this;r.on("success",t),r.on("error",function(e){o.onError("xhr post error",e)}),this.sendXhr=r},c.prototype.doPoll=function(){a("xhr poll");var e=this.request(),t=this;e.on("data",function(e){t.onData(e)}),e.on("error",function(e){t.onError("xhr poll error",e)}),this.pollXhr=e},i(l.prototype),l.prototype.create=function(){var e={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized;var n=this.xhr=new r(e),o=this;try{a("xhr open %s: %s",this.method,this.uri),n.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var i in n.setDisableHeaderCheck&&n.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(i)&&n.setRequestHeader(i,this.extraHeaders[i])}catch(e){}if("POST"===this.method)try{this.isBinary?n.setRequestHeader("Content-type","application/octet-stream"):n.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{n.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in n&&(n.withCredentials=!0),this.requestTimeout&&(n.timeout=this.requestTimeout),this.hasXDR()?(n.onload=function(){o.onLoad()},n.onerror=function(){o.onError(n.responseText)}):n.onreadystatechange=function(){if(2===n.readyState){var e;try{e=n.getResponseHeader("Content-Type")}catch(e){}"application/octet-stream"===e&&(n.responseType="arraybuffer")}4===n.readyState&&(200===n.status||1223===n.status?o.onLoad():setTimeout(function(){o.onError(n.status)},0))},a("xhr data %s",this.data),n.send(this.data)}catch(e){return void setTimeout(function(){o.onError(e)},0)}t.document&&(this.index=l.requestsCount++,l.requests[this.index]=this)},l.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},l.prototype.onData=function(e){this.emit("data",e),this.onSuccess()},l.prototype.onError=function(e){this.emit("error",e),this.cleanup(!0)},l.prototype.cleanup=function(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=u:this.xhr.onreadystatechange=u,e)try{this.xhr.abort()}catch(e){}t.document&&delete l.requests[this.index],this.xhr=null}},l.prototype.onLoad=function(){var e;try{var t;try{t=this.xhr.getResponseHeader("Content-Type")}catch(e){}e="application/octet-stream"===t&&this.xhr.response||this.xhr.responseText}catch(e){this.onError(e)}null!=e&&this.onData(e)},l.prototype.hasXDR=function(){return void 0!==t.XDomainRequest&&!this.xs&&this.enablesXDR},l.prototype.abort=function(){this.cleanup()},l.requestsCount=0,l.requests={},t.document&&(t.attachEvent?t.attachEvent("onunload",d):t.addEventListener&&t.addEventListener("beforeunload",d,!1))}).call(this,n(/*! ./../../../../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/socket.io-client/node_modules/engine.io-client/lib/transports/polling.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/engine.io-client/lib/transports/polling.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){var r=n(/*! ../transport */"./node_modules/socket.io-client/node_modules/engine.io-client/lib/transport.js"),o=n(/*! parseqs */"./node_modules/socket.io-client/node_modules/parseqs/index.js"),i=n(/*! engine.io-parser */"./node_modules/socket.io-client/node_modules/engine.io-parser/lib/browser.js"),s=n(/*! component-inherit */"./node_modules/socket.io-client/node_modules/component-inherit/index.js"),a=n(/*! yeast */"./node_modules/socket.io-client/node_modules/yeast/index.js"),u=n(/*! debug */"./node_modules/socket.io-client/node_modules/debug/src/browser.js")("engine.io-client:polling");e.exports=l;var c=null!=new(n(/*! xmlhttprequest-ssl */"./node_modules/socket.io-client/node_modules/engine.io-client/lib/xmlhttprequest.js"))({xdomain:!1}).responseType;function l(e){var t=e&&e.forceBase64;c&&!t||(this.supportsBinary=!1),r.call(this,e)}s(l,r),l.prototype.name="polling",l.prototype.doOpen=function(){this.poll()},l.prototype.pause=function(e){var t=this;function n(){u("paused"),t.readyState="paused",e()}if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(u("we are currently polling - waiting to pause"),r++,this.once("pollComplete",function(){u("pre-pause polling complete"),--r||n()})),this.writable||(u("we are currently writing - waiting to pause"),r++,this.once("drain",function(){u("pre-pause writing complete"),--r||n()}))}else n()},l.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},l.prototype.onData=function(e){var t=this;u("polling got data %s",e);i.decodePayload(e,this.socket.binaryType,function(e,n,r){if("opening"===t.readyState&&t.onOpen(),"close"===e.type)return t.onClose(),!1;t.onPacket(e)}),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u('ignoring poll - transport state "%s"',this.readyState))},l.prototype.doClose=function(){var e=this;function t(){u("writing close packet"),e.write([{type:"close"}])}"open"===this.readyState?(u("transport open - closing"),t()):(u("transport not open - deferring close"),this.once("open",t))},l.prototype.write=function(e){var t=this;this.writable=!1;var n=function(){t.writable=!0,t.emit("drain")};i.encodePayload(e,this.supportsBinary,function(e){t.doWrite(e,n)})},l.prototype.uri=function(){var e=this.query||{},t=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(e[this.timestampParam]=a()),this.supportsBinary||e.sid||(e.b64=1),e=o.encode(e),this.port&&("https"===t&&443!==Number(this.port)||"http"===t&&80!==Number(this.port))&&(n=":"+this.port),e.length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e}},"./node_modules/socket.io-client/node_modules/engine.io-client/lib/transports/websocket.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/engine.io-client/lib/transports/websocket.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){(function(t){var r,o=n(/*! ../transport */"./node_modules/socket.io-client/node_modules/engine.io-client/lib/transport.js"),i=n(/*! engine.io-parser */"./node_modules/socket.io-client/node_modules/engine.io-parser/lib/browser.js"),s=n(/*! parseqs */"./node_modules/socket.io-client/node_modules/parseqs/index.js"),a=n(/*! component-inherit */"./node_modules/socket.io-client/node_modules/component-inherit/index.js"),u=n(/*! yeast */"./node_modules/socket.io-client/node_modules/yeast/index.js"),c=n(/*! debug */"./node_modules/socket.io-client/node_modules/debug/src/browser.js")("engine.io-client:websocket"),l=t.WebSocket||t.MozWebSocket;if("undefined"==typeof window)try{r=n(/*! ws */0)}catch(e){}var d=l;function f(e){e&&e.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=e.perMessageDeflate,this.usingBrowserWebSocket=l&&!e.forceNode,this.protocols=e.protocols,this.usingBrowserWebSocket||(d=r),o.call(this,e)}d||"undefined"!=typeof window||(d=r),e.exports=f,a(f,o),f.prototype.name="websocket",f.prototype.supportsBinary=!0,f.prototype.doOpen=function(){if(this.check()){var e=this.uri(),t=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket?t?new d(e,t):new d(e):new d(e,t,n)}catch(e){return this.emit("error",e)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},f.prototype.addEventListeners=function(){var e=this;this.ws.onopen=function(){e.onOpen()},this.ws.onclose=function(){e.onClose()},this.ws.onmessage=function(t){e.onData(t.data)},this.ws.onerror=function(t){e.onError("websocket error",t)}},f.prototype.write=function(e){var n=this;this.writable=!1;for(var r=e.length,o=0,s=r;o<s;o++)!function(e){i.encodePacket(e,n.supportsBinary,function(o){if(!n.usingBrowserWebSocket){var i={};if(e.options&&(i.compress=e.options.compress),n.perMessageDeflate)("string"==typeof o?t.Buffer.byteLength(o):o.length)<n.perMessageDeflate.threshold&&(i.compress=!1)}try{n.usingBrowserWebSocket?n.ws.send(o):n.ws.send(o,i)}catch(e){c("websocket closed before onclose event")}--r||a()})}(e[o]);function a(){n.emit("flush"),setTimeout(function(){n.writable=!0,n.emit("drain")},0)}},f.prototype.onClose=function(){o.prototype.onClose.call(this)},f.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},f.prototype.uri=function(){var e=this.query||{},t=this.secure?"wss":"ws",n="";return this.port&&("wss"===t&&443!==Number(this.port)||"ws"===t&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(e[this.timestampParam]=u()),this.supportsBinary||(e.b64=1),(e=s.encode(e)).length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e},f.prototype.check=function(){return!(!d||"__initialize"in d&&this.name===f.prototype.name)}}).call(this,n(/*! ./../../../../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/socket.io-client/node_modules/engine.io-client/lib/xmlhttprequest.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/engine.io-client/lib/xmlhttprequest.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){(function(t){var r=n(/*! has-cors */"./node_modules/socket.io-client/node_modules/has-cors/index.js");e.exports=function(e){var n=e.xdomain,o=e.xscheme,i=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!n||r))return new XMLHttpRequest}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!o&&i)return new XDomainRequest}catch(e){}if(!n)try{return new(t[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}}).call(this,n(/*! ./../../../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/socket.io-client/node_modules/engine.io-parser/lib/browser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/engine.io-parser/lib/browser.js ***!
  \************************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){(function(e){var r,o=n(/*! ./keys */"./node_modules/socket.io-client/node_modules/engine.io-parser/lib/keys.js"),i=n(/*! has-binary2 */"./node_modules/socket.io-client/node_modules/has-binary2/index.js"),s=n(/*! arraybuffer.slice */"./node_modules/socket.io-client/node_modules/arraybuffer.slice/index.js"),a=n(/*! after */"./node_modules/socket.io-client/node_modules/after/index.js"),u=n(/*! ./utf8 */"./node_modules/socket.io-client/node_modules/engine.io-parser/lib/utf8.js");e&&e.ArrayBuffer&&(r=n(/*! base64-arraybuffer */"./node_modules/socket.io-client/node_modules/base64-arraybuffer/lib/base64-arraybuffer.js"));var c="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),l="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),d=c||l;t.protocol=3;var f=t.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},p=o(f),h={type:"error",data:"parser error"},m=n(/*! blob */"./node_modules/socket.io-client/node_modules/blob/index.js");function g(e,t,n){for(var r=new Array(e.length),o=a(e.length,n),i=function(e,n,o){t(n,function(t,n){r[e]=n,o(t,r)})},s=0;s<e.length;s++)i(s,e[s],o)}t.encodePacket=function(n,r,o,i){"function"==typeof r&&(i=r,r=!1),"function"==typeof o&&(i=o,o=null);var s=void 0===n.data?void 0:n.data.buffer||n.data;if(e.ArrayBuffer&&s instanceof ArrayBuffer)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var o=e.data,i=new Uint8Array(o),s=new Uint8Array(1+o.byteLength);s[0]=f[e.type];for(var a=0;a<i.length;a++)s[a+1]=i[a];return r(s.buffer)}(n,r,i);if(m&&s instanceof e.Blob)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);if(d)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var o=new FileReader;return o.onload=function(){e.data=o.result,t.encodePacket(e,n,!0,r)},o.readAsArrayBuffer(e.data)}(e,n,r);var o=new Uint8Array(1);o[0]=f[e.type];var i=new m([o.buffer,e.data]);return r(i)}(n,r,i);if(s&&s.base64)return function(e,n){var r="b"+t.packets[e.type]+e.data.data;return n(r)}(n,i);var a=f[n.type];return void 0!==n.data&&(a+=o?u.encode(String(n.data),{strict:!1}):String(n.data)),i(""+a)},t.encodeBase64Packet=function(n,r){var o,i="b"+t.packets[n.type];if(m&&n.data instanceof e.Blob){var s=new FileReader;return s.onload=function(){var e=s.result.split(",")[1];r(i+e)},s.readAsDataURL(n.data)}try{o=String.fromCharCode.apply(null,new Uint8Array(n.data))}catch(e){for(var a=new Uint8Array(n.data),u=new Array(a.length),c=0;c<a.length;c++)u[c]=a[c];o=String.fromCharCode.apply(null,u)}return i+=e.btoa(o),r(i)},t.decodePacket=function(e,n,r){if(void 0===e)return h;if("string"==typeof e){if("b"===e.charAt(0))return t.decodeBase64Packet(e.substr(1),n);if(r&&!1===(e=function(e){try{e=u.decode(e,{strict:!1})}catch(e){return!1}return e}(e)))return h;var o=e.charAt(0);return Number(o)==o&&p[o]?e.length>1?{type:p[o],data:e.substring(1)}:{type:p[o]}:h}o=new Uint8Array(e)[0];var i=s(e,1);return m&&"blob"===n&&(i=new m([i])),{type:p[o],data:i}},t.decodeBase64Packet=function(e,t){var n=p[e.charAt(0)];if(!r)return{type:n,data:{base64:!0,data:e.substr(1)}};var o=r.decode(e.substr(1));return"blob"===t&&m&&(o=new m([o])),{type:n,data:o}},t.encodePayload=function(e,n,r){"function"==typeof n&&(r=n,n=null);var o=i(e);if(n&&o)return m&&!d?t.encodePayloadAsBlob(e,r):t.encodePayloadAsArrayBuffer(e,r);if(!e.length)return r("0:");g(e,function(e,r){t.encodePacket(e,!!o&&n,!1,function(e){r(null,function(e){return e.length+":"+e}(e))})},function(e,t){return r(t.join(""))})},t.decodePayload=function(e,n,r){if("string"!=typeof e)return t.decodePayloadAsBinary(e,n,r);var o;if("function"==typeof n&&(r=n,n=null),""===e)return r(h,0,1);for(var i,s,a="",u=0,c=e.length;u<c;u++){var l=e.charAt(u);if(":"===l){if(""===a||a!=(i=Number(a)))return r(h,0,1);if(a!=(s=e.substr(u+1,i)).length)return r(h,0,1);if(s.length){if(o=t.decodePacket(s,n,!1),h.type===o.type&&h.data===o.data)return r(h,0,1);if(!1===r(o,u+i,c))return}u+=i,a=""}else a+=l}return""!==a?r(h,0,1):void 0},t.encodePayloadAsArrayBuffer=function(e,n){if(!e.length)return n(new ArrayBuffer(0));g(e,function(e,n){t.encodePacket(e,!0,!0,function(e){return n(null,e)})},function(e,t){var r=t.reduce(function(e,t){var n;return e+(n="string"==typeof t?t.length:t.byteLength).toString().length+n+2},0),o=new Uint8Array(r),i=0;return t.forEach(function(e){var t="string"==typeof e,n=e;if(t){for(var r=new Uint8Array(e.length),s=0;s<e.length;s++)r[s]=e.charCodeAt(s);n=r.buffer}o[i++]=t?0:1;var a=n.byteLength.toString();for(s=0;s<a.length;s++)o[i++]=parseInt(a[s]);o[i++]=255;for(r=new Uint8Array(n),s=0;s<r.length;s++)o[i++]=r[s]}),n(o.buffer)})},t.encodePayloadAsBlob=function(e,n){g(e,function(e,n){t.encodePacket(e,!0,!0,function(e){var t=new Uint8Array(1);if(t[0]=1,"string"==typeof e){for(var r=new Uint8Array(e.length),o=0;o<e.length;o++)r[o]=e.charCodeAt(o);e=r.buffer,t[0]=0}var i=(e instanceof ArrayBuffer?e.byteLength:e.size).toString(),s=new Uint8Array(i.length+1);for(o=0;o<i.length;o++)s[o]=parseInt(i[o]);if(s[i.length]=255,m){var a=new m([t.buffer,s.buffer,e]);n(null,a)}})},function(e,t){return n(new m(t))})},t.decodePayloadAsBinary=function(e,n,r){"function"==typeof n&&(r=n,n=null);for(var o=e,i=[];o.byteLength>0;){for(var a=new Uint8Array(o),u=0===a[0],c="",l=1;255!==a[l];l++){if(c.length>310)return r(h,0,1);c+=a[l]}o=s(o,2+c.length),c=parseInt(c);var d=s(o,0,c);if(u)try{d=String.fromCharCode.apply(null,new Uint8Array(d))}catch(e){var f=new Uint8Array(d);d="";for(l=0;l<f.length;l++)d+=String.fromCharCode(f[l])}i.push(d),o=s(o,c)}var p=i.length;i.forEach(function(e,o){r(t.decodePacket(e,n,!0),o,p)})}}).call(this,n(/*! ./../../../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/socket.io-client/node_modules/engine.io-parser/lib/keys.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/engine.io-parser/lib/keys.js ***!
  \*********************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){e.exports=Object.keys||function(e){var t=[],n=Object.prototype.hasOwnProperty;for(var r in e)n.call(e,r)&&t.push(r);return t}},"./node_modules/socket.io-client/node_modules/engine.io-parser/lib/utf8.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/engine.io-parser/lib/utf8.js ***!
  \*********************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){(function(e,r){var o;/*! https://mths.be/utf8js v2.1.2 by @mathias */!function(i){var s="object"==typeof t&&t,a=("object"==typeof e&&e&&e.exports,"object"==typeof r&&r);a.global!==a&&a.window;var u,c,l,d=String.fromCharCode;function f(e){for(var t,n,r=[],o=0,i=e.length;o<i;)(t=e.charCodeAt(o++))>=55296&&t<=56319&&o<i?56320==(64512&(n=e.charCodeAt(o++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),o--):r.push(t);return r}function p(e,t){if(e>=55296&&e<=57343){if(t)throw Error("Lone surrogate U+"+e.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function h(e,t){return d(e>>t&63|128)}function m(e,t){if(0==(4294967168&e))return d(e);var n="";return 0==(4294965248&e)?n=d(e>>6&31|192):0==(4294901760&e)?(p(e,t)||(e=65533),n=d(e>>12&15|224),n+=h(e,6)):0==(4292870144&e)&&(n=d(e>>18&7|240),n+=h(e,12),n+=h(e,6)),n+=d(63&e|128)}function g(){if(l>=c)throw Error("Invalid byte index");var e=255&u[l];if(l++,128==(192&e))return 63&e;throw Error("Invalid continuation byte")}function y(e){var t,n;if(l>c)throw Error("Invalid byte index");if(l==c)return!1;if(t=255&u[l],l++,0==(128&t))return t;if(192==(224&t)){if((n=(31&t)<<6|g())>=128)return n;throw Error("Invalid continuation byte")}if(224==(240&t)){if((n=(15&t)<<12|g()<<6|g())>=2048)return p(n,e)?n:65533;throw Error("Invalid continuation byte")}if(240==(248&t)&&(n=(7&t)<<18|g()<<12|g()<<6|g())>=65536&&n<=1114111)return n;throw Error("Invalid UTF-8 detected")}var v={version:"2.1.2",encode:function(e,t){for(var n=!1!==(t=t||{}).strict,r=f(e),o=r.length,i=-1,s="";++i<o;)s+=m(r[i],n);return s},decode:function(e,t){var n=!1!==(t=t||{}).strict;u=f(e),c=u.length,l=0;for(var r,o=[];!1!==(r=y(n));)o.push(r);return function(e){for(var t,n=e.length,r=-1,o="";++r<n;)(t=e[r])>65535&&(o+=d((t-=65536)>>>10&1023|55296),t=56320|1023&t),o+=d(t);return o}(o)}};void 0===(o=function(){return v}.call(t,n,t,e))||(e.exports=o)}()}).call(this,n(/*! ./../../../../webpack/buildin/module.js */"./node_modules/webpack/buildin/module.js")(e),n(/*! ./../../../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/socket.io-client/node_modules/has-binary2/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/has-binary2/index.js ***!
  \*************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){(function(t){var r=n(/*! isarray */"./node_modules/socket.io-client/node_modules/isarray/index.js"),o=Object.prototype.toString,i="function"==typeof t.Blob||"[object BlobConstructor]"===o.call(t.Blob),s="function"==typeof t.File||"[object FileConstructor]"===o.call(t.File);e.exports=function e(n){if(!n||"object"!=typeof n)return!1;if(r(n)){for(var o=0,a=n.length;o<a;o++)if(e(n[o]))return!0;return!1}if("function"==typeof t.Buffer&&t.Buffer.isBuffer&&t.Buffer.isBuffer(n)||"function"==typeof t.ArrayBuffer&&n instanceof ArrayBuffer||i&&n instanceof Blob||s&&n instanceof File)return!0;if(n.toJSON&&"function"==typeof n.toJSON&&1===arguments.length)return e(n.toJSON(),!0);for(var u in n)if(Object.prototype.hasOwnProperty.call(n,u)&&e(n[u]))return!0;return!1}}).call(this,n(/*! ./../../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/socket.io-client/node_modules/has-cors/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/has-cors/index.js ***!
  \**********************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}},"./node_modules/socket.io-client/node_modules/indexof/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/indexof/index.js ***!
  \*********************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){var n=[].indexOf;e.exports=function(e,t){if(n)return e.indexOf(t);for(var r=0;r<e.length;++r)if(e[r]===t)return r;return-1}},"./node_modules/socket.io-client/node_modules/isarray/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/isarray/index.js ***!
  \*********************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},"./node_modules/socket.io-client/node_modules/ms/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/ms/index.js ***!
  \****************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){var n=1e3,r=60*n,o=60*r,i=24*o,s=365.25*i;function a(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}e.exports=function(e,t){t=t||{};var u=typeof e;if("string"===u&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var a=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*s;case"days":case"day":case"d":return a*i;case"hours":case"hour":case"hrs":case"hr":case"h":return a*o;case"minutes":case"minute":case"mins":case"min":case"m":return a*r;case"seconds":case"second":case"secs":case"sec":case"s":return a*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(e);if("number"===u&&!1===isNaN(e))return t.long?function(e){return a(e,i,"day")||a(e,o,"hour")||a(e,r,"minute")||a(e,n,"second")||e+" ms"}(e):function(e){if(e>=i)return Math.round(e/i)+"d";if(e>=o)return Math.round(e/o)+"h";if(e>=r)return Math.round(e/r)+"m";if(e>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},"./node_modules/socket.io-client/node_modules/parsejson/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/parsejson/index.js ***!
  \***********************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){(function(t){var n=/^[\],:{}\s]*$/,r=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,o=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,i=/(?:^|:|,)(?:\s*\[)+/g,s=/^\s+/,a=/\s+$/;e.exports=function(e){return"string"==typeof e&&e?(e=e.replace(s,"").replace(a,""),t.JSON&&JSON.parse?JSON.parse(e):n.test(e.replace(r,"@").replace(o,"]").replace(i,""))?new Function("return "+e)():void 0):null}}).call(this,n(/*! ./../../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/socket.io-client/node_modules/parseqs/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/parseqs/index.js ***!
  \*********************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("=");t[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return t}},"./node_modules/socket.io-client/node_modules/parseuri/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/parseuri/index.js ***!
  \**********************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var t=e,o=e.indexOf("["),i=e.indexOf("]");-1!=o&&-1!=i&&(e=e.substring(0,o)+e.substring(o,i).replace(/:/g,";")+e.substring(i,e.length));for(var s=n.exec(e||""),a={},u=14;u--;)a[r[u]]=s[u]||"";return-1!=o&&-1!=i&&(a.source=t,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a}},"./node_modules/socket.io-client/node_modules/socket.io-parser/binary.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/socket.io-parser/binary.js ***!
  \*******************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){(function(e){var r=n(/*! isarray */"./node_modules/socket.io-client/node_modules/isarray/index.js"),o=n(/*! ./is-buffer */"./node_modules/socket.io-client/node_modules/socket.io-parser/is-buffer.js"),i=Object.prototype.toString,s="function"==typeof e.Blob||"[object BlobConstructor]"===i.call(e.Blob),a="function"==typeof e.File||"[object FileConstructor]"===i.call(e.File);t.deconstructPacket=function(e){var t=[],n=e.data,i=e;return i.data=function e(t,n){if(!t)return t;if(o(t)){var i={_placeholder:!0,num:n.length};return n.push(t),i}if(r(t)){for(var s=new Array(t.length),a=0;a<t.length;a++)s[a]=e(t[a],n);return s}if("object"==typeof t&&!(t instanceof Date)){var s={};for(var u in t)s[u]=e(t[u],n);return s}return t}(n,t),i.attachments=t.length,{packet:i,buffers:t}},t.reconstructPacket=function(e,t){return e.data=function e(t,n){if(!t)return t;if(t&&t._placeholder)return n[t.num];if(r(t))for(var o=0;o<t.length;o++)t[o]=e(t[o],n);else if("object"==typeof t)for(var i in t)t[i]=e(t[i],n);return t}(e.data,t),e.attachments=void 0,e},t.removeBlobs=function(e,t){var n=0,i=e;!function e(u,c,l){if(!u)return u;if(s&&u instanceof Blob||a&&u instanceof File){n++;var d=new FileReader;d.onload=function(){l?l[c]=this.result:i=this.result,--n||t(i)},d.readAsArrayBuffer(u)}else if(r(u))for(var f=0;f<u.length;f++)e(u[f],f,u);else if("object"==typeof u&&!o(u))for(var p in u)e(u[p],p,u)}(i),n||t(i)}}).call(this,n(/*! ./../../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/socket.io-client/node_modules/socket.io-parser/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/socket.io-parser/index.js ***!
  \******************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){var r=n(/*! debug */"./node_modules/socket.io-client/node_modules/debug/src/browser.js")("socket.io-parser"),o=n(/*! component-emitter */"./node_modules/socket.io-client/node_modules/component-emitter/index.js"),i=n(/*! has-binary2 */"./node_modules/socket.io-client/node_modules/has-binary2/index.js"),s=n(/*! ./binary */"./node_modules/socket.io-client/node_modules/socket.io-parser/binary.js"),a=n(/*! ./is-buffer */"./node_modules/socket.io-client/node_modules/socket.io-parser/is-buffer.js");function u(){}function c(e){var n=""+e.type;return t.BINARY_EVENT!==e.type&&t.BINARY_ACK!==e.type||(n+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(n+=e.nsp+","),null!=e.id&&(n+=e.id),null!=e.data&&(n+=JSON.stringify(e.data)),r("encoded %j as %s",e,n),n}function l(){this.reconstructor=null}function d(e){this.reconPack=e,this.buffers=[]}function f(){return{type:t.ERROR,data:"parser error"}}t.protocol=4,t.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],t.CONNECT=0,t.DISCONNECT=1,t.EVENT=2,t.ACK=3,t.ERROR=4,t.BINARY_EVENT=5,t.BINARY_ACK=6,t.Encoder=u,t.Decoder=l,u.prototype.encode=function(e,n){(e.type!==t.EVENT&&e.type!==t.ACK||!i(e.data)||(e.type=e.type===t.EVENT?t.BINARY_EVENT:t.BINARY_ACK),r("encoding packet %j",e),t.BINARY_EVENT===e.type||t.BINARY_ACK===e.type)?function(e,t){s.removeBlobs(e,function(e){var n=s.deconstructPacket(e),r=c(n.packet),o=n.buffers;o.unshift(r),t(o)})}(e,n):n([c(e)])},o(l.prototype),l.prototype.add=function(e){var n;if("string"==typeof e)n=function(e){var n=0,o={type:Number(e.charAt(0))};if(null==t.types[o.type])return f();if(t.BINARY_EVENT===o.type||t.BINARY_ACK===o.type){for(var i="";"-"!==e.charAt(++n)&&(i+=e.charAt(n),n!=e.length););if(i!=Number(i)||"-"!==e.charAt(n))throw new Error("Illegal attachments");o.attachments=Number(i)}if("/"===e.charAt(n+1))for(o.nsp="";++n;){var s=e.charAt(n);if(","===s)break;if(o.nsp+=s,n===e.length)break}else o.nsp="/";var a=e.charAt(n+1);if(""!==a&&Number(a)==a){for(o.id="";++n;){var s=e.charAt(n);if(null==s||Number(s)!=s){--n;break}if(o.id+=e.charAt(n),n===e.length)break}o.id=Number(o.id)}e.charAt(++n)&&(o=function(e,t){try{e.data=JSON.parse(t)}catch(e){return f()}return e}(o,e.substr(n)));return r("decoded %s as %j",e,o),o}(e),t.BINARY_EVENT===n.type||t.BINARY_ACK===n.type?(this.reconstructor=new d(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!a(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(e))&&(this.reconstructor=null,this.emit("decoded",n))}},l.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},d.prototype.takeBinaryData=function(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){var t=s.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null},d.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},"./node_modules/socket.io-client/node_modules/socket.io-parser/is-buffer.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/socket.io-parser/is-buffer.js ***!
  \**********************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){(function(t){e.exports=function(e){return t.Buffer&&t.Buffer.isBuffer(e)||t.ArrayBuffer&&e instanceof ArrayBuffer}}).call(this,n(/*! ./../../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/socket.io-client/node_modules/to-array/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/to-array/index.js ***!
  \**********************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){e.exports=function(e,t){for(var n=[],r=(t=t||0)||0;r<e.length;r++)n[r-t]=e[r];return n}},"./node_modules/socket.io-client/node_modules/yeast/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/yeast/index.js ***!
  \*******************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){"use strict";var r,o="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),i=64,s={},a=0,u=0;function c(e){var t="";do{t=o[e%i]+t,e=Math.floor(e/i)}while(e>0);return t}function l(){var e=c(+new Date);return e!==r?(a=0,r=e):e+"."+c(a++)}for(;u<i;u++)s[o[u]]=u;l.encode=c,l.decode=function(e){var t=0;for(u=0;u<e.length;u++)t=t*i+s[e.charAt(u)];return t},e.exports=l},"./node_modules/strict-uri-encode/index.js":
/*!*************************************************!*\
  !*** ./node_modules/strict-uri-encode/index.js ***!
  \*************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,n){"use strict";e.exports=function(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}},"./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},"./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},"./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/*! exports provided: name, version, description, main, module, scripts, repository, files, author, license, devDependencies, dependencies, default */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e){e.exports={name:"skyway-js",version:"1.1.17",description:"The official JavaScript SDK for SkyWay",main:"dist/skyway.js",module:"src/peer.js",scripts:{test:"karma start ./karma.conf.js",clean:"del ./dist",lint:"eslint .",build:"NODE_ENV=production webpack",dev:"webpack -w",doc:"jsdoc -c ./jsdoc.config.js"},repository:{type:"git",url:"git+https://github.com/skyway/skyway-js-sdk"},files:["dist/skyway.js","LICENSE","CHANGELOG.md","README.md"],author:"NTT Communications Corp.",license:"MIT",devDependencies:{"babel-loader":"^7.1.4","babel-plugin-espower":"^2.4.0","babel-plugin-istanbul":"^4.1.6","babel-preset-es2015":"^6.24.1","del-cli":"^1.1.0",eslint:"^5.0.0","eslint-config-prettier":"^2.9.0","eslint-plugin-prettier":"^2.4.0","inject-loader":"^4.0.1",jsdoc:"^3.5.3",karma:"^2.0.0","karma-chrome-launcher":"^2.2.0","karma-coverage":"^1.1.2","karma-mocha":"^1.3.0","karma-mocha-reporter":"^2.2.5","karma-sourcemap-loader":"^0.3.7","karma-webpack":"^3.0.0",mocha:"^5.2.0","power-assert":"^1.4.4",prettier:"^1.9.2",sinon:"^6.0.1",webpack:"^4.12.1","webpack-cli":"^3.0.8"},dependencies:{"detect-browser":"^2.1.0",enum:"git+https://github.com/eastandwest/enum.git#react-native",events:"^1.1.0","js-binarypack":"0.0.9","object-sizeof":"^1.0.10","query-string":"^5.0.0","sdp-interop":"^0.1.11","sdp-transform":"^2.3.0","socket.io-client":"^2.0.3"}}},"./src/peer.js":
/*!**********************************!*\
  !*** ./src/peer.js + 12 modules ***!
  \**********************************/
/*! exports provided: default */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/detect-browser/index.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/enum/index.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/events/events.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/js-binarypack/lib/binarypack.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/object-sizeof/index.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/query-string/index.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/sdp-interop/lib/index.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/sdp-transform/lib/index.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/socket.io-client/lib/index.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./package.json (<- Module is not an ECMAScript module) */function(e,t,n){"use strict";var r=n("./node_modules/events/events.js"),o=n.n(r),i=n("./node_modules/enum/index.js"),s=n.n(i),a=n("./node_modules/socket.io-client/lib/index.js"),u=n.n(a),c=n("./node_modules/query-string/index.js"),l=n.n(c);var d={DISPATCHER_HOST:"dispatcher.webrtc.ecl.ntt.com",DISPATCHER_PORT:443,DISPATCHER_SECURE:!0,DISPATCHER_TIMEOUT:1e4,TURN_HOST:"turn.webrtc.ecl.ntt.com",TURN_PORT:443,MESSAGE_TYPES:{CLIENT:new s.a(["SEND_OFFER","SEND_ANSWER","SEND_CANDIDATE","SEND_LEAVE","ROOM_JOIN","ROOM_LEAVE","ROOM_GET_LOGS","ROOM_GET_USERS","ROOM_SEND_DATA","SFU_GET_OFFER","SFU_ANSWER","SFU_CANDIDATE","PING","UPDATE_CREDENTIAL"]),SERVER:new s.a(["OPEN","ERROR","OFFER","ANSWER","CANDIDATE","LEAVE","AUTH_EXPIRES_IN","ROOM_LOGS","ROOM_USERS","ROOM_DATA","ROOM_USER_JOIN","ROOM_USER_LEAVE","SFU_OFFER"])},maxChunkSize:16300,reconnectionAttempts:2,numberServersToTry:3,sendInterval:1,pingInterval:25e3,defaultConfig:{iceServers:[{urls:"stun:stun.webrtc.ecl.ntt.com:3478",url:"stun:stun.webrtc.ecl.ntt.com:3478"}],iceTransportPolicy:"all"}};const f="SkyWay: ",p=new s.a({NONE:0,ERROR:1,WARN:2,FULL:3});var h=new class{constructor(){this._logLevel=p.NONE.value,this.LOG_LEVELS=p}setLogLevel(e){switch(e.value&&(e=e.value),parseInt(e,10)){case 0:this._logLevel=p.NONE.value;break;case 1:this._logLevel=p.ERROR.value;break;case 2:this._logLevel=p.WARN.value;break;case 3:this._logLevel=p.FULL.value;break;default:this._logLevel=p.NONE.value}}warn(...e){this._logLevel>=p.WARN.value&&console.warn(f,...e)}error(...e){this._logLevel>=p.ERROR.value&&console.error(f,...e)}log(...e){this._logLevel>=p.FULL.value&&console.log(f,...e)}},m=n("./package.json");var g=class extends o.a{constructor(e,t){if(super(),this._isOpen=!1,this._isPeerIdSet=!1,this._queue=[],this._io=null,this._key=e,this._reconnectAttempts=0,t.host&&t.port){const e=t.secure?"https://":"http://";this.signalingServerUrl=`${e}${t.host}:${t.port}`}else{const e=t.dispatcherHost||d.DISPATCHER_HOST,n=t.dispatcherPort||d.DISPATCHER_PORT,r=t.dispatcherSecure||d.DISPATCHER_SECURE?"https://":"http://";this._dispatcherUrl=`${r}${e}:${n}/signaling`}}get isOpen(){return Boolean(this._io&&this._io.connected&&this._isOpen)}async start(e,t,n){let r=`apiKey=${this._key}&token=${t}`+`&platform=javascript&sdk_version=${m.version}`;if(e&&(r+=`&peerId=${e}`,this._isPeerIdSet=!0),n&&(r+=`&credential=${encodeURIComponent(JSON.stringify(n))}`),this._dispatcherUrl){let e;try{e=await this._getSignalingServer()}catch(e){return void this.emit("error",e)}const t=e.secure?"https://":"http://";this.signalingServerUrl=`${t}${e.host}:${e.port}`}this._io=u()(this.signalingServerUrl,{"force new connection":!0,query:r,reconnectionAttempts:d.reconnectionAttempts}),this._io.on("reconnect_failed",()=>{this._stopPings(),this._connectToNewServer()}),this._io.on("error",e=>{h.error(e)}),this._setupMessageHandlers()}async _connectToNewServer(e=0){if(e>=10||this._reconnectAttempts>=d.numberServersToTry)return void this.emit("error","Could not connect to server.");let t;try{t=await this._getSignalingServer()}catch(e){return void this.emit("error",e)}if(-1===this.signalingServerUrl.indexOf(t.host)){const e=t.secure?"https://":"http://";this.signalingServerUrl=`${e}${t.host}:${t.port}`,this._io.io.uri=this.signalingServerUrl,this._io.connect(),this._reconnectAttempts++}else this._connectToNewServer(++e)}_getSignalingServer(){return new Promise((e,t)=>{const n=new XMLHttpRequest;n.timeout=d.DISPATCHER_TIMEOUT,n.open("GET",this._dispatcherUrl,!0),n.onerror=(()=>{t(new Error("There was a problem with the dispatcher."))}),n.onabort=(()=>{t(new Error("The request was aborted."))}),n.ontimeout=(()=>{t(new Error("The request for the dispather timed out."))}),n.onreadystatechange=(()=>{if(4!==n.readyState)return;if(0===n.status)return void t(new Error("There was a problem with the dispatcher."));let r=null;try{r=JSON.parse(n.responseText)}catch(e){return void t(new Error("The dispatcher server returned an invalid JSON response."))}if(200===n.status&&r&&r.domain)e({host:r.domain,port:443,secure:!0});else if(r.error&&r.error.message){const e=r.error.message;t(new Error(e))}else t(new Error("There was a problem with the dispatcher."))}),n.send(null)})}send(e,t){e?this.isOpen?!0===this._io.connected&&this._io.emit(e,t):this._queue.push({type:e,message:t}):this._io.emit("error","Invalid message")}close(){this.isOpen&&(this._stopPings(),this._io.disconnect(),this._isOpen=!1)}reconnect(){this._io.connect()}updateCredential(e){const t=l.a.parse(this._io.io.opts.query);t.credential?t.credential=encodeURIComponent(JSON.stringify(e)):h.warn("Adding a credential when one wasn't specified before."),this._io.io.opts.query=l.a.stringify(t),this.send(d.MESSAGE_TYPES.CLIENT.UPDATE_CREDENTIAL.key,e)}_setupMessageHandlers(){d.MESSAGE_TYPES.SERVER.enums.forEach(e=>{e.key===d.MESSAGE_TYPES.SERVER.OPEN.key?this._io.on(e.key,t=>{t&&t.peerId&&(this._isPeerIdSet||(this._io.io.opts.query+=`&peerId=${t.peerId}`,this._isPeerIdSet=!0),this._reconnectAttempts=0,this._startPings(),this._sendQueuedMessages(),this._isOpen||(this._isOpen=!0,this.emit(e.key,t)))}):this._io.on(e.key,t=>{this.emit(e.key,t)})})}_sendQueuedMessages(){for(const e of this._queue)this.send(e.type,e.message);this._queue=[]}_startPings(){this._pingIntervalId||(this._pingIntervalId=setInterval(()=>{this.send(d.MESSAGE_TYPES.CLIENT.PING.key)},d.pingInterval))}_stopPings(){clearInterval(this._pingIntervalId),this._pingIntervalId=void 0}},y=n("./node_modules/sdp-transform/lib/index.js"),v=n.n(y),b=n("./node_modules/sdp-interop/lib/index.js");var _=new class{unifiedToPlanB(e){const t=(new b.Interop).toPlanB(e).sdp,n=new Set,r=/a=ssrc:\d+ msid:(\w+)/g;let o;for(;o=r.exec(t);)n.add(o[1]);const i=t.replace("a=msid-semantic:WMS *",`a=msid-semantic:WMS ${Array.from(n).join(" ")}`);return new RTCSessionDescription({type:"offer",sdp:i})}addVideoBandwidth(e,t){return this._validateBandwidth(t),this._addBandwidth(e,t,"video")}addAudioBandwidth(e,t){return this._validateBandwidth(t),this._addBandwidth(e,t,"audio")}filterVideoCodec(e,t){return this._filterCodec(e,t,"video")}filterAudioCodec(e,t){return this._filterCodec(e,t,"audio")}_filterCodec(e,t,n){if(void 0===t)throw new Error("codec is not passed");const r=v.a.parse(e);return r.media=r.media.map(e=>{if(e.type===n){e.rtp=e.rtp.filter(e=>e.codec===t);const n=e.rtp.reduce((e,t)=>[...e,t.payload],[]);if(0===e.rtp.length)throw new Error(`${t} does not exist`);e.fmtp&&(e.fmtp=e.fmtp.filter(e=>n.includes(e.payload))),e.rtcpFb&&(e.rtcpFb=e.rtcpFb.filter(e=>n.includes(e.payload))),e.payloads=n.join(" ")}return e}),v.a.write(r)}_addBandwidth(e,t,n){const r=v.a.parse(e);return r.media=r.media.map(e=>(e.type===n&&(e.bandwidth=[{type:"AS",limit:t.toString()},{type:"TIAS",limit:(1e3*t).toString()}]),e)),v.a.write(r)}_validateBandwidth(e){if(void 0===e)throw new Error("bandwidth is not passed");if(!/^\d+$/.test(e))throw new Error(`${e} is not a number`)}},w=n("./node_modules/detect-browser/index.js");var E={validateId:function(e){return!e||/^[A-Za-z0-9_-]+(?:[ _-][A-Za-z0-9]+)*$/.exec(e)},validateKey:function(e){return!e||/^[a-z0-9]{8}(-[a-z0-9]{4}){3}-[a-z0-9]{12}$/.exec(e)},randomId:function(){return(Math.random().toString(36)+"0000000000000000000").substr(2,16)},randomToken:function(){return Math.random().toString(36).substr(2)},joinArrayBuffers:function(e){const t=e.reduce((e,t)=>e+t.byteLength,0),n=new Uint8Array(t);let r=0;for(const t of e)n.set(new Uint8Array(t),r),r+=t.byteLength;return n.buffer},blobToArrayBuffer:function(e,t){const n=new FileReader;n.onload=(e=>{t(e.target.result)}),n.readAsArrayBuffer(e)},isSecure:function(){return"https:"===location.protocol},detectBrowser:function(){const{name:e,version:t}=Object(w.detect)(),[n,r,o]=t.split(".").map(e=>parseInt(e));return{name:e,major:n,minor:r,patch:o}}};const k=new s.a(["addStream","removeStream","dcCreated","offerCreated","answerCreated","iceCandidate","iceCandidatesComplete","iceConnectionFailed","negotiationNeeded","error"]);class S extends o.a{constructor(){super(),this._offerQueue=[],this._isExpectingAnswer=!1,this._replaceStreamCalled=!1,this._isNegotiationAllowed=!0,this.hasRemoteDescription=!1}async startConnection(e={}){if(this._pc=this._createPeerConnection(e.pcConfig),this._setupPCListeners(),this.originator=e.originator,this._audioBandwidth=e.audioBandwidth,this._videoBandwidth=e.videoBandwidth,this._audioCodec=e.audioCodec,this._videoCodec=e.videoCodec,this._type=e.type,this._recvonlyState=this._getReceiveOnlyState(e),this._remoteBrowser={},"media"===this._type)if(e.stream)this._isAddTrackAvailable&&!this._isForceUseStreamMethods?e.stream.getTracks().forEach(t=>{this._pc.addTrack(t,e.stream)}):this._pc.addStream(e.stream);else if(this.originator){const e=await this._makeOfferSdp();await this._setLocalDescription(e)}if(this.originator){if("data"===this._type){const t=e.label||"",n=e.dcInit||{},r=this._pc.createDataChannel(t,n);this.emit(S.EVENTS.dcCreated.key,r)}}else await this.handleOffer(e.offer)}setRemoteBrowser(e){this._remoteBrowser=e}replaceStream(e){this._pc&&(this._isNegotiationAllowed=!0,this._isRtpSenderAvailable&&!this._isForceUseStreamMethods?this._replacePerTrack(e):this._replaceStreamCalled||this._replacePerStream(e))}async handleOffer(e){if(this._lastOffer&&e&&this._lastOffer.sdp===e.sdp)return;if(this._isNegotiationAllowed=!0,e||(e=this._lastOffer),this._lastOffer=e,"have-remote-offer"===this._pc.signalingState)return void this._offerQueue.push(e);await this._setRemoteDescription(e);const t=await this._makeAnswerSdp().catch(e=>h.error(e));this.emit(S.EVENTS.answerCreated.key,t)}async handleAnswer(e){this._isNegotiationAllowed=!0,this._isExpectingAnswer?(await this._setRemoteDescription(e),this._isExpectingAnswer=!1):this._pc.onnegotiationneeded&&this._pc.onnegotiationneeded()}async handleCandidate(e){await this._pc.addIceCandidate(new RTCIceCandidate(e)).then(()=>h.log("Successfully added ICE candidate")).catch(e=>h.error("Failed to add ICE candidate",e))}cleanup(){h.log("Cleaning up PeerConnection"),!this._pc||"closed"===this._pc.readyState&&"closed"===this._pc.signalingState||this._pc.close(),this._pc=null}_createPeerConnection(e){h.log("Creating RTCPeerConnection");const t=E.detectBrowser();return this._isAddTrackAvailable="function"==typeof RTCPeerConnection.prototype.addTrack,this._isOnTrackAvailable="ontrack"in RTCPeerConnection.prototype,this._isRtpSenderAvailable="function"==typeof RTCPeerConnection.prototype.getSenders,this._isAddTransceiverAvailable="function"==typeof RTCPeerConnection.prototype.addTransceiver&&"chrome"!==t.name,this._isForceUseStreamMethods="chrome"===t.name&&t.major<=64,new RTCPeerConnection(e)}_setupPCListeners(){const e=this._pc;this._isOnTrackAvailable&&!this._isForceUseStreamMethods?e.ontrack=(e=>{h.log("Received remote media stream"),e.streams.forEach(e=>{this.emit(S.EVENTS.addStream.key,e)})}):e.onaddstream=(e=>{h.log("Received remote media stream");const t=e.stream;this.emit(S.EVENTS.addStream.key,t)}),e.ondatachannel=(e=>{h.log("Received data channel");const t=e.channel;this.emit(S.EVENTS.dcCreated.key,t)}),e.onicecandidate=(t=>{const n=t.candidate;n?(h.log("Generated ICE candidate for:",n),this.emit(S.EVENTS.iceCandidate.key,n)):(h.log("ICE candidates gathering complete"),this.emit(S.EVENTS.iceCandidatesComplete.key,e.localDescription))}),e.oniceconnectionstatechange=(()=>{switch(e.iceConnectionState){case"completed":h.log("iceConnectionState is completed"),e.onicecandidate=(()=>{});break;case"disconnected":h.log("iceConnectionState is disconnected, trying reconnect by browser");break;case"failed":h.log("iceConnectionState is failed, closing connection"),this.emit(S.EVENTS.iceConnectionFailed.key);break;default:h.log(`iceConnectionState is ${e.iceConnectionState}`)}}),e.onnegotiationneeded=(async()=>{if(h.log("`negotiationneeded` triggered"),"stable"===e.signalingState&&this._isNegotiationAllowed){if(this._isNegotiationAllowed=!1,this.originator){const e=await this._makeOfferSdp();this._setLocalDescription(e),this.emit(S.EVENTS.negotiationNeeded.key)}else this._replaceStreamCalled&&this.handleOffer();this._replaceStreamCalled=!1}}),e.onremovestream=(e=>{h.log("`removestream` triggered"),this.emit(S.EVENTS.removeStream.key,e.stream)}),e.onsignalingstatechange=(()=>{if(h.log(`signalingState is ${e.signalingState}`),"stable"===e.signalingState){const e=this._offerQueue.shift();e&&this.handleOffer(e)}})}async _makeOfferSdp(){let e;try{if("media"!==this._type)e=await this._pc.createOffer();else if(this._isAddTransceiverAvailable)this._recvonlyState.audio&&this._pc.addTransceiver("audio",{direction:"recvonly"}),this._recvonlyState.video&&this._pc.addTransceiver("video",{direction:"recvonly"}),e=await this._pc.createOffer();else{const t={};this._recvonlyState.audio&&(t.offerToReceiveAudio=!0),this._recvonlyState.video&&(t.offerToReceiveVideo=!0),e=await this._pc.createOffer(t)}}catch(e){throw e.type="webrtc",h.error(e),this.emit(S.EVENTS.error.key,e),h.log("Failed to createOffer, ",e),e}return h.log("Created offer."),this._audioBandwidth&&(e.sdp=_.addAudioBandwidth(e.sdp,this._audioBandwidth)),this._videoBandwidth&&(e.sdp=_.addVideoBandwidth(e.sdp,this._videoBandwidth)),this._audioCodec&&(e.sdp=_.filterAudioCodec(e.sdp,this._audioCodec)),this._videoCodec&&(e.sdp=_.filterVideoCodec(e.sdp,this._videoCodec)),e}async _makeAnswerSdp(){let e;try{e=await this._pc.createAnswer()}catch(e){throw e.type="webrtc",h.error(e),this.emit(S.EVENTS.error.key,e),h.log("Failed to createAnswer, ",e),e}h.log("Created answer."),this._audioBandwidth&&(e.sdp=_.addAudioBandwidth(e.sdp,this._audioBandwidth)),this._videoBandwidth&&(e.sdp=_.addVideoBandwidth(e.sdp,this._videoBandwidth)),this._audioCodec&&(e.sdp=_.filterAudioCodec(e.sdp,this._audioCodec)),this._videoCodec&&(e.sdp=_.filterVideoCodec(e.sdp,this._videoCodec));try{await this._pc.setLocalDescription(e)}catch(e){throw e.type="webrtc",h.error(e),this.emit(S.EVENTS.error.key,e),h.log("Failed to setLocalDescription, ",e),e}return h.log("Set localDescription: answer"),h.log(`Setting local description ${JSON.stringify(e.sdp)}`),e}async _setLocalDescription(e){h.log(`Setting local description ${JSON.stringify(e.sdp)}`);try{await this._pc.setLocalDescription(e)}catch(e){throw e.type="webrtc",h.error(e),this.emit(S.EVENTS.error.key,e),h.log("Failed to setLocalDescription, ",e),e}h.log("Set localDescription: offer"),this._isExpectingAnswer=!0,this.emit(S.EVENTS.offerCreated.key,e)}async _setRemoteDescription(e){h.log(`Setting remote description ${JSON.stringify(e)}`);try{await this._pc.setRemoteDescription(new RTCSessionDescription(e)),this.hasRemoteDescription=!0}catch(e){throw e.type="webrtc",h.error(e),this.emit(S.EVENTS.error.key,e),h.log("Failed to setRemoteDescription: ",e),e}h.log("Set remoteDescription:",e.type)}_getReceiveOnlyState(e={}){const t={audio:!1,video:!1},n=e.stream instanceof MediaStream,r=!!n&&0!==e.stream.getAudioTracks().length,o=!!n&&0!==e.stream.getVideoTracks().length;return!1===n&&void 0===e.audioReceiveEnabled&&void 0===e.videoReceiveEnabled?(t.audio=!0,t.video=!0,t):(e.audioReceiveEnabled&&!1===r&&(t.audio=!0),e.videoReceiveEnabled&&!1===o&&(t.video=!0),!1===e.audioReceiveEnabled&&r&&h.warn("Option audioReceiveEnabled will be treated as true, because passed stream has MediaStreamTrack(kind = audio)"),!1===e.videoReceiveEnabled&&o&&h.warn("Option videoReceiveEnabled will be treated as true, because passed stream has MediaStreamTrack(kind = video)"),t)}_replacePerTrack(e){const t=this,n=e.getVideoTracks(),r=e.getAudioTracks(),o=this._pc.getSenders(),i=o.find(e=>"video"===e.track.kind),s=o.find(e=>"audio"===e.track.kind);function a(e,n,r){void 0===n&&void 0===e||(void 0!==n?void 0!==e?e.track.id!==n.id&&e.replaceTrack(n):t._pc.addTrack(n,r):t._pc.removeTrack(e))}a(i,n[0],e),a(s,r[0],e)}_replacePerStream(e){const t=this._pc.getLocalStreams(),n=this._pc.onnegotiationneeded;this._pc.onnegotiationneeded=(()=>{}),t.length>0&&this._pc.removeStream(t[0]),this._remoteBrowser&&"firefox"===this._remoteBrowser.name&&this._remoteBrowser.major>=59?(this._pc.addStream(e),setTimeout(async()=>{try{if(this.originator){const e=await this._makeOfferSdp();await this._pc.setLocalDescription(e),await this._pc.setRemoteDescription(this._pc.remoteDescription)}else{await this._pc.setRemoteDescription(this._pc.remoteDescription);const e=await this._pc.createAnswer();await this._pc.setLocalDescription(e)}}catch(e){h.error(e)}this._pc.onnegotiationneeded=n})):(this._replaceStreamCalled=!0,setTimeout(()=>{this._pc.addStream(e),this._pc.onnegotiationneeded=n}))}static get EVENTS(){return k}}var x=S;const T=new s.a(["candidate","offer","answer","close"]);class C extends o.a{constructor(e,t){if(super(),t=t||{},this.constructor===C)throw new TypeError("Cannot construct Connection instances directly");this._options=t,this.open=!1,this.type=void 0,this.metadata=this._options.metadata,this.remoteId=e,this._negotiator=new x,this._idPrefix="c_",this._randomIdSuffix=E.randomToken(),this._setupNegotiatorMessageHandlers()}get id(){return this._options.connectionId||this._idPrefix+this._randomIdSuffix}async handleAnswer(e){this._pcAvailable?(await this._negotiator.handleAnswer(e.answer),this._negotiator.setRemoteBrowser(e.browser),this.open=!0,this._handleQueuedMessages()):(h.log(`Queuing ANSWER message in ${this.id} from ${this.remoteId}`),this._queuedMessages.push({type:d.MESSAGE_TYPES.SERVER.ANSWER.key,payload:e}))}handleCandidate(e){!this._negotiator.originator||this._negotiator.hasRemoteDescription?this._pcAvailable?this._negotiator.handleCandidate(e.candidate):(h.log(`Queuing CANDIDATE message in ${this.id} from ${this.remoteId}`),this._queuedMessages.push({type:d.MESSAGE_TYPES.SERVER.CANDIDATE.key,payload:e})):this._queuedMessages.push({type:d.MESSAGE_TYPES.SERVER.CANDIDATE.key,payload:e})}updateOffer(e){this.open?this._negotiator.handleOffer(e.offer):this._options.payload=e}_handleQueuedMessages(){for(const e of this._queuedMessages)switch(e.type){case d.MESSAGE_TYPES.SERVER.ANSWER.key:this.handleAnswer(e.payload);break;case d.MESSAGE_TYPES.SERVER.CANDIDATE.key:this.handleCandidate(e.payload);break;default:h.warn("Unrecognized message type:",e.type,"from peer:",this.remoteId)}this._queuedMessages=[]}close(){this.open&&(this.open=!1,this._negotiator.cleanup(),this.emit(C.EVENTS.close.key))}_setupNegotiatorMessageHandlers(){const e=E.detectBrowser();this._negotiator.on(x.EVENTS.answerCreated.key,t=>{const n={answer:t,dst:this.remoteId,connectionId:this.id,connectionType:this.type,browser:e};this.emit(C.EVENTS.answer.key,n)}),this._negotiator.on(x.EVENTS.offerCreated.key,t=>{const n={offer:t,dst:this.remoteId,connectionId:this.id,connectionType:this.type,metadata:this.metadata,browser:e};this.serialization&&(n.serialization=this.serialization),this.label&&(n.label=this.label),this.dcInit&&(n.dcInit=this.dcInit),this.emit(C.EVENTS.offer.key,n)}),this._negotiator.on(x.EVENTS.iceCandidate.key,e=>{const t={candidate:e,dst:this.remoteId,connectionId:this.id,connectionType:this.type};this.emit(C.EVENTS.candidate.key,t)}),this._negotiator.on(x.EVENTS.iceConnectionFailed.key,()=>{this.close()})}get peer(){return h.warn(`${this.constructor.name}.peer is deprecated and may be removed from a future version.`+` Please use ${this.constructor.name}.remoteId instead.`),this.remoteId}static get EVENTS(){return T}}var A=C,R=n("./node_modules/js-binarypack/lib/binarypack.js"),P=n.n(R),O=n("./node_modules/object-sizeof/index.js"),N=n.n(O);const M=new s.a(["open","data","error"]);M.extend(A.EVENTS.enums);const B=new s.a(["binary","binary-utf8","json","none"]);class j extends A{constructor(e,t){if(super(e,t),this._idPrefix="dc_",this.type="data",this._isOnOpenCalled=!1,this.label=this._options.label||this.id,this.dcInit=this._options.dcInit||{},this.serialization=j.SERIALIZATIONS.binary.key,this._options.serialization){if(!j.SERIALIZATIONS.get(this._options.serialization))throw new Error("Invalid serialization");this.serialization=this._options.serialization,this._isUnreliableDCInit(this.dcInit)&&(h.warn("You can not specify serialization with unreliable mode enabled."),this.serialization=j.SERIALIZATIONS.binary.key)}this._sendBuffer=[],this._receivedData={},this._queuedMessages=this._options.queuedMessages||[],this._options.payload&&(this._peerBrowser=this._options.payload.browser),this._negotiator.on(x.EVENTS.dcCreated.key,e=>{this._dc=e,this._dc.binaryType="arraybuffer",this._setupMessageHandlers(),this._isOnOpenCalled||"open"!==this._dc.readyState||this._dc.onopen()}),this._options.payload&&(this._options.payload.pcConfig=this._options.pcConfig)}async startConnection(){await this._negotiator.startConnection(this._options.payload||{originator:!0,type:"data",label:this.label,dcInit:this.dcInit,pcConfig:this._options.pcConfig}),this._pcAvailable=!0,this._handleQueuedMessages()}_setupMessageHandlers(){this._dc.onopen=(()=>{this._isOnOpenCalled||(h.log("Data channel connection success"),this.open=!0,this._isOnOpenCalled=!0,this.emit(j.EVENTS.open.key))}),this._dc.onmessage=(e=>{this._handleDataMessage(e)}),this._dc.onclose=(()=>{h.log("DataChannel closed for:",this.id),this.close()}),this._dc.onerror=(e=>{h.error(e)})}_handleDataMessage(e){if(this.serialization===j.SERIALIZATIONS.none.key)return void this.emit(j.EVENTS.data.key,e.data);if(this.serialization===j.SERIALIZATIONS.json.key)return void this.emit(j.EVENTS.data.key,JSON.parse(e.data));const t=P.a.unpack(e.data);let n=this._receivedData[t.id];if(n||(n=this._receivedData[t.id]={size:t.size,type:t.type,name:t.name,mimeType:t.mimeType,totalParts:t.totalParts,parts:new Array(t.totalParts),receivedParts:0}),n.receivedParts++,n.parts[t.index]=t.data,n.receivedParts===n.totalParts){delete this._receivedData[t.id];const e=E.joinArrayBuffers(n.parts),r=P.a.unpack(e);let o;switch(n.type){case"Blob":o=new Blob([new Uint8Array(r)],{type:n.mimeType});break;case"File":o=new File([new Uint8Array(r)],n.name,{type:n.mimeType});break;default:o=r}this.emit(j.EVENTS.data.key,o)}}send(e){if(!this.open)return void this.emit(j.EVENTS.error.key,new Error("Connection is not open. You should listen for the `open` event before sending messages."));if(void 0===e||null===e)return;if(this.serialization===j.SERIALIZATIONS.none.key)return this._sendBuffer.push(e),void this._startSendLoop();if(this.serialization===j.SERIALIZATIONS.json.key)return this._sendBuffer.push(JSON.stringify(e)),void this._startSendLoop();const t=P.a.pack(e),n=t.size,r=e.constructor.name,o={id:E.randomId(),type:r,size:n,totalParts:0};"File"===r&&(o.name=e.name),e instanceof Blob&&(o.mimeType=e.type);const i=d.maxChunkSize-N()(o),s=Math.ceil(n/i);o.totalParts=s;for(let e=0;e<s;e++){const n=t.slice(e*i,(e+1)*i);o.index=e,o.data=n,E.blobToArrayBuffer(P.a.pack(o),e=>{this._sendBuffer.push(e),this._startSendLoop()})}}close(){super.close(),this._isOnOpenCalled=!1}_startSendLoop(){this.sendInterval||(this.sendInterval=setInterval(()=>{const e=this._sendBuffer.shift();try{this._dc.send(e)}catch(t){this._sendBuffer.push(e)}0===this._sendBuffer.length&&(clearInterval(this.sendInterval),this.sendInterval=void 0)},d.sendInterval))}_isUnreliableDCInit(e){return!!e&&("maxRetransmits"in e||"maxPacketLifeTime"in e)}static get SERIALIZATIONS(){return B}static get EVENTS(){return M}}var I=j;const L=new s.a(["stream","removeStream"]);L.extend(A.EVENTS.enums);class U extends A{constructor(e,t){super(e,t),this._idPrefix="mc_",this.type="media",this.localStream=this._options.stream,this._queuedMessages=this._options.queuedMessages||[],this._pcAvailable=!1}async startConnection(){this._options.originator&&(await this._negotiator.startConnection({type:"media",stream:this.localStream,originator:this._options.originator,pcConfig:this._options.pcConfig,videoBandwidth:this._options.videoBandwidth,audioBandwidth:this._options.audioBandwidth,videoCodec:this._options.videoCodec,audioCodec:this._options.audioCodec,videoReceiveEnabled:this._options.videoReceiveEnabled,audioReceiveEnabled:this._options.audioReceiveEnabled}),this._pcAvailable=!0,this._handleQueuedMessages())}answer(e,t={}){this.localStream?h.warn("localStream already exists on this MediaConnection. Are you answering a call twice?"):(this._options.payload.stream=e,this.localStream=e,this._negotiator.startConnection({type:"media",stream:this.localStream,originator:!1,offer:this._options.payload.offer,pcConfig:this._options.pcConfig,audioBandwidth:t.audioBandwidth,videoBandwidth:t.videoBandwidth,videoCodec:t.videoCodec,audioCodec:t.audioCodec,videoReceiveEnabled:t.videoReceiveEnabled,audioReceiveEnabled:t.audioReceiveEnabled}),this._negotiator.setRemoteBrowser(this._options.payload.browser),this._pcAvailable=!0,this._handleQueuedMessages(),this.open=!0)}replaceStream(e){this._negotiator.replaceStream(e),this.localStream=e}_setupNegotiatorMessageHandlers(){super._setupNegotiatorMessageHandlers(),this._negotiator.on(x.EVENTS.addStream.key,e=>{h.log("Receiving stream",e),this.remoteStream&&this.remoteStream.id===e.id||(this.remoteStream=e,this.emit(U.EVENTS.stream.key,e))}),this._negotiator.on(x.EVENTS.removeStream.key,e=>{h.log("Stream removed",e),this.remoteStream===e&&(this.remoteStream=null),this.emit(U.EVENTS.removeStream.key,e)})}static get EVENTS(){return L}}var D=U;const F=new s.a(["stream","removeStream","open","close","peerJoin","peerLeave","error","data","log"]),V=new s.a(["offer","answer","candidate","leave","close","getLog","broadcast"]);class z extends o.a{constructor(e,t,n={}){if(super(),this.constructor===z)throw new TypeError("Cannot construct Room instances directly");this.name=e,this._options=n,this._peerId=t,this._localStream=this._options.stream,this._pcConfig=this._options.pcConfig}handleData(e){const t={data:e.data,src:e.src};this.emit(z.EVENTS.data.key,t)}handleLog(e){this.emit(z.EVENTS.log.key,e)}getLog(){const e={roomName:this.name};this.emit(z.MESSAGE_EVENTS.getLog.key,e)}static get EVENTS(){return F}static get MESSAGE_EVENTS(){return V}}var q=z;const H=new s.a([]);H.extend(q.EVENTS.enums);const W=new s.a(["offerRequest","candidate"]);W.extend(q.MESSAGE_EVENTS.enums);class $ extends q{constructor(e,t,n){super(e,t,n),this.remoteStreams={},this.members=[],this._open=!1,this._msidMap={},this._unknownStreams={},this._negotiator=new x}call(e){e&&(this._localStream=e);const t={roomName:this.name};this.emit($.MESSAGE_EVENTS.offerRequest.key,t)}handleOffer(e){let t=e.offer;"firefox"!==E.detectBrowser().name&&(t=_.unifiedToPlanB(t)),this._connectionStarted?this._negotiator.handleOffer(t):(this._negotiator.startConnection({type:"media",stream:this._localStream,pcConfig:this._options.pcConfig,offer:t}),this._setupNegotiatorMessageHandlers(),this._connectionStarted=!0)}_setupNegotiatorMessageHandlers(){this._negotiator.on(x.EVENTS.addStream.key,e=>{const t=e;if(this._msidMap[t.id]){if(t.peerId=this._msidMap[t.id],t.peerId===this._peerId)return;const e=this.remoteStreams[t.id];if(e&&e.id===t.id)return;this.remoteStreams[t.id]=t,this.emit($.EVENTS.stream.key,t),h.log(`Received remote media stream for ${t.peerId} in ${this.name}`)}else this._unknownStreams[t.id]=t}),this._negotiator.on(x.EVENTS.removeStream.key,e=>{delete this.remoteStreams[e.id],delete this._msidMap[e.id],delete this._unknownStreams[e.id],this.emit($.EVENTS.removeStream.key,e)}),this._negotiator.on(x.EVENTS.negotiationNeeded.key,()=>{const e={roomName:this.name};this.emit($.MESSAGE_EVENTS.offerRequest.key,e)}),this._negotiator.on(x.EVENTS.answerCreated.key,e=>{const t={roomName:this.name,answer:e};this.emit($.MESSAGE_EVENTS.answer.key,t)}),this._negotiator.on(x.EVENTS.iceConnectionFailed.key,()=>{this.close()}),this._negotiator.on(x.EVENTS.iceCandidate.key,e=>{const t={roomName:this.name,candidate:e};this.emit($.MESSAGE_EVENTS.candidate.key,t)})}handleJoin(e){const t=e.src;if(t===this._peerId)return this._open=!0,this.call(this._localStream),void this.emit($.EVENTS.open.key);this.members.push(t),this.emit($.EVENTS.peerJoin.key,t)}handleLeave(e){if(!this._open)return;const t=e.src,n=this.members.indexOf(t);n>=0&&this.members.splice(n,1),this.emit($.EVENTS.peerLeave.key,t)}send(e){if(!this._open)return;const t={roomName:this.name,data:e};this.emit($.MESSAGE_EVENTS.broadcast.key,t)}close(){if(!this._open)return;this._negotiator&&this._negotiator.cleanup(),this._open=!1;const e={roomName:this.name};this.emit($.MESSAGE_EVENTS.leave.key,e),this.emit($.EVENTS.close.key)}replaceStream(e){this._localStream=e,this._negotiator.replaceStream(e)}updateMsidMap(e={}){this._msidMap=e;for(const e of Object.keys(this._unknownStreams))if(this._msidMap[e]){const t=this._unknownStreams[e];if(t.peerId=this._msidMap[t.id],delete this._unknownStreams[e],t.peerId===this._peerId)return;this.remoteStreams[t.id]=t,this.emit($.EVENTS.stream.key,t)}}static get EVENTS(){return H}static get MESSAGE_EVENTS(){return W}}var Y=$;const G=new s.a([]);G.extend(q.EVENTS.enums);const K=new s.a(["broadcastByDC","getPeers"]);K.extend(q.MESSAGE_EVENTS.enums);class J extends q{constructor(e,t,n){super(e,t,n),this.connections={},this._queuedMessages={}}call(e){e&&(this._localStream=e);const t={roomName:this.name,type:"media"};this.emit(J.MESSAGE_EVENTS.getPeers.key,t)}connect(){const e={roomName:this.name,type:"data"};this.emit(J.MESSAGE_EVENTS.getPeers.key,e)}makeMediaConnections(e){const t={stream:this._localStream,pcConfig:this._pcConfig,originator:!0,videoBandwidth:this._options.videoBandwidth,audioBandwidth:this._options.audioBandwidth,videoCodec:this._options.videoCodec,audioCodec:this._options.audioCodec,videoReceiveEnabled:this._options.videoReceiveEnabled,audioReceiveEnabled:this._options.audioReceiveEnabled};this._makeConnections(e,"media",t)}makeDataConnections(e){const t={pcConfig:this._pcConfig};this._makeConnections(e,"data",t)}handleJoin(e){const t=e.src;if(t===this._peerId)return this.call(this._localStream),void this.emit(J.EVENTS.open.key);this.emit(J.EVENTS.peerJoin.key,t)}handleLeave(e){const t=e.src;this._deleteConnections(t),this.emit(J.EVENTS.peerLeave.key,t)}handleOffer(e){const t=e.connectionId;let n=this._getConnection(e.src,t);n?n.updateOffer(e):"media"===e.connectionType?((n=new D(e.src,{connectionId:t,payload:e,metadata:e.metadata,queuedMessages:this._queuedMessages[t],pcConfig:this._pcConfig})).startConnection(),h.log("MediaConnection created in OFFER"),this._addConnection(e.src,n),this._setupMessageHandlers(n),n.answer(this._localStream,{videoBandwidth:this._options.videoBandwidth,audioBandwidth:this._options.audioBandwidth,videoCodec:this._options.videoCodec,audioCodec:this._options.audioCodec,videoReceiveEnabled:this._options.videoReceiveEnabled,audioReceiveEnabled:this._options.audioReceiveEnabled})):h.warn(`Received malformed connection type: ${e.connectionType}`)}handleAnswer(e){const t=this._getConnection(e.src,e.connectionId);t&&t.handleAnswer(e)}handleCandidate(e){const t=this._getConnection(e.src,e.connectionId);t?t.handleCandidate(e):(void 0===this._queuedMessages[e.connectionId]&&(this._queuedMessages[e.connectionId]=[]),this._queuedMessages[e.connectionId].push({type:d.MESSAGE_TYPES.SERVER.CANDIDATE.key,payload:e}))}send(e){const t={roomName:this.name,data:e};this.emit(J.MESSAGE_EVENTS.broadcast.key,t)}close(){for(const e in this.connections)this.connections.hasOwnProperty(e)&&this.connections[e].forEach(e=>{e.close()});const e={roomName:this.name};this.emit(J.MESSAGE_EVENTS.leave.key,e),this.emit(J.EVENTS.close.key)}replaceStream(e){this._localStream=e;for(const t in this.connections)this.connections.hasOwnProperty(t)&&this.connections[t].forEach(t=>{"media"===t.type&&t.replaceStream(e)})}_addConnection(e,t){this.connections[e]||(this.connections[e]=[]),this.connections[e].push(t)}_makeConnections(e,t,n){e.filter(e=>e!==this._peerId).forEach(e=>{let r;switch(t){case"data":r=new I(e,n);break;case"media":r=new D(e,n);break;default:return}r.startConnection(),this._addConnection(e,r),this._setupMessageHandlers(r),h.log(`${t} connection to ${e} created in ${this.name}`)})}_deleteConnections(e){this.connections[e]&&delete this.connections[e]}_getConnection(e,t){if(this.connections&&this.connections[e]){return this.connections[e].filter(e=>e.id===t)[0]}return null}_setupMessageHandlers(e){e.on(A.EVENTS.offer.key,e=>{e.roomName=this.name,this.emit(J.MESSAGE_EVENTS.offer.key,e)}),e.on(A.EVENTS.answer.key,e=>{e.roomName=this.name,this.emit(J.MESSAGE_EVENTS.answer.key,e)}),e.on(A.EVENTS.candidate.key,e=>{e.roomName=this.name,this.emit(J.MESSAGE_EVENTS.candidate.key,e)}),"media"===e.type&&(e.on(D.EVENTS.stream.key,t=>{t.peerId=e.remoteId,this.emit(J.EVENTS.stream.key,t)}),e.on(D.EVENTS.removeStream.key,e=>{this.emit(J.EVENTS.removeStream.key,e)}))}static get EVENTS(){return G}static get MESSAGE_EVENTS(){return K}}var X=J;const Q=new s.a(["open","error","call","connection","expiresin","close","disconnected"]);class Z extends o.a{constructor(e,t){super(),this.connections={},this.rooms={},this._queuedMessages={},e&&e.constructor===Object?(t=e,e=void 0):e&&(e=e.toString());const n={debug:h.LOG_LEVELS.NONE,secure:!0,token:E.randomToken(),config:d.defaultConfig,turn:!0,dispatcherSecure:d.DISPATCHER_SECURE,dispatcherHost:d.DISPATCHER_HOST,dispatcherPort:d.DISPATCHER_PORT};this.options=Object.assign({},n,t),h.setLogLevel(this.options.debug),E.validateId(e)?E.validateKey(t.key)?("/"===this.options.host&&(this.options.host=window.location.hostname),void 0===t.secure&&443!==this.options.port&&(this.options.secure=void 0),this._initializeServerConnection(e)):this._abort("invalid-key",`API KEY "${this.options.key}" is invalid`):this._abort("invalid-id",`ID "${e}" is invalid`)}call(e,t,n={}){if(!this._checkOpenStatus())return;n.originator=!0,n.stream=t,n.pcConfig=this._pcConfig;const r=new D(e,n);return r.startConnection(),h.log("MediaConnection created in call method"),this._addConnection(e,r),r}connect(e,t={}){if(!this._checkOpenStatus())return;t.pcConfig=this._pcConfig;const n=new I(e,t);return n.startConnection(),h.log("DataConnection created in connect method"),this._addConnection(e,n),n}joinRoom(e,t={}){if(this._checkOpenStatus()){if(!e){const e=new Error("Room name must be defined.");return e.type="room-error",h.error(e),this.emit(Z.EVENTS.error.key,e),null}return t.pcConfig=this._pcConfig,t.peerId=this.id,"sfu"===t.mode?this._initializeSfuRoom(e,t):this._initializeFullMeshRoom(e,t)}}getConnection(e,t){if(this._checkOpenStatus()){if(this.connections[e])for(const n of this.connections[e])if(n.id===t)return n;return null}}get open(){return this.socket.isOpen}destroy(){this._cleanup(),this.disconnect()}disconnect(){this.open&&(this.socket.close(),this.emit(Z.EVENTS.disconnected.key,this.id))}reconnect(){this.open||this.socket.reconnect()}updateCredential(e){this.socket.updateCredential(e)}listAllPeers(e){if(!this._checkOpenStatus())return;e=e||function(){};const t=this,n=new XMLHttpRequest,r=`${this.socket.signalingServerUrl}/api/apikeys/${this.options.key}/clients/`;n.open("get",r,!0),n.onerror=function(){t._abort("server-error","Could not get peers from the server."),e([])},n.onreadystatechange=function(){if(4===n.readyState)if(401===n.status){e([]);const n=new Error("It doesn't look like you have permission to list peers IDs. Please enable the SkyWay REST API on dashboard");n.type="list-error",h.error(n),t.emit(Z.EVENTS.error.key,n)}else 200===n.status?e(JSON.parse(n.responseText)):e([])},n.send(null)}_checkOpenStatus(){return this.open||this._emitNotConnectedError(),this.open}_emitNotConnectedError(){h.warn("You cannot connect to a new Peer because you are not connecting to SkyWay server now.You can create a new Peer to reconnect, or call reconnect() on this peer if you believe its ID to still be available.");const e=new Error("Cannot connect to new Peer before connecting to SkyWay server or after disconnecting from the server.");e.type="disconnected",h.error(e),this.emit(Z.EVENTS.error.key,e)}_initializeServerConnection(e){this.socket=new g(this.options.key,{secure:this.options.secure,host:this.options.host,port:this.options.port,dispatcherSecure:this.options.dispatcherSecure,dispatcherHost:this.options.dispatcherHost,dispatcherPort:this.options.dispatcherPort}),this._setupMessageHandlers(),this.socket.on("error",e=>{this._abort("socket-error",e)}),this.socket.on("disconnect",()=>{this.disconnect();const e=new Error("Lost connection to server.");e.type="socket-error",h.error(e),this.emit(Z.EVENTS.error.key,e)}),this.socket.start(e,this.options.token,this.options.credential),window.onbeforeunload=(()=>{this.destroy()})}_initializeSfuRoom(e,t={}){if(this.rooms[e])return this.rooms[e];const n=new Y(e,this.id,t);this.rooms[e]=n,this._setupSFURoomMessageHandlers(n);const r={roomName:e,roomType:"sfu"};return this.socket.send(d.MESSAGE_TYPES.CLIENT.ROOM_JOIN.key,r),n}_initializeFullMeshRoom(e,t={}){if(this.rooms[e])return this.rooms[e];const n=new X(e,this.id,t);this.rooms[e]=n,this._setupMeshRoomMessageHandlers(n);const r={roomName:e,roomType:"mesh"};return this.socket.send(d.MESSAGE_TYPES.CLIENT.ROOM_JOIN.key,r),n}_setupMessageHandlers(){this.socket.on(d.MESSAGE_TYPES.SERVER.OPEN.key,e=>{this.id=e.peerId,this._pcConfig=Object.assign({},this.options.config);const t=this._pcConfig.iceServers;this._pcConfig.iceServers=t?t.slice():[];const n=e.turnCredential;let r,o;if("object"==typeof n?(r=n.username,o=n.credential):"string"==typeof n&&(r=`${this.options.key}$${this.id}`,o=n),!0===this.options.turn&&r&&o){const e=[{protocol:"turn",transport:"tcp"},{protocol:"turn",transport:"udp"}];"edge"!==E.detectBrowser().name&&e.push({protocol:"turns",transport:"tcp"});for(const t of e){const e=t.protocol,n=t.transport,i={urls:`${e}:${d.TURN_HOST}:${d.TURN_PORT}?transport=${n}`,url:`${e}:${d.TURN_HOST}:${d.TURN_PORT}?transport=${n}`,username:r,credential:o};this._pcConfig.iceServers.push(i)}h.log("SkyWay TURN Server is available")}else h.log("SkyWay TURN Server is unavailable");this.emit(Z.EVENTS.open.key,this.id)}),this.socket.on(d.MESSAGE_TYPES.SERVER.ERROR.key,e=>{const t=new Error(e.message);t.type=e.type,h.error(t),this.emit(Z.EVENTS.error.key,t)}),this.socket.on(d.MESSAGE_TYPES.SERVER.LEAVE.key,e=>{h.log(`Received leave message from ${e}`),this._cleanupPeer(e)}),this.socket.on(d.MESSAGE_TYPES.SERVER.AUTH_EXPIRES_IN.key,e=>{h.log(`Credential expires in ${e}`),this.emit(Z.EVENTS.expiresin.key,e)}),this.socket.on(d.MESSAGE_TYPES.SERVER.OFFER.key,e=>{const t=e.roomName;if(t){const n=this.rooms[t];return void(n&&n.handleOffer(e))}const n=e.connectionId;let r=this.getConnection(e.src,n);r?r.updateOffer(e):("media"===e.connectionType?((r=new D(e.src,{connectionId:n,payload:e,metadata:e.metadata,originator:!1,queuedMessages:this._queuedMessages[n],pcConfig:this._pcConfig})).startConnection(),h.log("MediaConnection created in OFFER"),this._addConnection(e.src,r),this.emit(Z.EVENTS.call.key,r)):"data"===e.connectionType?((r=new I(e.src,{connectionId:n,payload:e,metadata:e.metadata,label:e.label,dcInit:e.dcInit,serialization:e.serialization,queuedMessages:this._queuedMessages[n],pcConfig:this._pcConfig})).startConnection(),h.log("DataConnection created in OFFER"),this._addConnection(e.src,r),this.emit(Z.EVENTS.connection.key,r)):h.warn("Received malformed connection type: ",e.connectionType),delete this._queuedMessages[n])}),this.socket.on(d.MESSAGE_TYPES.SERVER.ANSWER.key,e=>{const t=e.roomName;if(t){const n=this.rooms[t];return void(n&&n.handleAnswer(e))}const n=this.getConnection(e.src,e.connectionId);n?n.handleAnswer(e):this._storeMessage(d.MESSAGE_TYPES.SERVER.ANSWER.key,e)}),this.socket.on(d.MESSAGE_TYPES.SERVER.CANDIDATE.key,e=>{const t=e.roomName;if(t){const n=this.rooms[t];return void(n&&n.handleCandidate(e))}const n=this.getConnection(e.src,e.connectionId);n?n.handleCandidate(e):this._storeMessage(d.MESSAGE_TYPES.SERVER.CANDIDATE.key,e)}),this.socket.on(d.MESSAGE_TYPES.SERVER.ROOM_USER_JOIN.key,e=>{const t=this.rooms[e.roomName];t&&t.handleJoin(e)}),this.socket.on(d.MESSAGE_TYPES.SERVER.ROOM_USER_LEAVE.key,e=>{const t=this.rooms[e.roomName];t&&t.handleLeave(e)}),this.socket.on(d.MESSAGE_TYPES.SERVER.ROOM_DATA.key,e=>{const t=this.rooms[e.roomName];t&&t.handleData(e)}),this.socket.on(d.MESSAGE_TYPES.SERVER.ROOM_LOGS.key,e=>{const t=this.rooms[e.roomName];t&&t.handleLog(e.log)}),this.socket.on(d.MESSAGE_TYPES.SERVER.ROOM_USERS.key,e=>{const t=this.rooms[e.roomName];t&&("media"===e.type?t.makeMediaConnections(e.userList):t.makeDataConnections(e.userList))}),this.socket.on(d.MESSAGE_TYPES.SERVER.SFU_OFFER.key,e=>{const t=this.rooms[e.roomName];t&&(t.updateMsidMap(e.msids),t.handleOffer(e))})}_setupConnectionMessageHandlers(e){e.on(A.EVENTS.candidate.key,e=>{this.socket.send(d.MESSAGE_TYPES.CLIENT.SEND_CANDIDATE.key,e)}),e.on(A.EVENTS.answer.key,e=>{this.socket.send(d.MESSAGE_TYPES.CLIENT.SEND_ANSWER.key,e)}),e.on(A.EVENTS.offer.key,e=>{this.socket.send(d.MESSAGE_TYPES.CLIENT.SEND_OFFER.key,e)})}_setupRoomMessageHandlers(e){e.on(Y.MESSAGE_EVENTS.broadcast.key,e=>{this.socket.send(d.MESSAGE_TYPES.CLIENT.ROOM_SEND_DATA.key,e)}),e.on(Y.MESSAGE_EVENTS.getLog.key,e=>{this.socket.send(d.MESSAGE_TYPES.CLIENT.ROOM_GET_LOGS.key,e)}),e.on(Y.MESSAGE_EVENTS.leave.key,t=>{delete this.rooms[e.name],this.socket.send(d.MESSAGE_TYPES.CLIENT.ROOM_LEAVE.key,t)})}_setupSFURoomMessageHandlers(e){this._setupRoomMessageHandlers(e),e.on(Y.MESSAGE_EVENTS.offerRequest.key,e=>{this.socket.send(d.MESSAGE_TYPES.CLIENT.SFU_GET_OFFER.key,e)}),e.on(Y.MESSAGE_EVENTS.answer.key,e=>{this.socket.send(d.MESSAGE_TYPES.CLIENT.SFU_ANSWER.key,e)}),e.on(Y.MESSAGE_EVENTS.candidate.key,e=>{this.socket.send(d.MESSAGE_TYPES.CLIENT.SFU_CANDIDATE.key,e)})}_setupMeshRoomMessageHandlers(e){this._setupRoomMessageHandlers(e),e.on(X.MESSAGE_EVENTS.offer.key,e=>{this.socket.send(d.MESSAGE_TYPES.CLIENT.SEND_OFFER.key,e)}),e.on(X.MESSAGE_EVENTS.answer.key,e=>{this.socket.send(d.MESSAGE_TYPES.CLIENT.SEND_ANSWER.key,e)}),e.on(X.MESSAGE_EVENTS.candidate.key,e=>{this.socket.send(d.MESSAGE_TYPES.CLIENT.SEND_CANDIDATE.key,e)}),e.on(X.MESSAGE_EVENTS.getPeers.key,e=>{this.socket.send(d.MESSAGE_TYPES.CLIENT.ROOM_GET_USERS.key,e)})}_abort(e,t){h.error("Aborting!"),this.disconnect();const n=new Error(t);n.type=e,h.error(n),this.emit(Z.EVENTS.error.key,n)}_addConnection(e,t){this.connections[e]||(this.connections[e]=[]),this.connections[e].push(t),this._setupConnectionMessageHandlers(t)}_storeMessage(e,t){this._queuedMessages[t.connectionId]||(this._queuedMessages[t.connectionId]=[]),this._queuedMessages[t.connectionId].push({type:e,payload:t})}_cleanup(){if(this.connections)for(const e of Object.keys(this.connections))this._cleanupPeer(e);this.emit(Z.EVENTS.close.key)}_cleanupPeer(e){if(this.connections[e])for(const t of this.connections[e])t.close()}static get EVENTS(){return Q}}t.default=Z},0:
/*!********************!*\
  !*** ws (ignored) ***!
  \********************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){}}).default})},function(e,t,n){var r=n(73),o=n(75),i=n(92),s=n(93);function a(e,t,n,i,s){var a=[].slice.call(arguments,1),u=a.length,c="function"==typeof a[u-1];if(!c&&!r())throw new Error("Callback required as last argument");if(!c){if(u<1)throw new Error("Too few arguments provided");return 1===u?(n=t,t=i=void 0):2!==u||t.getContext||(i=n,n=t,t=void 0),new Promise(function(r,s){try{var a=o.create(n,i);r(e(a,t,i))}catch(e){s(e)}})}if(u<2)throw new Error("Too few arguments provided");2===u?(s=n,n=t,t=i=void 0):3===u&&(t.getContext&&void 0===s?(s=i,i=void 0):(s=i,i=n,n=t,t=void 0));try{var l=o.create(n,i);s(null,e(l,t,i))}catch(e){s(e)}}t.create=o.create,t.toCanvas=a.bind(null,i.render),t.toDataURL=a.bind(null,i.renderToDataURL),t.toString=a.bind(null,function(e,t,n){return s.render(e,n)})},function(e,t,n){var r=n(96);e.exports=h,e.exports.parse=i,e.exports.compile=function(e,t){return u(i(e,t))},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,s=0,a="",u=t&&t.delimiter||"/";null!=(n=o.exec(e));){var d=n[0],f=n[1],p=n.index;if(a+=e.slice(s,p),s=p+d.length,f)a+=f[1];else{var h=e[s],m=n[2],g=n[3],y=n[4],v=n[5],b=n[6],_=n[7];a&&(r.push(a),a="");var w=null!=m&&null!=h&&h!==m,E="+"===b||"*"===b,k="?"===b||"*"===b,S=n[2]||u,x=y||v;r.push({name:g||i++,prefix:m||"",delimiter:S,optional:k,repeat:E,partial:w,asterisk:!!_,pattern:x?l(x):_?".*":"[^"+c(S)+"]+?"})}}return s<e.length&&(a+=e.substr(s)),a&&r.push(a),r}function s(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function a(e){return encodeURI(e).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function u(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var i="",u=n||{},c=(o||{}).pretty?s:encodeURIComponent,l=0;l<e.length;l++){var d=e[l];if("string"!=typeof d){var f,p=u[d.name];if(null==p){if(d.optional){d.partial&&(i+=d.prefix);continue}throw new TypeError('Expected "'+d.name+'" to be defined')}if(r(p)){if(!d.repeat)throw new TypeError('Expected "'+d.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(d.optional)continue;throw new TypeError('Expected "'+d.name+'" to not be empty')}for(var h=0;h<p.length;h++){if(f=c(p[h]),!t[l].test(f))throw new TypeError('Expected all "'+d.name+'" to match "'+d.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===h?d.prefix:d.delimiter)+f}}else{if(f=d.asterisk?a(p):c(p),!t[l].test(f))throw new TypeError('Expected "'+d.name+'" to match "'+d.pattern+'", but received "'+f+'"');i+=d.prefix+f}}else i+=d}return i}}function c(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function l(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function d(e,t){return e.keys=t,e}function f(e){return e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,s="",a=0;a<e.length;a++){var u=e[a];if("string"==typeof u)s+=c(u);else{var l=c(u.prefix),p="(?:"+u.pattern+")";t.push(u),u.repeat&&(p+="(?:"+l+p+")*"),s+=p=u.optional?u.partial?l+"("+p+")?":"(?:"+l+"("+p+"))?":l+"("+p+")"}}var h=c(n.delimiter||"/"),m=s.slice(-h.length)===h;return o||(s=(m?s.slice(0,-h.length):s)+"(?:"+h+"(?=$))?"),s+=i?"$":o&&m?"":"(?="+h+"|$)",d(new RegExp("^"+s,f(n)),t)}function h(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return d(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(h(e[o],t,n).source);return d(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return p(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";
/** @license React v16.4.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(14),o=n(0),i=n(35),s=n(15),a=n(17),u=n(36),c=n(37),l=n(38),d=n(16);function f(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||f("227");var p={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,i,s,a,u){(function(e,t,n,r,o,i,s,a,u){this._hasCaughtError=!1,this._caughtError=null;var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(p,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,i,s,a,u){if(p.invokeGuardedCallback.apply(this,arguments),p.hasCaughtError()){var c=p.clearCaughtError();p._hasRethrowError||(p._hasRethrowError=!0,p._rethrowError=c)}},rethrowCaughtError:function(){return function(){if(p._hasRethrowError){var e=p._rethrowError;throw p._rethrowError=null,p._hasRethrowError=!1,e}}.apply(p,arguments)},hasCaughtError:function(){return p._hasCaughtError},clearCaughtError:function(){if(p._hasCaughtError){var e=p._caughtError;return p._caughtError=null,p._hasCaughtError=!1,e}f("198")}};var h=null,m={};function g(){if(h)for(var e in m){var t=m[e],n=h.indexOf(e);if(-1<n||f("96",e),!v[n])for(var r in t.extractEvents||f("97",e),v[n]=t,n=t.eventTypes){var o=void 0,i=n[r],s=t,a=r;b.hasOwnProperty(a)&&f("99",a),b[a]=i;var u=i.phasedRegistrationNames;if(u){for(o in u)u.hasOwnProperty(o)&&y(u[o],s,a);o=!0}else i.registrationName?(y(i.registrationName,s,a),o=!0):o=!1;o||f("98",r,e)}}}function y(e,t,n){_[e]&&f("100",e),_[e]=t,w[e]=t.eventTypes[n].dependencies}var v=[],b={},_={},w={};function E(e){h&&f("101"),h=Array.prototype.slice.call(e),g()}function k(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];m.hasOwnProperty(t)&&m[t]===r||(m[t]&&f("102",t),m[t]=r,n=!0)}n&&g()}var S={plugins:v,eventNameDispatchConfigs:b,registrationNameModules:_,registrationNameDependencies:w,possibleRegistrationNames:null,injectEventPluginOrder:E,injectEventPluginsByName:k},x=null,T=null,C=null;function A(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=C(r),p.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function R(e,t){return null==t&&f("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function P(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var O=null;function N(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)A(e,t,n[o],r[o]);else n&&A(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function M(e){return N(e,!0)}function B(e){return N(e,!1)}var j={injectEventPluginOrder:E,injectEventPluginsByName:k};function I(e,t){var n=e.stateNode;if(!n)return null;var r=x(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&f("231",t,typeof n),n)}function L(e,t){null!==e&&(O=R(O,e)),e=O,O=null,e&&(P(e,t?M:B),O&&f("95"),p.rethrowCaughtError())}function U(e,t,n,r){for(var o=null,i=0;i<v.length;i++){var s=v[i];s&&(s=s.extractEvents(e,t,n,r))&&(o=R(o,s))}L(o,!1)}var D={injection:j,getListener:I,runEventsInBatch:L,runExtractedEventsInBatch:U},F=Math.random().toString(36).slice(2),V="__reactInternalInstance$"+F,z="__reactEventHandlers$"+F;function q(e){if(e[V])return e[V];for(;!e[V];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[V]).tag||6===e.tag?e:null}function H(e){if(5===e.tag||6===e.tag)return e.stateNode;f("33")}function W(e){return e[z]||null}var $={precacheFiberNode:function(e,t){t[V]=e},getClosestInstanceFromNode:q,getInstanceFromNode:function(e){return!(e=e[V])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:H,getFiberCurrentPropsFromNode:W,updateFiberProps:function(e,t){e[z]=t}};function Y(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function G(e,t,n){for(var r=[];e;)r.push(e),e=Y(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function K(e,t,n){(t=I(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=R(n._dispatchListeners,t),n._dispatchInstances=R(n._dispatchInstances,e))}function J(e){e&&e.dispatchConfig.phasedRegistrationNames&&G(e._targetInst,K,e)}function X(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;G(t=t?Y(t):null,K,e)}}function Q(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=I(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=R(n._dispatchListeners,t),n._dispatchInstances=R(n._dispatchInstances,e))}function Z(e){e&&e.dispatchConfig.registrationName&&Q(e._targetInst,null,e)}function ee(e){P(e,J)}function te(e,t,n,r){if(n&&r)e:{for(var o=n,i=r,s=0,a=o;a;a=Y(a))s++;a=0;for(var u=i;u;u=Y(u))a++;for(;0<s-a;)o=Y(o),s--;for(;0<a-s;)i=Y(i),a--;for(;s--;){if(o===i||o===i.alternate)break e;o=Y(o),i=Y(i)}o=null}else o=null;for(i=o,o=[];n&&n!==i&&(null===(s=n.alternate)||s!==i);)o.push(n),n=Y(n);for(n=[];r&&r!==i&&(null===(s=r.alternate)||s!==i);)n.push(r),r=Y(r);for(r=0;r<o.length;r++)Q(o[r],"bubbled",e);for(e=n.length;0<e--;)Q(n[e],"captured",t)}var ne={accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){P(e,X)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){P(e,Z)}};function re(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var oe={animationend:re("Animation","AnimationEnd"),animationiteration:re("Animation","AnimationIteration"),animationstart:re("Animation","AnimationStart"),transitionend:re("Transition","TransitionEnd")},ie={},se={};function ae(e){if(ie[e])return ie[e];if(!oe[e])return e;var t,n=oe[e];for(t in n)if(n.hasOwnProperty(t)&&t in se)return ie[e]=n[t];return e}i.canUseDOM&&(se=document.createElement("div").style,"AnimationEvent"in window||(delete oe.animationend.animation,delete oe.animationiteration.animation,delete oe.animationstart.animation),"TransitionEvent"in window||delete oe.transitionend.transition);var ue=ae("animationend"),ce=ae("animationiteration"),le=ae("animationstart"),de=ae("transitionend"),fe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),pe=null;function he(){return!pe&&i.canUseDOM&&(pe="textContent"in document.documentElement?"textContent":"innerText"),pe}var me={_root:null,_startText:null,_fallbackText:null};function ge(){if(me._fallbackText)return me._fallbackText;var e,t,n=me._startText,r=n.length,o=ye(),i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var s=r-e;for(t=1;t<=s&&n[r-t]===o[i-t];t++);return me._fallbackText=o.slice(e,1<t?1-t:void 0),me._fallbackText}function ye(){return"value"in me._root?me._root.value:me._root[he()]}var ve="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),be={type:null,target:null,currentTarget:a.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function _e(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?a.thatReturnsTrue:a.thatReturnsFalse,this.isPropagationStopped=a.thatReturnsFalse,this}function we(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function Ee(e){e instanceof this||f("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function ke(e){e.eventPool=[],e.getPooled=we,e.release=Ee}s(_e.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=a.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=a.thatReturnsTrue)},persist:function(){this.isPersistent=a.thatReturnsTrue},isPersistent:a.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<ve.length;t++)this[ve[t]]=null}}),_e.Interface=be,_e.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return s(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=s({},r.Interface,e),n.extend=r.extend,ke(n),n},ke(_e);var Se=_e.extend({data:null}),xe=_e.extend({data:null}),Te=[9,13,27,32],Ce=i.canUseDOM&&"CompositionEvent"in window,Ae=null;i.canUseDOM&&"documentMode"in document&&(Ae=document.documentMode);var Re=i.canUseDOM&&"TextEvent"in window&&!Ae,Pe=i.canUseDOM&&(!Ce||Ae&&8<Ae&&11>=Ae),Oe=String.fromCharCode(32),Ne={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Me=!1;function Be(e,t){switch(e){case"keyup":return-1!==Te.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function je(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ie=!1;var Le={eventTypes:Ne,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(Ce)e:{switch(e){case"compositionstart":o=Ne.compositionStart;break e;case"compositionend":o=Ne.compositionEnd;break e;case"compositionupdate":o=Ne.compositionUpdate;break e}o=void 0}else Ie?Be(e,n)&&(o=Ne.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=Ne.compositionStart);return o?(Pe&&(Ie||o!==Ne.compositionStart?o===Ne.compositionEnd&&Ie&&(i=ge()):(me._root=r,me._startText=ye(),Ie=!0)),o=Se.getPooled(o,t,n,r),i?o.data=i:null!==(i=je(n))&&(o.data=i),ee(o),i=o):i=null,(e=Re?function(e,t){switch(e){case"compositionend":return je(t);case"keypress":return 32!==t.which?null:(Me=!0,Oe);case"textInput":return(e=t.data)===Oe&&Me?null:e;default:return null}}(e,n):function(e,t){if(Ie)return"compositionend"===e||!Ce&&Be(e,t)?(e=ge(),me._root=null,me._startText=null,me._fallbackText=null,Ie=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Pe?null:t.data;default:return null}}(e,n))?((t=xe.getPooled(Ne.beforeInput,t,n,r)).data=e,ee(t)):t=null,null===i?t:null===t?i:[i,t]}},Ue=null,De={injectFiberControlledHostComponent:function(e){Ue=e}},Fe=null,Ve=null;function ze(e){if(e=T(e)){Ue&&"function"==typeof Ue.restoreControlledState||f("194");var t=x(e.stateNode);Ue.restoreControlledState(e.stateNode,e.type,t)}}function qe(e){Fe?Ve?Ve.push(e):Ve=[e]:Fe=e}function He(){return null!==Fe||null!==Ve}function We(){if(Fe){var e=Fe,t=Ve;if(Ve=Fe=null,ze(e),t)for(e=0;e<t.length;e++)ze(t[e])}}var $e={injection:De,enqueueStateRestore:qe,needsStateRestore:He,restoreStateIfNeeded:We};function Ye(e,t){return e(t)}function Ge(e,t,n){return e(t,n)}function Ke(){}var Je=!1;function Xe(e,t){if(Je)return e(t);Je=!0;try{return Ye(e,t)}finally{Je=!1,He()&&(Ke(),We())}}var Qe={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ze(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Qe[e.type]:"textarea"===t}function et(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function tt(e,t){return!(!i.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function nt(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function rt(e){e._valueTracker||(e._valueTracker=function(e){var t=nt(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ot(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=nt(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var it=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,st="function"==typeof Symbol&&Symbol.for,at=st?Symbol.for("react.element"):60103,ut=st?Symbol.for("react.portal"):60106,ct=st?Symbol.for("react.fragment"):60107,lt=st?Symbol.for("react.strict_mode"):60108,dt=st?Symbol.for("react.profiler"):60114,ft=st?Symbol.for("react.provider"):60109,pt=st?Symbol.for("react.context"):60110,ht=st?Symbol.for("react.async_mode"):60111,mt=st?Symbol.for("react.forward_ref"):60112,gt=st?Symbol.for("react.timeout"):60113,yt="function"==typeof Symbol&&Symbol.iterator;function vt(e){return null===e||void 0===e?null:"function"==typeof(e=yt&&e[yt]||e["@@iterator"])?e:null}function bt(e){var t=e.type;if("function"==typeof t)return t.displayName||t.name;if("string"==typeof t)return t;switch(t){case ht:return"AsyncMode";case pt:return"Context.Consumer";case ct:return"ReactFragment";case ut:return"ReactPortal";case dt:return"Profiler("+e.pendingProps.id+")";case ft:return"Context.Provider";case lt:return"StrictMode";case gt:return"Timeout"}if("object"==typeof t&&null!==t)switch(t.$$typeof){case mt:return""!==(e=t.render.displayName||t.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function _t(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=bt(e),i=null;n&&(i=bt(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var wt=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Et=Object.prototype.hasOwnProperty,kt={},St={};function xt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var Tt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){Tt[e]=new xt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];Tt[t]=new xt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){Tt[e]=new xt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){Tt[e]=new xt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){Tt[e]=new xt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){Tt[e]=new xt(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){Tt[e]=new xt(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){Tt[e]=new xt(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){Tt[e]=new xt(e,5,!1,e.toLowerCase(),null)});var Ct=/[\-:]([a-z])/g;function At(e){return e[1].toUpperCase()}function Rt(e,t,n,r){var o=Tt.hasOwnProperty(t)?Tt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!Et.call(St,e)||!Et.call(kt,e)&&(wt.test(e)?St[e]=!0:(kt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function Pt(e,t){var n=t.checked;return s({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Ot(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=It(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Nt(e,t){null!=(t=t.checked)&&Rt(e,"checked",t,!1)}function Mt(e,t){Nt(e,t);var n=It(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?jt(e,t.type,n):t.hasOwnProperty("defaultValue")&&jt(e,t.type,It(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Bt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){t=""+e._wrapperState.initialValue;var r=e.value;n||t===r||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==n&&(e.name=n)}function jt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function It(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Ct,At);Tt[t]=new xt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Ct,At);Tt[t]=new xt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Ct,At);Tt[t]=new xt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),Tt.tabIndex=new xt("tabIndex",1,!1,"tabindex",null);var Lt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Ut(e,t,n){return(e=_e.getPooled(Lt.change,e,t,n)).type="change",qe(n),ee(e),e}var Dt=null,Ft=null;function Vt(e){L(e,!1)}function zt(e){if(ot(H(e)))return e}function qt(e,t){if("change"===e)return t}var Ht=!1;function Wt(){Dt&&(Dt.detachEvent("onpropertychange",$t),Ft=Dt=null)}function $t(e){"value"===e.propertyName&&zt(Ft)&&Xe(Vt,e=Ut(Ft,e,et(e)))}function Yt(e,t,n){"focus"===e?(Wt(),Ft=n,(Dt=t).attachEvent("onpropertychange",$t)):"blur"===e&&Wt()}function Gt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return zt(Ft)}function Kt(e,t){if("click"===e)return zt(t)}function Jt(e,t){if("input"===e||"change"===e)return zt(t)}i.canUseDOM&&(Ht=tt("input")&&(!document.documentMode||9<document.documentMode));var Xt={eventTypes:Lt,_isInputEventSupported:Ht,extractEvents:function(e,t,n,r){var o=t?H(t):window,i=void 0,s=void 0,a=o.nodeName&&o.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===o.type?i=qt:Ze(o)?Ht?i=Jt:(i=Gt,s=Yt):(a=o.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Kt),i&&(i=i(e,t)))return Ut(i,n,r);s&&s(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&jt(o,"number",o.value)}},Qt=_e.extend({view:null,detail:null}),Zt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function en(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Zt[e])&&!!t[e]}function tn(){return en}var nn=Qt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:tn,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),rn=nn.extend({pointerId:null,width:null,height:null,pressure:null,tiltX:null,tiltY:null,pointerType:null,isPrimary:null}),on={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},sn={eventTypes:on,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?q(t):null):i=null,i===t)return null;var s=void 0,a=void 0,u=void 0,c=void 0;return"mouseout"===e||"mouseover"===e?(s=nn,a=on.mouseLeave,u=on.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(s=rn,a=on.pointerLeave,u=on.pointerEnter,c="pointer"),e=null==i?o:H(i),o=null==t?o:H(t),(a=s.getPooled(a,i,n,r)).type=c+"leave",a.target=e,a.relatedTarget=o,(n=s.getPooled(u,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=e,te(a,n,i,t),[a,n]}};function an(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function un(e){2!==an(e)&&f("188")}function cn(e){var t=e.alternate;if(!t)return 3===(t=an(e))&&f("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var s=o.child;s;){if(s===n)return un(o),e;if(s===r)return un(o),t;s=s.sibling}f("188")}if(n.return!==r.return)n=o,r=i;else{s=!1;for(var a=o.child;a;){if(a===n){s=!0,n=o,r=i;break}if(a===r){s=!0,r=o,n=i;break}a=a.sibling}if(!s){for(a=i.child;a;){if(a===n){s=!0,n=i,r=o;break}if(a===r){s=!0,r=i,n=o;break}a=a.sibling}s||f("189")}}n.alternate!==r&&f("190")}return 3!==n.tag&&f("188"),n.stateNode.current===n?e:t}function ln(e){if(!(e=cn(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var dn=_e.extend({animationName:null,elapsedTime:null,pseudoElement:null}),fn=_e.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),pn=Qt.extend({relatedTarget:null});function hn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var mn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},gn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},yn=Qt.extend({key:function(e){if(e.key){var t=mn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=hn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?gn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:tn,charCode:function(e){return"keypress"===e.type?hn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?hn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),vn=nn.extend({dataTransfer:null}),bn=Qt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:tn}),_n=_e.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),wn=nn.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),En=[["abort","abort"],[ue,"animationEnd"],[ce,"animationIteration"],[le,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[de,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],kn={},Sn={};function xn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},kn[e]=t,Sn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){xn(e,!0)}),En.forEach(function(e){xn(e,!1)});var Tn={eventTypes:kn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=Sn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=Sn[e];if(!o)return null;switch(e){case"keypress":if(0===hn(n))return null;case"keydown":case"keyup":e=yn;break;case"blur":case"focus":e=pn;break;case"click":if(2===n.button)return null;case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=nn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=bn;break;case ue:case ce:case le:e=dn;break;case de:e=_n;break;case"scroll":e=Qt;break;case"wheel":e=wn;break;case"copy":case"cut":case"paste":e=fn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=rn;break;default:e=_e}return ee(t=e.getPooled(o,t,n,r)),t}},Cn=Tn.isInteractiveTopLevelEventType,An=[];function Rn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=q(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],U(e.topLevelType,t,e.nativeEvent,et(e.nativeEvent))}var Pn=!0;function On(e){Pn=!!e}function Nn(e,t){if(!t)return null;var n=(Cn(e)?Bn:jn).bind(null,e);t.addEventListener(e,n,!1)}function Mn(e,t){if(!t)return null;var n=(Cn(e)?Bn:jn).bind(null,e);t.addEventListener(e,n,!0)}function Bn(e,t){Ge(jn,e,t)}function jn(e,t){if(Pn){var n=et(t);if(null===(n=q(n))||"number"!=typeof n.tag||2===an(n)||(n=null),An.length){var r=An.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Xe(Rn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>An.length&&An.push(e)}}}var In={get _enabled(){return Pn},setEnabled:On,isEnabled:function(){return Pn},trapBubbledEvent:Nn,trapCapturedEvent:Mn,dispatchEvent:jn},Ln={},Un=0,Dn="_reactListenersID"+(""+Math.random()).slice(2);function Fn(e){return Object.prototype.hasOwnProperty.call(e,Dn)||(e[Dn]=Un++,Ln[e[Dn]]={}),Ln[e[Dn]]}function Vn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function zn(e,t){var n,r=Vn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Vn(r)}}function qn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Hn=i.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Wn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu focus keydown keyup mousedown mouseup selectionchange".split(" ")}},$n=null,Yn=null,Gn=null,Kn=!1;function Jn(e,t){if(Kn||null==$n||$n!==u())return null;var n=$n;return"selectionStart"in n&&qn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Gn&&c(Gn,n)?null:(Gn=n,(e=_e.getPooled(Wn.select,Yn,e,t)).type="select",e.target=$n,ee(e),e)}var Xn={eventTypes:Wn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=Fn(i),o=w.onSelect;for(var s=0;s<o.length;s++){var a=o[s];if(!i.hasOwnProperty(a)||!i[a]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?H(t):window,e){case"focus":(Ze(i)||"true"===i.contentEditable)&&($n=i,Yn=t,Gn=null);break;case"blur":Gn=Yn=$n=null;break;case"mousedown":Kn=!0;break;case"contextmenu":case"mouseup":return Kn=!1,Jn(n,r);case"selectionchange":if(Hn)break;case"keydown":case"keyup":return Jn(n,r)}return null}};j.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x=$.getFiberCurrentPropsFromNode,T=$.getInstanceFromNode,C=$.getNodeFromInstance,j.injectEventPluginsByName({SimpleEventPlugin:Tn,EnterLeaveEventPlugin:sn,ChangeEventPlugin:Xt,SelectEventPlugin:Xn,BeforeInputEventPlugin:Le});var Qn="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,Zn=Date,er=setTimeout,tr=clearTimeout,nr=void 0;if("object"==typeof performance&&"function"==typeof performance.now){var rr=performance;nr=function(){return rr.now()}}else nr=function(){return Zn.now()};var or=void 0,ir=void 0;if(i.canUseDOM){var sr="function"==typeof Qn?Qn:function(){f("276")},ar=null,ur=null,cr=-1,lr=!1,dr=!1,fr=0,pr=33,hr=33,mr={didTimeout:!1,timeRemaining:function(){var e=fr-nr();return 0<e?e:0}},gr=function(e,t){var n=e.scheduledCallback,r=!1;try{n(t),r=!0}finally{ir(e),r||(lr=!0,window.postMessage(yr,"*"))}},yr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===yr&&(lr=!1,null!==ar)){if(null!==ar){var t=nr();if(!(-1===cr||cr>t)){e=-1;for(var n=[],r=ar;null!==r;){var o=r.timeoutTime;-1!==o&&o<=t?n.push(r):-1!==o&&(-1===e||o<e)&&(e=o),r=r.next}if(0<n.length)for(mr.didTimeout=!0,t=0,r=n.length;t<r;t++)gr(n[t],mr);cr=e}}for(e=nr();0<fr-e&&null!==ar;)e=ar,mr.didTimeout=!1,gr(e,mr),e=nr();null===ar||dr||(dr=!0,sr(vr))}},!1);var vr=function(e){dr=!1;var t=e-fr+hr;t<hr&&pr<hr?(8>t&&(t=8),hr=t<pr?pr:t):pr=t,fr=e+hr,lr||(lr=!0,window.postMessage(yr,"*"))};or=function(e,t){var n=-1;return null!=t&&"number"==typeof t.timeout&&(n=nr()+t.timeout),(-1===cr||-1!==n&&n<cr)&&(cr=n),e={scheduledCallback:e,timeoutTime:n,prev:null,next:null},null===ar?ar=e:null!==(t=e.prev=ur)&&(t.next=e),ur=e,dr||(dr=!0,sr(vr)),e},ir=function(e){if(null!==e.prev||ar===e){var t=e.next,n=e.prev;e.next=null,e.prev=null,null!==t?null!==n?(n.next=t,t.prev=n):(t.prev=null,ar=t):null!==n?(n.next=null,ur=n):ur=ar=null}}}else{var br=new Map;or=function(e){var t={scheduledCallback:e,timeoutTime:0,next:null,prev:null},n=er(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})});return br.set(e,n),t},ir=function(e){var t=br.get(e.scheduledCallback);br.delete(e),tr(t)}}function _r(e,t){return e=s({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function wr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Er(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function kr(e,t){return null!=t.dangerouslySetInnerHTML&&f("91"),s({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Sr(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&f("92"),Array.isArray(t)&&(1>=t.length||f("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function xr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Tr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var Cr={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Ar(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Rr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ar(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Pr=void 0,Or=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==Cr.svg||"innerHTML"in e)e.innerHTML=t;else{for((Pr=Pr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Pr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function Nr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var Mr={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Br=["Webkit","ms","Moz","O"];function jr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=t[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||Mr.hasOwnProperty(o)&&Mr[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Mr).forEach(function(e){Br.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Mr[t]=Mr[e]})});var Ir=s({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Lr(e,t,n){t&&(Ir[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&f("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&f("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||f("61")),null!=t.style&&"object"!=typeof t.style&&f("62",n()))}function Ur(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Dr=a.thatReturns("");function Fr(e,t){var n=Fn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=w[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Mn("scroll",e);break;case"focus":case"blur":Mn("focus",e),Mn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":tt(o,!0)&&Mn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===fe.indexOf(o)&&Nn(o,e)}n[o]=!0}}}function Vr(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===Cr.html&&(r=Ar(e)),r===Cr.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function zr(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function qr(e,t,n,r){var o=Ur(t,n);switch(t){case"iframe":case"object":Nn("load",e);var i=n;break;case"video":case"audio":for(i=0;i<fe.length;i++)Nn(fe[i],e);i=n;break;case"source":Nn("error",e),i=n;break;case"img":case"image":case"link":Nn("error",e),Nn("load",e),i=n;break;case"form":Nn("reset",e),Nn("submit",e),i=n;break;case"details":Nn("toggle",e),i=n;break;case"input":Ot(e,n),i=Pt(e,n),Nn("invalid",e),Fr(r,"onChange");break;case"option":i=_r(e,n);break;case"select":Er(e,n),i=s({},n,{value:void 0}),Nn("invalid",e),Fr(r,"onChange");break;case"textarea":Sr(e,n),i=kr(e,n),Nn("invalid",e),Fr(r,"onChange");break;default:i=n}Lr(t,i,Dr);var u,c=i;for(u in c)if(c.hasOwnProperty(u)){var l=c[u];"style"===u?jr(e,l):"dangerouslySetInnerHTML"===u?null!=(l=l?l.__html:void 0)&&Or(e,l):"children"===u?"string"==typeof l?("textarea"!==t||""!==l)&&Nr(e,l):"number"==typeof l&&Nr(e,""+l):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(_.hasOwnProperty(u)?null!=l&&Fr(r,u):null!=l&&Rt(e,u,l,o))}switch(t){case"input":rt(e),Bt(e,n,!1);break;case"textarea":rt(e),Tr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?wr(e,!!n.multiple,t,!1):null!=n.defaultValue&&wr(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=a)}}function Hr(e,t,n,r,o){var i=null;switch(t){case"input":n=Pt(e,n),r=Pt(e,r),i=[];break;case"option":n=_r(e,n),r=_r(e,r),i=[];break;case"select":n=s({},n,{value:void 0}),r=s({},r,{value:void 0}),i=[];break;case"textarea":n=kr(e,n),r=kr(e,r),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=a)}Lr(t,r,Dr),t=e=void 0;var u=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var c=n[e];for(t in c)c.hasOwnProperty(t)&&(u||(u={}),u[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(_.hasOwnProperty(e)?i||(i=[]):(i=i||[]).push(e,null));for(e in r){var l=r[e];if(c=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&l!==c&&(null!=l||null!=c))if("style"===e)if(c){for(t in c)!c.hasOwnProperty(t)||l&&l.hasOwnProperty(t)||(u||(u={}),u[t]="");for(t in l)l.hasOwnProperty(t)&&c[t]!==l[t]&&(u||(u={}),u[t]=l[t])}else u||(i||(i=[]),i.push(e,u)),u=l;else"dangerouslySetInnerHTML"===e?(l=l?l.__html:void 0,c=c?c.__html:void 0,null!=l&&c!==l&&(i=i||[]).push(e,""+l)):"children"===e?c===l||"string"!=typeof l&&"number"!=typeof l||(i=i||[]).push(e,""+l):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(_.hasOwnProperty(e)?(null!=l&&Fr(o,e),i||c===l||(i=[])):(i=i||[]).push(e,l))}return u&&(i=i||[]).push("style",u),i}function Wr(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&Nt(e,o),Ur(n,r),r=Ur(n,o);for(var i=0;i<t.length;i+=2){var s=t[i],a=t[i+1];"style"===s?jr(e,a):"dangerouslySetInnerHTML"===s?Or(e,a):"children"===s?Nr(e,a):Rt(e,s,a,r)}switch(n){case"input":Mt(e,o);break;case"textarea":xr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?wr(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?wr(e,!!o.multiple,o.defaultValue,!0):wr(e,!!o.multiple,o.multiple?[]:"",!1))}}function $r(e,t,n,r,o){switch(t){case"iframe":case"object":Nn("load",e);break;case"video":case"audio":for(r=0;r<fe.length;r++)Nn(fe[r],e);break;case"source":Nn("error",e);break;case"img":case"image":case"link":Nn("error",e),Nn("load",e);break;case"form":Nn("reset",e),Nn("submit",e);break;case"details":Nn("toggle",e);break;case"input":Ot(e,n),Nn("invalid",e),Fr(o,"onChange");break;case"select":Er(e,n),Nn("invalid",e),Fr(o,"onChange");break;case"textarea":Sr(e,n),Nn("invalid",e),Fr(o,"onChange")}for(var i in Lr(t,n,Dr),r=null,n)if(n.hasOwnProperty(i)){var s=n[i];"children"===i?"string"==typeof s?e.textContent!==s&&(r=["children",s]):"number"==typeof s&&e.textContent!==""+s&&(r=["children",""+s]):_.hasOwnProperty(i)&&null!=s&&Fr(o,i)}switch(t){case"input":rt(e),Bt(e,n,!0);break;case"textarea":rt(e),Tr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=a)}return r}function Yr(e,t){return e.nodeValue!==t}var Gr={createElement:Vr,createTextNode:zr,setInitialProperties:qr,diffProperties:Hr,updateProperties:Wr,diffHydratedProperties:$r,diffHydratedText:Yr,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(Mt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=W(r);o||f("90"),ot(r),Mt(r,o)}}}break;case"textarea":xr(e,n);break;case"select":null!=(t=n.value)&&wr(e,!!n.multiple,t,!1)}}},Kr=null,Jr=null;function Xr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Qr(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html}var Zr=nr,eo=or,to=ir;function no(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function ro(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var oo=[],io=-1;function so(e){return{current:e}}function ao(e){0>io||(e.current=oo[io],oo[io]=null,io--)}function uo(e,t){oo[++io]=e.current,e.current=t}var co=so(d),lo=so(!1),fo=d;function po(e){return mo(e)?fo:co.current}function ho(e,t){var n=e.type.contextTypes;if(!n)return d;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function mo(e){return 2===e.tag&&null!=e.type.childContextTypes}function go(e){mo(e)&&(ao(lo),ao(co))}function yo(e){ao(lo),ao(co)}function vo(e,t,n){co.current!==d&&f("168"),uo(co,t),uo(lo,n)}function bo(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||f("108",bt(e)||"Unknown",o);return s({},t,n)}function _o(e){if(!mo(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||d,fo=co.current,uo(co,t),uo(lo,lo.current),!0}function wo(e,t){var n=e.stateNode;if(n||f("169"),t){var r=bo(e,fo);n.__reactInternalMemoizedMergedChildContext=r,ao(lo),ao(co),uo(co,r)}else ao(lo);uo(lo,t)}function Eo(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function ko(e,t,n){var r=e.alternate;return null===r?((r=new Eo(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function So(e,t,n){var r=e.type,o=e.key;if(e=e.props,"function"==typeof r)var i=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)i=5;else switch(r){case ct:return xo(e.children,t,n,o);case ht:i=11,t|=3;break;case lt:i=11,t|=2;break;case dt:return(r=new Eo(15,e,o,4|t)).type=dt,r.expirationTime=n,r;case gt:i=16,t|=2;break;default:e:{switch("object"==typeof r&&null!==r?r.$$typeof:null){case ft:i=13;break e;case pt:i=12;break e;case mt:i=14;break e;default:f("130",null==r?r:typeof r,"")}i=void 0}}return(t=new Eo(i,e,o,t)).type=r,t.expirationTime=n,t}function xo(e,t,n,r){return(e=new Eo(10,e,r,t)).expirationTime=n,e}function To(e,t,n){return(e=new Eo(6,e,null,t)).expirationTime=n,e}function Co(e,t,n){return(t=new Eo(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ao(e,t,n){return e={current:t=new Eo(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e}var Ro=null,Po=null;function Oo(e){return function(t){try{return e(t)}catch(e){}}}function No(e){"function"==typeof Ro&&Ro(e)}function Mo(e){"function"==typeof Po&&Po(e)}var Bo=!1;function jo(e){return{expirationTime:0,baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Io(e){return{expirationTime:e.expirationTime,baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Lo(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Uo(e,t,n){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t),(0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n)}function Do(e,t,n){var r=e.alternate;if(null===r){var o=e.updateQueue,i=null;null===o&&(o=e.updateQueue=jo(e.memoizedState))}else o=e.updateQueue,i=r.updateQueue,null===o?null===i?(o=e.updateQueue=jo(e.memoizedState),i=r.updateQueue=jo(r.memoizedState)):o=e.updateQueue=Io(i):null===i&&(i=r.updateQueue=Io(o));null===i||o===i?Uo(o,t,n):null===o.lastUpdate||null===i.lastUpdate?(Uo(o,t,n),Uo(i,t,n)):(Uo(o,t,n),i.lastUpdate=t)}function Fo(e,t,n){var r=e.updateQueue;null===(r=null===r?e.updateQueue=jo(e.memoizedState):Vo(e,r)).lastCapturedUpdate?r.firstCapturedUpdate=r.lastCapturedUpdate=t:(r.lastCapturedUpdate.next=t,r.lastCapturedUpdate=t),(0===r.expirationTime||r.expirationTime>n)&&(r.expirationTime=n)}function Vo(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Io(t)),t}function zo(e,t,n,r,o,i){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(i,r,o):e;case 3:e.effectTag=-1025&e.effectTag|64;case 0:if(null===(o="function"==typeof(e=n.payload)?e.call(i,r,o):e)||void 0===o)break;return s({},r,o);case 2:Bo=!0}return r}function qo(e,t,n,r,o){if(Bo=!1,!(0===t.expirationTime||t.expirationTime>o)){for(var i=(t=Vo(e,t)).baseState,s=null,a=0,u=t.firstUpdate,c=i;null!==u;){var l=u.expirationTime;l>o?(null===s&&(s=u,i=c),(0===a||a>l)&&(a=l)):(c=zo(e,0,u,c,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=u:(t.lastEffect.nextEffect=u,t.lastEffect=u))),u=u.next}for(l=null,u=t.firstCapturedUpdate;null!==u;){var d=u.expirationTime;d>o?(null===l&&(l=u,null===s&&(i=c)),(0===a||a>d)&&(a=d)):(c=zo(e,0,u,c,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=u:(t.lastCapturedEffect.nextEffect=u,t.lastCapturedEffect=u))),u=u.next}null===s&&(t.lastUpdate=null),null===l?t.lastCapturedUpdate=null:e.effectTag|=32,null===s&&null===l&&(i=c),t.baseState=i,t.firstUpdate=s,t.firstCapturedUpdate=l,t.expirationTime=a,e.memoizedState=c}}function Ho(e,t){"function"!=typeof e&&f("191",e),e.call(t)}function Wo(e,t,n){for(null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),e=t.firstEffect,t.firstEffect=t.lastEffect=null;null!==e;){var r=e.callback;null!==r&&(e.callback=null,Ho(r,n)),e=e.nextEffect}for(e=t.firstCapturedEffect,t.firstCapturedEffect=t.lastCapturedEffect=null;null!==e;)null!==(t=e.callback)&&(e.callback=null,Ho(t,n)),e=e.nextEffect}function $o(e,t){return{value:e,source:t,stack:_t(t)}}var Yo=so(null),Go=so(null),Ko=so(0);function Jo(e){var t=e.type._context;uo(Ko,t._changedBits),uo(Go,t._currentValue),uo(Yo,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode}function Xo(e){var t=Ko.current,n=Go.current;ao(Yo),ao(Go),ao(Ko),(e=e.type._context)._currentValue=n,e._changedBits=t}var Qo={},Zo=so(Qo),ei=so(Qo),ti=so(Qo);function ni(e){return e===Qo&&f("174"),e}function ri(e,t){uo(ti,t),uo(ei,e),uo(Zo,Qo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Rr(null,"");break;default:t=Rr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}ao(Zo),uo(Zo,t)}function oi(e){ao(Zo),ao(ei),ao(ti)}function ii(e){ei.current===e&&(ao(Zo),ao(ei))}function si(e,t,n){var r=e.memoizedState;r=null===(t=t(n,r))||void 0===t?r:s({},r,t),e.memoizedState=r,null!==(e=e.updateQueue)&&0===e.expirationTime&&(e.baseState=r)}var ai={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===an(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=bs(),o=Lo(r=ys(r,e));o.payload=t,void 0!==n&&null!==n&&(o.callback=n),Do(e,o,r),vs(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=bs(),o=Lo(r=ys(r,e));o.tag=1,o.payload=t,void 0!==n&&null!==n&&(o.callback=n),Do(e,o,r),vs(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=bs(),r=Lo(n=ys(n,e));r.tag=2,void 0!==t&&null!==t&&(r.callback=t),Do(e,r,n),vs(e,n)}};function ui(e,t,n,r,o,i){var s=e.stateNode;return e=e.type,"function"==typeof s.shouldComponentUpdate?s.shouldComponentUpdate(n,o,i):!e.prototype||!e.prototype.isPureReactComponent||(!c(t,n)||!c(r,o))}function ci(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ai.enqueueReplaceState(t,t.state,null)}function li(e,t){var n=e.type,r=e.stateNode,o=e.pendingProps,i=po(e);r.props=o,r.state=e.memoizedState,r.refs=d,r.context=ho(e,i),null!==(i=e.updateQueue)&&(qo(e,i,o,r,t),r.state=e.memoizedState),"function"==typeof(i=e.type.getDerivedStateFromProps)&&(si(e,i,o),r.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(n=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),n!==r.state&&ai.enqueueReplaceState(r,r.state,null),null!==(i=e.updateQueue)&&(qo(e,i,o,r,t),r.state=e.memoizedState)),"function"==typeof r.componentDidMount&&(e.effectTag|=4)}var di=Array.isArray;function fi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&f("110"),r=n.stateNode),r||f("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===d?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&f("148"),n._owner||f("254",e)}return e}function pi(e,t){"textarea"!==e.type&&f("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function hi(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=ko(e,t,n)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function s(t){return e&&null===t.alternate&&(t.effectTag=2),t}function a(e,t,n,r){return null===t||6!==t.tag?((t=To(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function u(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=fi(e,t,n),r.return=e,r):((r=So(n,e.mode,r)).ref=fi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Co(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function l(e,t,n,r,i){return null===t||10!==t.tag?((t=xo(n,e.mode,r,i)).return=e,t):((t=o(t,n,r)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=To(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case at:return(n=So(t,e.mode,n)).ref=fi(e,null,t),n.return=e,n;case ut:return(t=Co(t,e.mode,n)).return=e,t}if(di(t)||vt(t))return(t=xo(t,e.mode,n,null)).return=e,t;pi(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:a(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case at:return n.key===o?n.type===ct?l(e,t,n.props.children,r,o):u(e,t,n,r):null;case ut:return n.key===o?c(e,t,n,r):null}if(di(n)||vt(n))return null!==o?null:l(e,t,n,r,null);pi(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return a(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case at:return e=e.get(null===r.key?n:r.key)||null,r.type===ct?l(t,e,r.props.children,o,r.key):u(t,e,r,o);case ut:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(di(r)||vt(r))return l(t,e=e.get(n)||null,r,o,null);pi(t,r)}return null}function m(o,s,a,u){for(var c=null,l=null,f=s,m=s=0,g=null;null!==f&&m<a.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var y=p(o,f,a[m],u);if(null===y){null===f&&(f=g);break}e&&f&&null===y.alternate&&t(o,f),s=i(y,s,m),null===l?c=y:l.sibling=y,l=y,f=g}if(m===a.length)return n(o,f),c;if(null===f){for(;m<a.length;m++)(f=d(o,a[m],u))&&(s=i(f,s,m),null===l?c=f:l.sibling=f,l=f);return c}for(f=r(o,f);m<a.length;m++)(g=h(f,o,m,a[m],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),s=i(g,s,m),null===l?c=g:l.sibling=g,l=g);return e&&f.forEach(function(e){return t(o,e)}),c}function g(o,s,a,u){var c=vt(a);"function"!=typeof c&&f("150"),null==(a=c.call(a))&&f("151");for(var l=c=null,m=s,g=s=0,y=null,v=a.next();null!==m&&!v.done;g++,v=a.next()){m.index>g?(y=m,m=null):y=m.sibling;var b=p(o,m,v.value,u);if(null===b){m||(m=y);break}e&&m&&null===b.alternate&&t(o,m),s=i(b,s,g),null===l?c=b:l.sibling=b,l=b,m=y}if(v.done)return n(o,m),c;if(null===m){for(;!v.done;g++,v=a.next())null!==(v=d(o,v.value,u))&&(s=i(v,s,g),null===l?c=v:l.sibling=v,l=v);return c}for(m=r(o,m);!v.done;g++,v=a.next())null!==(v=h(m,o,g,v.value,u))&&(e&&null!==v.alternate&&m.delete(null===v.key?g:v.key),s=i(v,s,g),null===l?c=v:l.sibling=v,l=v);return e&&m.forEach(function(e){return t(o,e)}),c}return function(e,r,i,a){var u="object"==typeof i&&null!==i&&i.type===ct&&null===i.key;u&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case at:e:{for(c=i.key,u=r;null!==u;){if(u.key===c){if(10===u.tag?i.type===ct:u.type===i.type){n(e,u.sibling),(r=o(u,i.type===ct?i.props.children:i.props,a)).ref=fi(e,u,i),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}i.type===ct?((r=xo(i.props.children,e.mode,a,i.key)).return=e,e=r):((a=So(i,e.mode,a)).ref=fi(e,r,i),a.return=e,e=a)}return s(e);case ut:e:{for(u=i.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[],a)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Co(i,e.mode,a)).return=e,e=r}return s(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i,a)).return=e,e=r):(n(e,r),(r=To(i,e.mode,a)).return=e,e=r),s(e);if(di(i))return m(e,r,i,a);if(vt(i))return g(e,r,i,a);if(c&&pi(e,i),void 0===i&&!u)switch(e.tag){case 2:case 1:f("152",(a=e.type).displayName||a.name||"Component")}return n(e,r)}}var mi=hi(!0),gi=hi(!1),yi=null,vi=null,bi=!1;function _i(e,t){var n=new Eo(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function wi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Ei(e){if(bi){var t=vi;if(t){var n=t;if(!wi(e,t)){if(!(t=no(n))||!wi(e,t))return e.effectTag|=2,bi=!1,void(yi=e);_i(yi,n)}yi=e,vi=ro(t)}else e.effectTag|=2,bi=!1,yi=e}}function ki(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;yi=e}function Si(e){if(e!==yi)return!1;if(!bi)return ki(e),bi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Qr(t,e.memoizedProps))for(t=vi;t;)_i(e,t),t=no(t);return ki(e),vi=yi?no(e.stateNode):null,!0}function xi(){vi=yi=null,bi=!1}function Ti(e,t,n){Ci(e,t,n,t.expirationTime)}function Ci(e,t,n,r){t.child=null===e?gi(t,null,n,r):mi(t,e.child,n,r)}function Ai(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ri(e,t,n,r,o){Ai(e,t);var i=0!=(64&t.effectTag);if(!n&&!i)return r&&wo(t,!1),Ni(e,t);n=t.stateNode,it.current=t;var s=i?null:n.render();return t.effectTag|=1,i&&(Ci(e,t,null,o),t.child=null),Ci(e,t,s,o),t.memoizedState=n.state,t.memoizedProps=n.props,r&&wo(t,!0),t.child}function Pi(e){var t=e.stateNode;t.pendingContext?vo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&vo(0,t.context,!1),ri(e,t.containerInfo)}function Oi(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var i=0|o.stateNode;if(o.type===t&&0!=(i&n)){for(i=o;null!==i;){var s=i.alternate;if(0===i.expirationTime||i.expirationTime>r)i.expirationTime=r,null!==s&&(0===s.expirationTime||s.expirationTime>r)&&(s.expirationTime=r);else{if(null===s||!(0===s.expirationTime||s.expirationTime>r))break;s.expirationTime=r}i=i.return}i=null}else i=o.child;break;case 13:i=o.type===e.type?null:o.child;break;default:i=o.child}if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}if(null!==(o=i.sibling)){o.return=i.return,i=o;break}i=i.return}o=i}}function Ni(e,t){if(null!==e&&t.child!==e.child&&f("153"),null!==t.child){var n=ko(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=ko(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Mi(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:Pi(t);break;case 2:_o(t);break;case 4:ri(t,t.stateNode.containerInfo);break;case 13:Jo(t)}return null}switch(t.tag){case 0:null!==e&&f("155");var r=t.type,o=t.pendingProps,i=po(t);return r=r(o,i=ho(t,i)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(i=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof(i=i.getDerivedStateFromProps)&&si(t,i,o),o=_o(t),r.updater=ai,t.stateNode=r,r._reactInternalFiber=t,li(t,n),e=Ri(e,t,!0,o,n)):(t.tag=1,Ti(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,lo.current||t.memoizedProps!==n?(o=o(n,r=ho(t,r=po(t))),t.effectTag|=1,Ti(e,t,o),t.memoizedProps=n,e=t.child):e=Ni(e,t),e;case 2:if(o=_o(t),null===e)if(null===t.stateNode){var s=t.pendingProps,a=t.type;r=po(t);var u=2===t.tag&&null!=t.type.contextTypes;s=new a(s,i=u?ho(t,r):d),t.memoizedState=null!==s.state&&void 0!==s.state?s.state:null,s.updater=ai,t.stateNode=s,s._reactInternalFiber=t,u&&((u=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,u.__reactInternalMemoizedMaskedChildContext=i),li(t,n),r=!0}else{a=t.type,r=t.stateNode,u=t.memoizedProps,i=t.pendingProps,r.props=u;var c=r.context;s=ho(t,s=po(t));var l=a.getDerivedStateFromProps;(a="function"==typeof l||"function"==typeof r.getSnapshotBeforeUpdate)||"function"!=typeof r.UNSAFE_componentWillReceiveProps&&"function"!=typeof r.componentWillReceiveProps||(u!==i||c!==s)&&ci(t,r,i,s),Bo=!1;var p=t.memoizedState;c=r.state=p;var h=t.updateQueue;null!==h&&(qo(t,h,i,r,n),c=t.memoizedState),u!==i||p!==c||lo.current||Bo?("function"==typeof l&&(si(t,l,i),c=t.memoizedState),(u=Bo||ui(t,u,i,p,c,s))?(a||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||("function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount()),"function"==typeof r.componentDidMount&&(t.effectTag|=4)):("function"==typeof r.componentDidMount&&(t.effectTag|=4),t.memoizedProps=i,t.memoizedState=c),r.props=i,r.state=c,r.context=s,r=u):("function"==typeof r.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.type,r=t.stateNode,i=t.memoizedProps,u=t.pendingProps,r.props=i,c=r.context,s=ho(t,s=po(t)),(a="function"==typeof(l=a.getDerivedStateFromProps)||"function"==typeof r.getSnapshotBeforeUpdate)||"function"!=typeof r.UNSAFE_componentWillReceiveProps&&"function"!=typeof r.componentWillReceiveProps||(i!==u||c!==s)&&ci(t,r,u,s),Bo=!1,c=t.memoizedState,p=r.state=c,null!==(h=t.updateQueue)&&(qo(t,h,u,r,n),p=t.memoizedState),i!==u||c!==p||lo.current||Bo?("function"==typeof l&&(si(t,l,u),p=t.memoizedState),(l=Bo||ui(t,i,u,c,p,s))?(a||"function"!=typeof r.UNSAFE_componentWillUpdate&&"function"!=typeof r.componentWillUpdate||("function"==typeof r.componentWillUpdate&&r.componentWillUpdate(u,p,s),"function"==typeof r.UNSAFE_componentWillUpdate&&r.UNSAFE_componentWillUpdate(u,p,s)),"function"==typeof r.componentDidUpdate&&(t.effectTag|=4),"function"==typeof r.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof r.componentDidUpdate||i===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof r.getSnapshotBeforeUpdate||i===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),t.memoizedProps=u,t.memoizedState=p),r.props=u,r.state=p,r.context=s,r=l):("function"!=typeof r.componentDidUpdate||i===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof r.getSnapshotBeforeUpdate||i===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),r=!1);return Ri(e,t,r,o,n);case 3:return Pi(t),null!==(o=t.updateQueue)?(r=null!==(r=t.memoizedState)?r.element:null,qo(t,o,t.pendingProps,null,n),(o=t.memoizedState.element)===r?(xi(),e=Ni(e,t)):(r=t.stateNode,(r=(null===e||null===e.child)&&r.hydrate)&&(vi=ro(t.stateNode.containerInfo),yi=t,r=bi=!0),r?(t.effectTag|=2,t.child=gi(t,null,o,n)):(xi(),Ti(e,t,o)),e=t.child)):(xi(),e=Ni(e,t)),e;case 5:return ni(ti.current),(o=ni(Zo.current))!==(r=Rr(o,t.type))&&(uo(ei,t),uo(Zo,r)),null===e&&Ei(t),o=t.type,u=t.memoizedProps,r=t.pendingProps,i=null!==e?e.memoizedProps:null,lo.current||u!==r||((u=1&t.mode&&!!r.hidden)&&(t.expirationTime=1073741823),u&&1073741823===n)?(u=r.children,Qr(o,r)?u=null:i&&Qr(o,i)&&(t.effectTag|=16),Ai(e,t),1073741823!==n&&1&t.mode&&r.hidden?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(Ti(e,t,u),t.memoizedProps=r,e=t.child)):e=Ni(e,t),e;case 6:return null===e&&Ei(t),t.memoizedProps=t.pendingProps,null;case 16:return null;case 4:return ri(t,t.stateNode.containerInfo),o=t.pendingProps,lo.current||t.memoizedProps!==o?(null===e?t.child=mi(t,null,o,n):Ti(e,t,o),t.memoizedProps=o,e=t.child):e=Ni(e,t),e;case 14:return o=t.type.render,n=t.pendingProps,r=t.ref,lo.current||t.memoizedProps!==n||r!==(null!==e?e.ref:null)?(Ti(e,t,o=o(n,r)),t.memoizedProps=n,e=t.child):e=Ni(e,t),e;case 10:return n=t.pendingProps,lo.current||t.memoizedProps!==n?(Ti(e,t,n),t.memoizedProps=n,e=t.child):e=Ni(e,t),e;case 11:return n=t.pendingProps.children,lo.current||null!==n&&t.memoizedProps!==n?(Ti(e,t,n),t.memoizedProps=n,e=t.child):e=Ni(e,t),e;case 15:return n=t.pendingProps,t.memoizedProps===n?e=Ni(e,t):(Ti(e,t,n.children),t.memoizedProps=n,e=t.child),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,i=t.memoizedProps,s=!0;if(lo.current)s=!1;else if(i===o)return t.stateNode=0,Jo(t),Ni(e,t);var a=o.value;if(t.memoizedProps=o,null===i)a=1073741823;else if(i.value===o.value){if(i.children===o.children&&s)return t.stateNode=0,Jo(t),Ni(e,t);a=0}else{var u=i.value;if(u===a&&(0!==u||1/u==1/a)||u!=u&&a!=a){if(i.children===o.children&&s)return t.stateNode=0,Jo(t),Ni(e,t);a=0}else if(a="function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823,0==(a|=0)){if(i.children===o.children&&s)return t.stateNode=0,Jo(t),Ni(e,t)}else Oi(t,r,a,n)}return t.stateNode=a,Jo(t),Ti(e,t,o.children),t.child}(e,t,n);case 12:e:if(r=t.type,i=t.pendingProps,u=t.memoizedProps,o=r._currentValue,s=r._changedBits,lo.current||0!==s||u!==i){if(t.memoizedProps=i,void 0!==(a=i.unstable_observedBits)&&null!==a||(a=1073741823),t.stateNode=a,0!=(s&a))Oi(t,r,s,n);else if(u===i){e=Ni(e,t);break e}n=(n=i.children)(o),t.effectTag|=1,Ti(e,t,n),e=t.child}else e=Ni(e,t);return e;default:f("156")}}function Bi(e){e.effectTag|=4}var ji=void 0,Ii=void 0,Li=void 0;function Ui(e,t){var n=t.pendingProps;switch(t.tag){case 1:return null;case 2:return go(t),null;case 3:oi(),yo();var r=t.stateNode;return r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Si(t),t.effectTag&=-3),ji(t),null;case 5:ii(t),r=ni(ti.current);var o=t.type;if(null!==e&&null!=t.stateNode){var i=e.memoizedProps,s=t.stateNode,a=ni(Zo.current);s=Hr(s,o,i,n,r),Ii(e,t,s,o,i,n,r,a),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!n)return null===t.stateNode&&f("166"),null;if(e=ni(Zo.current),Si(t))n=t.stateNode,o=t.type,i=t.memoizedProps,n[V]=t,n[z]=i,r=$r(n,o,i,e,r),t.updateQueue=r,null!==r&&Bi(t);else{(e=Vr(o,n,r,e))[V]=t,e[z]=n;e:for(i=t.child;null!==i;){if(5===i.tag||6===i.tag)e.appendChild(i.stateNode);else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)break e;i=i.return}i.sibling.return=i.return,i=i.sibling}qr(e,o,n,r),Xr(o,n)&&Bi(t),t.stateNode=e}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Li(e,t,e.memoizedProps,n);else{if("string"!=typeof n)return null===t.stateNode&&f("166"),null;r=ni(ti.current),ni(Zo.current),Si(t)?(r=t.stateNode,n=t.memoizedProps,r[V]=t,Yr(r,n)&&Bi(t)):((r=zr(n,r))[V]=t,t.stateNode=r)}return null;case 14:case 16:case 10:case 11:case 15:return null;case 4:return oi(),ji(t),null;case 13:return Xo(t),null;case 12:return null;case 0:f("167");default:f("156")}}function Di(e,t){var n=t.source;null===t.stack&&null!==n&&_t(n),null!==n&&bt(n),t=t.value,null!==e&&2===e.tag&&bt(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}function Fi(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){ms(e,t)}else t.current=null}function Vi(e){switch(Mo(e),e.tag){case 2:Fi(e);var t=e.stateNode;if("function"==typeof t.componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){ms(e,t)}break;case 5:Fi(e);break;case 4:Hi(e)}}function zi(e){return 5===e.tag||3===e.tag||4===e.tag}function qi(e){e:{for(var t=e.return;null!==t;){if(zi(t)){var n=t;break e}t=t.return}f("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:f("161")}16&n.effectTag&&(Nr(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||zi(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=t,s=o.stateNode,a=n;8===i.nodeType?i.parentNode.insertBefore(s,a):i.insertBefore(s,a)}else t.insertBefore(o.stateNode,n);else r?(i=t,s=o.stateNode,8===i.nodeType?i.parentNode.insertBefore(s,i):i.appendChild(s)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function Hi(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&f("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var i=t,s=i;;)if(Vi(s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===i)break;for(;null===s.sibling;){if(null===s.return||s.return===i)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}o?(i=r,s=t.stateNode,8===i.nodeType?i.parentNode.removeChild(s):i.removeChild(s)):r.removeChild(t.stateNode)}else if(4===t.tag?r=t.stateNode.containerInfo:Vi(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function Wi(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&(n[z]=r,Wr(n,i,o,e,r))}break;case 6:null===t.stateNode&&f("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 15:case 16:break;default:f("163")}}function $i(e,t,n){(n=Lo(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Qs(r),Di(e,t)},n}function Yi(e,t,n){(n=Lo(n)).tag=3;var r=e.stateNode;return null!==r&&"function"==typeof r.componentDidCatch&&(n.callback=function(){null===ls?ls=new Set([this]):ls.add(this);var n=t.value,r=t.stack;Di(e,t),this.componentDidCatch(n,{componentStack:null!==r?r:""})}),n}function Gi(e,t,n,r,o,i){n.effectTag|=512,n.firstEffect=n.lastEffect=null,r=$o(r,n),e=t;do{switch(e.tag){case 3:return e.effectTag|=1024,void Fo(e,r=$i(e,r,i),i);case 2:if(t=r,n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&(null===ls||!ls.has(n)))return e.effectTag|=1024,void Fo(e,r=Yi(e,t,i),i)}e=e.return}while(null!==e)}function Ki(e){switch(e.tag){case 2:go(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return oi(),yo(),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return ii(e),null;case 16:return 1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 4:return oi(),null;case 13:return Xo(e),null;default:return null}}ji=function(){},Ii=function(e,t,n){(t.updateQueue=n)&&Bi(t)},Li=function(e,t,n,r){n!==r&&Bi(t)};var Ji=Zr(),Xi=2,Qi=Ji,Zi=0,es=0,ts=!1,ns=null,rs=null,os=0,is=-1,ss=!1,as=null,us=!1,cs=!1,ls=null;function ds(){if(null!==ns)for(var e=ns.return;null!==e;){var t=e;switch(t.tag){case 2:go(t);break;case 3:oi(),yo();break;case 5:ii(t);break;case 4:oi();break;case 13:Xo(t)}e=e.return}rs=null,os=0,is=-1,ss=!1,ns=null,cs=!1}function fs(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=Ui(t,e);var o=e;if(1073741823===os||1073741823!==o.expirationTime){var i=0;switch(o.tag){case 3:case 2:var s=o.updateQueue;null!==s&&(i=s.expirationTime)}for(s=o.child;null!==s;)0!==s.expirationTime&&(0===i||i>s.expirationTime)&&(i=s.expirationTime),s=s.sibling;o.expirationTime=i}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){cs=!0;break}e=n}else{if(null!==(e=Ki(e)))return e.effectTag&=511,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function ps(e){var t=Mi(e.alternate,e,os);return null===t&&(t=fs(e)),it.current=null,t}function hs(e,t,n){ts&&f("243"),ts=!0,t===os&&e===rs&&null!==ns||(ds(),os=t,is=-1,ns=ko((rs=e).current,null,os),e.pendingCommitExpirationTime=0);var r=!1;for(ss=!n||os<=Xi;;){try{if(n)for(;null!==ns&&!Xs();)ns=ps(ns);else for(;null!==ns;)ns=ps(ns)}catch(t){if(null===ns)r=!0,Qs(t);else{null===ns&&f("271");var o=(n=ns).return;if(null===o){r=!0,Qs(t);break}Gi(e,o,n,t,0,os),ns=fs(n)}}break}if(ts=!1,r)return null;if(null===ns){if(cs)return e.pendingCommitExpirationTime=t,e.current.alternate;ss&&f("262"),0<=is&&setTimeout(function(){var t=e.current.expirationTime;0!==t&&(0===e.remainingExpirationTime||e.remainingExpirationTime<t)&&zs(e,t)},is),function(e){null===Cs&&f("246"),Cs.remainingExpirationTime=e}(e.current.expirationTime)}return null}function ms(e,t){var n;e:{for(ts&&!us&&f("263"),n=e.return;null!==n;){switch(n.tag){case 2:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromCatch||"function"==typeof r.componentDidCatch&&(null===ls||!ls.has(r))){Do(n,e=Yi(n,e=$o(t,e),1),1),vs(n,1),n=void 0;break e}break;case 3:Do(n,e=$i(n,e=$o(t,e),1),1),vs(n,1),n=void 0;break e}n=n.return}3===e.tag&&(Do(e,n=$i(e,n=$o(t,e),1),1),vs(e,1)),n=void 0}return n}function gs(){var e=2+25*(1+((bs()-2+500)/25|0));return e<=Zi&&(e=Zi+1),Zi=e}function ys(e,t){return e=0!==es?es:ts?us?1:os:1&t.mode?Is?2+10*(1+((e-2+15)/10|0)):2+25*(1+((e-2+500)/25|0)):1,Is&&(0===Rs||e>Rs)&&(Rs=e),e}function vs(e,t){for(;null!==e;){if((0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>t)&&(e.alternate.expirationTime=t),null===e.return){if(3!==e.tag)break;var n=e.stateNode;!ts&&0!==os&&t<os&&ds();var r=n.current.expirationTime;ts&&!us&&rs===n||zs(n,r),Ds>Us&&f("185")}e=e.return}}function bs(){return Qi=Zr()-Ji,Xi=2+(Qi/10|0)}function _s(e){var t=es;es=2+25*(1+((bs()-2+500)/25|0));try{return e()}finally{es=t}}function ws(e,t,n,r,o){var i=es;es=1;try{return e(t,n,r,o)}finally{es=i}}var Es=null,ks=null,Ss=0,xs=void 0,Ts=!1,Cs=null,As=0,Rs=0,Ps=!1,Os=!1,Ns=null,Ms=null,Bs=!1,js=!1,Is=!1,Ls=null,Us=1e3,Ds=0,Fs=1;function Vs(e){if(0!==Ss){if(e>Ss)return;null!==xs&&to(xs)}var t=Zr()-Ji;Ss=e,xs=eo(Hs,{timeout:10*(e-2)-t})}function zs(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===ks?(Es=ks=e,e.nextScheduledRoot=e):(ks=ks.nextScheduledRoot=e).nextScheduledRoot=Es;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}Ts||(Bs?js&&(Cs=e,As=1,Ks(e,1,!1)):1===t?Ws():Vs(t))}function qs(){var e=0,t=null;if(null!==ks)for(var n=ks,r=Es;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===ks)&&f("244"),r===r.nextScheduledRoot){Es=ks=r.nextScheduledRoot=null;break}if(r===Es)Es=o=r.nextScheduledRoot,ks.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===ks){(ks=n).nextScheduledRoot=Es,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===ks)break;n=r,r=r.nextScheduledRoot}}null!==(n=Cs)&&n===t&&1===e?Ds++:Ds=0,Cs=t,As=e}function Hs(e){$s(0,!0,e)}function Ws(){$s(1,!1,null)}function $s(e,t,n){if(Ms=n,qs(),t)for(;null!==Cs&&0!==As&&(0===e||e>=As)&&(!Ps||bs()>=As);)bs(),Ks(Cs,As,!Ps),qs();else for(;null!==Cs&&0!==As&&(0===e||e>=As);)Ks(Cs,As,!1),qs();null!==Ms&&(Ss=0,xs=null),0!==As&&Vs(As),Ms=null,Ps=!1,Gs()}function Ys(e,t){Ts&&f("253"),Cs=e,As=t,Ks(e,t,!1),Ws(),Gs()}function Gs(){if(Ds=0,null!==Ls){var e=Ls;Ls=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){Os||(Os=!0,Ns=e)}}}if(Os)throw e=Ns,Ns=null,Os=!1,e}function Ks(e,t,n){Ts&&f("245"),Ts=!0,n?null!==(n=e.finishedWork)?Js(e,n,t):null!==(n=hs(e,t,!0))&&(Xs()?e.finishedWork=n:Js(e,n,t)):null!==(n=e.finishedWork)?Js(e,n,t):null!==(n=hs(e,t,!1))&&Js(e,n,t),Ts=!1}function Js(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Ls?Ls=[r]:Ls.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);if(e.finishedWork=null,us=ts=!0,(n=t.stateNode).current===t&&f("177"),0===(r=n.pendingCommitExpirationTime)&&f("261"),n.pendingCommitExpirationTime=0,bs(),it.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var o=t.firstEffect}else o=t;else o=t.firstEffect;Kr=Pn;var i=u();if(qn(i)){if("selectionStart"in i)var s={start:i.selectionStart,end:i.selectionEnd};else e:{var a=window.getSelection&&window.getSelection();if(a&&0!==a.rangeCount){s=a.anchorNode;var c=a.anchorOffset,d=a.focusNode;a=a.focusOffset;try{s.nodeType,d.nodeType}catch(e){s=null;break e}var p=0,h=-1,m=-1,g=0,y=0,v=i,b=null;t:for(;;){for(var _;v!==s||0!==c&&3!==v.nodeType||(h=p+c),v!==d||0!==a&&3!==v.nodeType||(m=p+a),3===v.nodeType&&(p+=v.nodeValue.length),null!==(_=v.firstChild);)b=v,v=_;for(;;){if(v===i)break t;if(b===s&&++g===c&&(h=p),b===d&&++y===a&&(m=p),null!==(_=v.nextSibling))break;b=(v=b).parentNode}v=_}s=-1===h||-1===m?null:{start:h,end:m}}else s=null}s=s||{start:0,end:0}}else s=null;for(Jr={focusedElem:i,selectionRange:s},On(!1),as=o;null!==as;){i=!1,s=void 0;try{for(;null!==as;){if(256&as.effectTag){var w=as.alternate;switch((c=as).tag){case 2:if(256&c.effectTag&&null!==w){var E=w.memoizedProps,k=w.memoizedState,S=c.stateNode;S.props=c.memoizedProps,S.state=c.memoizedState;var x=S.getSnapshotBeforeUpdate(E,k);S.__reactInternalSnapshotBeforeUpdate=x}break;case 3:case 5:case 6:case 4:break;default:f("163")}}as=as.nextEffect}}catch(e){i=!0,s=e}i&&(null===as&&f("178"),ms(as,s),null!==as&&(as=as.nextEffect))}for(as=o;null!==as;){w=!1,E=void 0;try{for(;null!==as;){var T=as.effectTag;if(16&T&&Nr(as.stateNode,""),128&T){var C=as.alternate;if(null!==C){var A=C.ref;null!==A&&("function"==typeof A?A(null):A.current=null)}}switch(14&T){case 2:qi(as),as.effectTag&=-3;break;case 6:qi(as),as.effectTag&=-3,Wi(as.alternate,as);break;case 4:Wi(as.alternate,as);break;case 8:Hi(k=as),k.return=null,k.child=null,k.alternate&&(k.alternate.child=null,k.alternate.return=null)}as=as.nextEffect}}catch(e){w=!0,E=e}w&&(null===as&&f("178"),ms(as,E),null!==as&&(as=as.nextEffect))}if(A=Jr,C=u(),T=A.focusedElem,w=A.selectionRange,C!==T&&l(document.documentElement,T)){null!==w&&qn(T)&&(C=w.start,void 0===(A=w.end)&&(A=C),"selectionStart"in T?(T.selectionStart=C,T.selectionEnd=Math.min(A,T.value.length)):window.getSelection&&(C=window.getSelection(),E=T[he()].length,A=Math.min(w.start,E),w=void 0===w.end?A:Math.min(w.end,E),!C.extend&&A>w&&(E=w,w=A,A=E),E=zn(T,A),k=zn(T,w),E&&k&&(1!==C.rangeCount||C.anchorNode!==E.node||C.anchorOffset!==E.offset||C.focusNode!==k.node||C.focusOffset!==k.offset)&&((S=document.createRange()).setStart(E.node,E.offset),C.removeAllRanges(),A>w?(C.addRange(S),C.extend(k.node,k.offset)):(S.setEnd(k.node,k.offset),C.addRange(S))))),C=[];for(A=T;A=A.parentNode;)1===A.nodeType&&C.push({element:A,left:A.scrollLeft,top:A.scrollTop});for("function"==typeof T.focus&&T.focus(),T=0;T<C.length;T++)(A=C[T]).element.scrollLeft=A.left,A.element.scrollTop=A.top}for(Jr=null,On(Kr),Kr=null,n.current=t,as=o;null!==as;){o=!1,T=void 0;try{for(C=r;null!==as;){var R=as.effectTag;if(36&R){var P=as.alternate;switch(w=C,(A=as).tag){case 2:var O=A.stateNode;if(4&A.effectTag)if(null===P)O.props=A.memoizedProps,O.state=A.memoizedState,O.componentDidMount();else{var N=P.memoizedProps,M=P.memoizedState;O.props=A.memoizedProps,O.state=A.memoizedState,O.componentDidUpdate(N,M,O.__reactInternalSnapshotBeforeUpdate)}var B=A.updateQueue;null!==B&&(O.props=A.memoizedProps,O.state=A.memoizedState,Wo(A,B,O));break;case 3:var j=A.updateQueue;if(null!==j){if(E=null,null!==A.child)switch(A.child.tag){case 5:E=A.child.stateNode;break;case 2:E=A.child.stateNode}Wo(A,j,E)}break;case 5:var I=A.stateNode;null===P&&4&A.effectTag&&Xr(A.type,A.memoizedProps)&&I.focus();break;case 6:case 4:case 15:case 16:break;default:f("163")}}if(128&R){A=void 0;var L=as.ref;if(null!==L){var U=as.stateNode;switch(as.tag){case 5:A=U;break;default:A=U}"function"==typeof L?L(A):L.current=A}}var D=as.nextEffect;as.nextEffect=null,as=D}}catch(e){o=!0,T=e}o&&(null===as&&f("178"),ms(as,T),null!==as&&(as=as.nextEffect))}ts=us=!1,No(t.stateNode),0===(t=n.current.expirationTime)&&(ls=null),e.remainingExpirationTime=t}function Xs(){return!(null===Ms||Ms.timeRemaining()>Fs)&&(Ps=!0)}function Qs(e){null===Cs&&f("246"),Cs.remainingExpirationTime=0,Os||(Os=!0,Ns=e)}function Zs(e,t){var n=Bs;Bs=!0;try{return e(t)}finally{(Bs=n)||Ts||Ws()}}function ea(e,t){if(Bs&&!js){js=!0;try{return e(t)}finally{js=!1}}return e(t)}function ta(e,t){Ts&&f("187");var n=Bs;Bs=!0;try{return ws(e,t)}finally{Bs=n,Ws()}}function na(e,t,n){if(Is)return e(t,n);Bs||Ts||0===Rs||($s(Rs,!1,null),Rs=0);var r=Is,o=Bs;Bs=Is=!0;try{return e(t,n)}finally{Is=r,(Bs=o)||Ts||Ws()}}function ra(e){var t=Bs;Bs=!0;try{ws(e)}finally{(Bs=t)||Ts||$s(1,!1,null)}}function oa(e,t,n,r,o){var i=t.current;if(n){var s;n=n._reactInternalFiber;e:{for(2===an(n)&&2===n.tag||f("170"),s=n;3!==s.tag;){if(mo(s)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break e}(s=s.return)||f("171")}s=s.stateNode.context}n=mo(n)?bo(n,s):s}else n=d;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Lo(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Do(i,o,r),vs(i,r),r}function ia(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?f("188"):f("268",Object.keys(e))),null===(e=ln(t))?null:e.stateNode}function sa(e,t,n,r){var o=t.current;return oa(e,t,n,o=ys(bs(),o),r)}function aa(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function ua(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Ro=Oo(function(e){return t.onCommitFiberRoot(n,e)}),Po=Oo(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(s({},e,{findHostInstanceByFiber:function(e){return null===(e=ln(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}var ca=Zs,la=na,da=function(){Ts||0===Rs||($s(Rs,!1,null),Rs=0)};function fa(e){this._expirationTime=gs(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function pa(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function ha(e,t,n){this._internalRoot=Ao(e,t,n)}function ma(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ga(e,t,n,r,o){ma(n)||f("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var s=o;o=function(){var e=aa(i._internalRoot);s.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new ha(e,!1,t)}(n,r),"function"==typeof o){var a=o;o=function(){var e=aa(i._internalRoot);a.call(e)}}ea(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return aa(i._internalRoot)}function ya(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return ma(t)||f("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:ut,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}De.injectFiberControlledHostComponent(Gr),fa.prototype.render=function(e){this._defer||f("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new pa;return oa(e,t,null,n,r._onCommit),r},fa.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},fa.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||f("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&f("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Ys(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},fa.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},pa.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},pa.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&f("191",n),n()}}},ha.prototype.render=function(e,t){var n=this._internalRoot,r=new pa;return null!==(t=void 0===t?null:t)&&r.then(t),sa(e,n,null,r._onCommit),r},ha.prototype.unmount=function(e){var t=this._internalRoot,n=new pa;return null!==(e=void 0===e?null:e)&&n.then(e),sa(null,t,null,n._onCommit),n},ha.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new pa;return null!==(n=void 0===n?null:n)&&o.then(n),sa(t,r,e,o._onCommit),o},ha.prototype.createBatch=function(){var e=new fa(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Ye=ca,Ge=la,Ke=da;var va={createPortal:ya,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:ia(e)},hydrate:function(e,t,n){return ga(null,e,t,!0,n)},render:function(e,t,n){return ga(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&f("38"),ga(e,t,n,!1,r)},unmountComponentAtNode:function(e){return ma(e)||f("40"),!!e._reactRootContainer&&(ea(function(){ga(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return ya.apply(void 0,arguments)},unstable_batchedUpdates:Zs,unstable_deferredUpdates:_s,unstable_interactiveUpdates:na,flushSync:ta,unstable_flushControlled:ra,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:D,EventPluginRegistry:S,EventPropagators:ne,ReactControlledComponent:$e,ReactDOMComponentTree:$,ReactDOMEventListener:In},unstable_createRoot:function(e,t){return new ha(e,!0,null!=t&&!0===t.hydrate)}};ua({findFiberByHostInstance:q,bundleType:0,version:"16.4.2",rendererPackageName:"react-dom"});var ba={default:va},_a=ba&&va||ba;e.exports=_a.default?_a.default:_a},function(e,t,n){"use strict";
/** @license React v16.4.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(15),o=n(14),i=n(16),s=n(17),a="function"==typeof Symbol&&Symbol.for,u=a?Symbol.for("react.element"):60103,c=a?Symbol.for("react.portal"):60106,l=a?Symbol.for("react.fragment"):60107,d=a?Symbol.for("react.strict_mode"):60108,f=a?Symbol.for("react.profiler"):60114,p=a?Symbol.for("react.provider"):60109,h=a?Symbol.for("react.context"):60110,m=a?Symbol.for("react.async_mode"):60111,g=a?Symbol.for("react.forward_ref"):60112;a&&Symbol.for("react.timeout");var y="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function _(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||b}function w(){}function E(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||b}_.prototype.isReactComponent={},_.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&v("85"),this.updater.enqueueSetState(this,e,t,"setState")},_.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=_.prototype;var k=E.prototype=new w;k.constructor=E,r(k,_.prototype),k.isPureReactComponent=!0;var S={current:null},x=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,n){var r=void 0,o={},i=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(i=""+t.key),t)x.call(t,r)&&!T.hasOwnProperty(r)&&(o[r]=t[r]);var a=arguments.length-2;if(1===a)o.children=n;else if(1<a){for(var c=Array(a),l=0;l<a;l++)c[l]=arguments[l+2];o.children=c}if(e&&e.defaultProps)for(r in a=e.defaultProps)void 0===o[r]&&(o[r]=a[r]);return{$$typeof:u,type:e,key:i,ref:s,props:o,_owner:S.current}}function A(e){return"object"==typeof e&&null!==e&&e.$$typeof===u}var R=/\/+/g,P=[];function O(e,t,n,r){if(P.length){var o=P.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function N(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>P.length&&P.push(e)}function M(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case u:case c:i=!0}}if(i)return n(r,e,""===t?"."+B(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var s=0;s<e.length;s++){var a=t+B(o=e[s],s);i+=M(o,a,n,r)}else if(null===e||void 0===e?a=null:a="function"==typeof(a=y&&e[y]||e["@@iterator"])?a:null,"function"==typeof a)for(e=a.call(e),s=0;!(o=e.next()).done;)i+=M(o=o.value,a=t+B(o,s++),n,r);else"object"===o&&v("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function B(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function j(e,t){e.func.call(e.context,t,e.count++)}function I(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?L(e,r,n,s.thatReturnsArgument):null!=e&&(A(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(R,"$&/")+"/")+n,e={$$typeof:u,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function L(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(R,"$&/")+"/"),t=O(t,i,r,o),null==e||M(e,"",I,t),N(t)}var U={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return L(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=O(null,null,t,n),null==e||M(e,"",j,t),N(t)},count:function(e){return null==e?0:M(e,"",s.thatReturnsNull,null)},toArray:function(e){var t=[];return L(e,t,null,s.thatReturnsArgument),t},only:function(e){return A(e)||v("143"),e}},createRef:function(){return{current:null}},Component:_,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:h,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_currentValue2:e,_changedBits:0,_changedBits2:0,Provider:null,Consumer:null}).Provider={$$typeof:p,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:g,render:e}},Fragment:l,StrictMode:d,unstable_AsyncMode:m,unstable_Profiler:f,createElement:C,cloneElement:function(e,t,n){(null===e||void 0===e)&&v("267",e);var o=void 0,i=r({},e.props),s=e.key,a=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(a=t.ref,c=S.current),void 0!==t.key&&(s=""+t.key);var l=void 0;for(o in e.type&&e.type.defaultProps&&(l=e.type.defaultProps),t)x.call(t,o)&&!T.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==l?l[o]:t[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){l=Array(o);for(var d=0;d<o;d++)l[d]=arguments[d+2];i.children=l}return{$$typeof:u,type:e.type,key:s,ref:a,props:i,_owner:c}},createFactory:function(e){var t=C.bind(null,e);return t.type=e,t},isValidElement:A,version:"16.4.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:S,assign:r}},D={default:U},F=D&&U||D;e.exports=F.default?F.default:F},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var s=0;s<n.length;s++)if(!r.call(t,n[s])||!o(e[n[s]],t[n[s]]))return!1;return!0}},function(e,t,n){"use strict";var r=n(39);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=n(40);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},,,function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){"use strict";var r=n(46);function o(){}e.exports=function(){function e(e,t,n,o,i,s){if(s!==r){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=o,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var r=n(74);e.exports=function(){return"function"==typeof r.Promise&&"function"==typeof r.Promise.prototype.then}},function(e,t,n){"use strict";(function(t){e.exports="object"==typeof self&&self.self===self&&self||"object"==typeof t&&t.global===t&&t||this}).call(this,n(18))},function(e,t,n){var r=n(9),o=n(7),i=n(13),s=n(76),a=n(77),u=n(78),c=n(79),l=n(80),d=n(19),f=n(81),p=n(84),h=n(85),m=n(8),g=n(86),y=n(12);function v(e,t,n){var r,o,i=e.size,s=h.getEncodedBits(t,n);for(r=0;r<15;r++)o=1==(s>>r&1),r<6?e.set(r,8,o,!0):r<8?e.set(r+1,8,o,!0):e.set(i-15+r,8,o,!0),r<8?e.set(8,i-r-1,o,!0):r<9?e.set(8,15-r-1+1,o,!0):e.set(8,15-r-1,o,!0);e.set(i-8,8,1,!0)}function b(e,t,n){var i=new s;n.forEach(function(t){i.put(t.mode.bit,4),i.put(t.getLength(),m.getCharCountIndicator(t.mode,e)),t.write(i)});var a=8*(o.getSymbolTotalCodewords(e)-d.getTotalCodewordsCount(e,t));for(i.getLengthInBits()+4<=a&&i.put(0,4);i.getLengthInBits()%8!=0;)i.putBit(0);for(var u=(a-i.getLengthInBits())/8,c=0;c<u;c++)i.put(c%2?17:236,8);return function(e,t,n){for(var i=o.getSymbolTotalCodewords(t),s=d.getTotalCodewordsCount(t,n),a=i-s,u=d.getBlocksCount(t,n),c=u-i%u,l=Math.floor(i/u),p=Math.floor(a/u),h=p+1,m=l-p,g=new f(m),y=0,v=new Array(u),b=new Array(u),_=0,w=new r(e.buffer),E=0;E<u;E++){var k=E<c?p:h;v[E]=w.slice(y,y+k),b[E]=g.encode(v[E]),y+=k,_=Math.max(_,k)}var S,x,T=new r(i),C=0;for(S=0;S<_;S++)for(x=0;x<u;x++)S<v[x].length&&(T[C++]=v[x][S]);for(S=0;S<m;S++)for(x=0;x<u;x++)T[C++]=b[x][S];return T}(i,e,t)}function _(e,t,n,r){var i;if(y(e))i=g.fromArray(e);else{if("string"!=typeof e)throw new Error("Invalid data");var s=t;if(!s){var d=g.rawSplit(e);s=p.getBestVersionForData(d,n)}i=g.fromString(e,s||40)}var f=p.getBestVersionForData(i,n);if(!f)throw new Error("The amount of data is too big to be stored in a QR Code");if(t){if(t<f)throw new Error("\nThe chosen QR Code version cannot contain this amount of data.\nMinimum version required to store current data is: "+f+".\n")}else t=f;var h=b(t,n,i),m=o.getSymbolSize(t),_=new a(m);return function(e,t){for(var n=e.size,r=c.getPositions(t),o=0;o<r.length;o++)for(var i=r[o][0],s=r[o][1],a=-1;a<=7;a++)if(!(i+a<=-1||n<=i+a))for(var u=-1;u<=7;u++)s+u<=-1||n<=s+u||(a>=0&&a<=6&&(0===u||6===u)||u>=0&&u<=6&&(0===a||6===a)||a>=2&&a<=4&&u>=2&&u<=4?e.set(i+a,s+u,!0,!0):e.set(i+a,s+u,!1,!0))}(_,t),function(e){for(var t=e.size,n=8;n<t-8;n++){var r=n%2==0;e.set(n,6,r,!0),e.set(6,n,r,!0)}}(_),function(e,t){for(var n=u.getPositions(t),r=0;r<n.length;r++)for(var o=n[r][0],i=n[r][1],s=-2;s<=2;s++)for(var a=-2;a<=2;a++)-2===s||2===s||-2===a||2===a||0===s&&0===a?e.set(o+s,i+a,!0,!0):e.set(o+s,i+a,!1,!0)}(_,t),v(_,n,0),t>=7&&function(e,t){for(var n,r,o,i=e.size,s=p.getEncodedBits(t),a=0;a<18;a++)n=Math.floor(a/3),r=a%3+i-8-3,o=1==(s>>a&1),e.set(n,r,o,!0),e.set(r,n,o,!0)}(_,t),function(e,t){for(var n=e.size,r=-1,o=n-1,i=7,s=0,a=n-1;a>0;a-=2)for(6===a&&a--;;){for(var u=0;u<2;u++)if(!e.isReserved(o,a-u)){var c=!1;s<t.length&&(c=1==(t[s]>>>i&1)),e.set(o,a-u,c),-1==--i&&(s++,i=7)}if((o+=r)<0||n<=o){o-=r,r=-r;break}}}(_,h),isNaN(r)&&(r=l.getBestMask(_,v.bind(null,_,n))),l.applyMask(r,_),v(_,n,r),{modules:_,version:t,errorCorrectionLevel:n,maskPattern:r,segments:i}}t.create=function(e,t){if(void 0===e||""===e)throw new Error("No input text");var n,r,s=i.M;return void 0!==t&&(s=i.from(t.errorCorrectionLevel,i.M),n=p.from(t.version),r=l.from(t.maskPattern),t.toSJISFunc&&o.setToSJISFunction(t.toSJISFunc)),_(e,n,s,r)}},function(e,t){function n(){this.buffer=[],this.length=0}n.prototype={get:function(e){var t=Math.floor(e/8);return 1==(this.buffer[t]>>>7-e%8&1)},put:function(e,t){for(var n=0;n<t;n++)this.putBit(1==(e>>>t-n-1&1))},getLengthInBits:function(){return this.length},putBit:function(e){var t=Math.floor(this.length/8);this.buffer.length<=t&&this.buffer.push(0),e&&(this.buffer[t]|=128>>>this.length%8),this.length++}},e.exports=n},function(e,t,n){var r=n(9);function o(e){if(!e||e<1)throw new Error("BitMatrix size must be defined and greater than 0");this.size=e,this.data=new r(e*e),this.data.fill(0),this.reservedBit=new r(e*e),this.reservedBit.fill(0)}o.prototype.set=function(e,t,n,r){var o=e*this.size+t;this.data[o]=n,r&&(this.reservedBit[o]=!0)},o.prototype.get=function(e,t){return this.data[e*this.size+t]},o.prototype.xor=function(e,t,n){this.data[e*this.size+t]^=n},o.prototype.isReserved=function(e,t){return this.reservedBit[e*this.size+t]},e.exports=o},function(e,t,n){var r=n(7).getSymbolSize;t.getRowColCoords=function(e){if(1===e)return[];for(var t=Math.floor(e/7)+2,n=r(e),o=145===n?26:2*Math.ceil((n-13)/(2*t-2)),i=[n-7],s=1;s<t-1;s++)i[s]=i[s-1]-o;return i.push(6),i.reverse()},t.getPositions=function(e){for(var n=[],r=t.getRowColCoords(e),o=r.length,i=0;i<o;i++)for(var s=0;s<o;s++)0===i&&0===s||0===i&&s===o-1||i===o-1&&0===s||n.push([r[i],r[s]]);return n}},function(e,t,n){var r=n(7).getSymbolSize;t.getPositions=function(e){var t=r(e);return[[0,0],[t-7,0],[0,t-7]]}},function(e,t){t.Patterns={PATTERN000:0,PATTERN001:1,PATTERN010:2,PATTERN011:3,PATTERN100:4,PATTERN101:5,PATTERN110:6,PATTERN111:7};var n=3,r=3,o=40,i=10;function s(e,n,r){switch(e){case t.Patterns.PATTERN000:return(n+r)%2==0;case t.Patterns.PATTERN001:return n%2==0;case t.Patterns.PATTERN010:return r%3==0;case t.Patterns.PATTERN011:return(n+r)%3==0;case t.Patterns.PATTERN100:return(Math.floor(n/2)+Math.floor(r/3))%2==0;case t.Patterns.PATTERN101:return n*r%2+n*r%3==0;case t.Patterns.PATTERN110:return(n*r%2+n*r%3)%2==0;case t.Patterns.PATTERN111:return(n*r%3+(n+r)%2)%2==0;default:throw new Error("bad maskPattern:"+e)}}t.isValid=function(e){return null!=e&&""!==e&&!isNaN(e)&&e>=0&&e<=7},t.from=function(e){return t.isValid(e)?parseInt(e,10):void 0},t.getPenaltyN1=function(e){for(var t=e.size,r=0,o=0,i=0,s=null,a=null,u=0;u<t;u++){o=i=0,s=a=null;for(var c=0;c<t;c++){var l=e.get(u,c);l===s?o++:(o>=5&&(r+=n+(o-5)),s=l,o=1),(l=e.get(c,u))===a?i++:(i>=5&&(r+=n+(i-5)),a=l,i=1)}o>=5&&(r+=n+(o-5)),i>=5&&(r+=n+(i-5))}return r},t.getPenaltyN2=function(e){for(var t=e.size,n=0,o=0;o<t-1;o++)for(var i=0;i<t-1;i++){var s=e.get(o,i)+e.get(o,i+1)+e.get(o+1,i)+e.get(o+1,i+1);4!==s&&0!==s||n++}return n*r},t.getPenaltyN3=function(e){for(var t=e.size,n=0,r=0,i=0,s=0;s<t;s++){r=i=0;for(var a=0;a<t;a++)r=r<<1&2047|e.get(s,a),a>=10&&(1488===r||93===r)&&n++,i=i<<1&2047|e.get(a,s),a>=10&&(1488===i||93===i)&&n++}return n*o},t.getPenaltyN4=function(e){for(var t=0,n=e.data.length,r=0;r<n;r++)t+=e.data[r];return Math.abs(Math.ceil(100*t/n/5)-10)*i},t.applyMask=function(e,t){for(var n=t.size,r=0;r<n;r++)for(var o=0;o<n;o++)t.isReserved(o,r)||t.xor(o,r,s(e,o,r))},t.getBestMask=function(e,n){for(var r=Object.keys(t.Patterns).length,o=0,i=1/0,s=0;s<r;s++){n(s),t.applyMask(s,e);var a=t.getPenaltyN1(e)+t.getPenaltyN2(e)+t.getPenaltyN3(e)+t.getPenaltyN4(e);t.applyMask(s,e),a<i&&(i=a,o=s)}return o}},function(e,t,n){var r=n(9),o=n(82);function i(e){this.genPoly=void 0,this.degree=e,this.degree&&this.initialize(this.degree)}i.prototype.initialize=function(e){this.degree=e,this.genPoly=o.generateECPolynomial(this.degree)},i.prototype.encode=function(e){if(!this.genPoly)throw new Error("Encoder not initialized");var t=new r(this.degree);t.fill(0);var n=r.concat([e,t],e.length+this.degree),i=o.mod(n,this.genPoly),s=this.degree-i.length;if(s>0){var a=new r(this.degree);return a.fill(0),i.copy(a,s),a}return i},e.exports=i},function(e,t,n){var r=n(9),o=n(83);t.mul=function(e,t){var n=new r(e.length+t.length-1);n.fill(0);for(var i=0;i<e.length;i++)for(var s=0;s<t.length;s++)n[i+s]^=o.mul(e[i],t[s]);return n},t.mod=function(e,t){for(var n=new r(e);n.length-t.length>=0;){for(var i=n[0],s=0;s<t.length;s++)n[s]^=o.mul(t[s],i);for(var a=0;a<n.length&&0===n[a];)a++;n=n.slice(a)}return n},t.generateECPolynomial=function(e){for(var n=new r([1]),i=0;i<e;i++)n=t.mul(n,[1,o.exp(i)]);return n}},function(e,t,n){var r=n(9),o=new r(512),i=new r(256);!function(){for(var e=1,t=0;t<255;t++)o[t]=e,i[e]=t,256&(e<<=1)&&(e^=285);for(t=255;t<512;t++)o[t]=o[t-255]}(),t.log=function(e){if(e<1)throw new Error("log("+e+")");return i[e]},t.exp=function(e){return o[e]},t.mul=function(e,t){return 0===e||0===t?0:o[i[e]+i[t]]}},function(e,t,n){var r=n(7),o=n(19),i=n(13),s=n(8),a=n(20),u=n(12),c=r.getBCHDigit(7973);function l(e,t){return s.getCharCountIndicator(e,t)+4}function d(e,t){var n=0;return e.forEach(function(e){var r=l(e.mode,t);n+=r+e.getBitsLength()}),n}t.from=function(e,t){return a.isValid(e)?parseInt(e,10):t},t.getCapacity=function(e,t,n){if(!a.isValid(e))throw new Error("Invalid QR Code version");void 0===n&&(n=s.BYTE);var i=8*(r.getSymbolTotalCodewords(e)-o.getTotalCodewordsCount(e,t));if(n===s.MIXED)return i;var u=i-l(n,e);switch(n){case s.NUMERIC:return Math.floor(u/10*3);case s.ALPHANUMERIC:return Math.floor(u/11*2);case s.KANJI:return Math.floor(u/13);case s.BYTE:default:return Math.floor(u/8)}},t.getBestVersionForData=function(e,n){var r,o=i.from(n,i.M);if(u(e)){if(e.length>1)return function(e,n){for(var r=1;r<=40;r++)if(d(e,r)<=t.getCapacity(r,n,s.MIXED))return r}(e,o);if(0===e.length)return 1;r=e[0]}else r=e;return function(e,n,r){for(var o=1;o<=40;o++)if(n<=t.getCapacity(o,r,e))return o}(r.mode,r.getLength(),o)},t.getEncodedBits=function(e){if(!a.isValid(e)||e<7)throw new Error("Invalid QR Code version");for(var t=e<<12;r.getBCHDigit(t)-c>=0;)t^=7973<<r.getBCHDigit(t)-c;return e<<12|t}},function(e,t,n){var r=n(7),o=r.getBCHDigit(1335);t.getEncodedBits=function(e,t){for(var n=e.bit<<3|t,i=n<<10;r.getBCHDigit(i)-o>=0;)i^=1335<<r.getBCHDigit(i)-o;return 21522^(n<<10|i)}},function(e,t,n){var r=n(8),o=n(87),i=n(88),s=n(89),a=n(90),u=n(21),c=n(7),l=n(91);function d(e){return unescape(encodeURIComponent(e)).length}function f(e,t,n){for(var r,o=[];null!==(r=e.exec(n));)o.push({data:r[0],index:r.index,mode:t,length:r[0].length});return o}function p(e){var t,n,o=f(u.NUMERIC,r.NUMERIC,e),i=f(u.ALPHANUMERIC,r.ALPHANUMERIC,e);return c.isKanjiModeEnabled()?(t=f(u.BYTE,r.BYTE,e),n=f(u.KANJI,r.KANJI,e)):(t=f(u.BYTE_KANJI,r.BYTE,e),n=[]),o.concat(i,t,n).sort(function(e,t){return e.index-t.index}).map(function(e){return{data:e.data,mode:e.mode,length:e.length}})}function h(e,t){switch(t){case r.NUMERIC:return o.getBitsLength(e);case r.ALPHANUMERIC:return i.getBitsLength(e);case r.KANJI:return a.getBitsLength(e);case r.BYTE:return s.getBitsLength(e)}}function m(e,t){var n,u=r.getBestModeForData(e);if((n=r.from(t,u))!==r.BYTE&&n.bit<u.bit)throw new Error('"'+e+'" cannot be encoded with mode '+r.toString(n)+".\n Suggested mode is: "+r.toString(u));switch(n!==r.KANJI||c.isKanjiModeEnabled()||(n=r.BYTE),n){case r.NUMERIC:return new o(e);case r.ALPHANUMERIC:return new i(e);case r.KANJI:return new a(e);case r.BYTE:return new s(e)}}t.fromArray=function(e){return e.reduce(function(e,t){return"string"==typeof t?e.push(m(t,null)):t.data&&e.push(m(t.data,t.mode)),e},[])},t.fromString=function(e,n){for(var o=function(e,t){for(var n={},o={start:{}},i=["start"],s=0;s<e.length;s++){for(var a=e[s],u=[],c=0;c<a.length;c++){var l=a[c],d=""+s+c;u.push(d),n[d]={node:l,lastCount:0},o[d]={};for(var f=0;f<i.length;f++){var p=i[f];n[p]&&n[p].node.mode===l.mode?(o[p][d]=h(n[p].lastCount+l.length,l.mode)-h(n[p].lastCount,l.mode),n[p].lastCount+=l.length):(n[p]&&(n[p].lastCount=l.length),o[p][d]=h(l.length,l.mode)+4+r.getCharCountIndicator(l.mode,t))}}i=u}for(f=0;f<i.length;f++)o[i[f]].end=0;return{map:o,table:n}}(function(e){for(var t=[],n=0;n<e.length;n++){var o=e[n];switch(o.mode){case r.NUMERIC:t.push([o,{data:o.data,mode:r.ALPHANUMERIC,length:o.length},{data:o.data,mode:r.BYTE,length:o.length}]);break;case r.ALPHANUMERIC:t.push([o,{data:o.data,mode:r.BYTE,length:o.length}]);break;case r.KANJI:t.push([o,{data:o.data,mode:r.BYTE,length:d(o.data)}]);break;case r.BYTE:t.push([{data:o.data,mode:r.BYTE,length:d(o.data)}])}}return t}(p(e,c.isKanjiModeEnabled())),n),i=l.find_path(o.map,"start","end"),s=[],a=1;a<i.length-1;a++)s.push(o.table[i[a]].node);return t.fromArray(function(e){return e.reduce(function(e,t){var n=e.length-1>=0?e[e.length-1]:null;return n&&n.mode===t.mode?(e[e.length-1].data+=t.data,e):(e.push(t),e)},[])}(s))},t.rawSplit=function(e){return t.fromArray(p(e,c.isKanjiModeEnabled()))}},function(e,t,n){var r=n(8);function o(e){this.mode=r.NUMERIC,this.data=e.toString()}o.getBitsLength=function(e){return 10*Math.floor(e/3)+(e%3?e%3*3+1:0)},o.prototype.getLength=function(){return this.data.length},o.prototype.getBitsLength=function(){return o.getBitsLength(this.data.length)},o.prototype.write=function(e){var t,n,r;for(t=0;t+3<=this.data.length;t+=3)n=this.data.substr(t,3),r=parseInt(n,10),e.put(r,10);var o=this.data.length-t;o>0&&(n=this.data.substr(t),r=parseInt(n,10),e.put(r,3*o+1))},e.exports=o},function(e,t,n){var r=n(8),o=["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"," ","$","%","*","+","-",".","/",":"];function i(e){this.mode=r.ALPHANUMERIC,this.data=e}i.getBitsLength=function(e){return 11*Math.floor(e/2)+e%2*6},i.prototype.getLength=function(){return this.data.length},i.prototype.getBitsLength=function(){return i.getBitsLength(this.data.length)},i.prototype.write=function(e){var t;for(t=0;t+2<=this.data.length;t+=2){var n=45*o.indexOf(this.data[t]);n+=o.indexOf(this.data[t+1]),e.put(n,11)}this.data.length%2&&e.put(o.indexOf(this.data[t]),6)},e.exports=i},function(e,t,n){var r=n(9),o=n(8);function i(e){this.mode=o.BYTE,this.data=new r(e)}i.getBitsLength=function(e){return 8*e},i.prototype.getLength=function(){return this.data.length},i.prototype.getBitsLength=function(){return i.getBitsLength(this.data.length)},i.prototype.write=function(e){for(var t=0,n=this.data.length;t<n;t++)e.put(this.data[t],8)},e.exports=i},function(e,t,n){var r=n(8),o=n(7);function i(e){this.mode=r.KANJI,this.data=e}i.getBitsLength=function(e){return 13*e},i.prototype.getLength=function(){return this.data.length},i.prototype.getBitsLength=function(){return i.getBitsLength(this.data.length)},i.prototype.write=function(e){var t;for(t=0;t<this.data.length;t++){var n=o.toSJIS(this.data[t]);if(n>=33088&&n<=40956)n-=33088;else{if(!(n>=57408&&n<=60351))throw new Error("Invalid SJIS character: "+this.data[t]+"\nMake sure your charset is UTF-8");n-=49472}n=192*(n>>>8&255)+(255&n),e.put(n,13)}},e.exports=i},function(e,t,n){"use strict";var r={single_source_shortest_paths:function(e,t,n){var o={},i={};i[t]=0;var s,a,u,c,l,d,f,p=r.PriorityQueue.make();for(p.push(t,0);!p.empty();)for(u in a=(s=p.pop()).value,c=s.cost,l=e[a]||{})l.hasOwnProperty(u)&&(d=c+l[u],f=i[u],(void 0===i[u]||f>d)&&(i[u]=d,p.push(u,d),o[u]=a));if(void 0!==n&&void 0===i[n]){var h=["Could not find a path from ",t," to ",n,"."].join("");throw new Error(h)}return o},extract_shortest_path_from_predecessor_list:function(e,t){for(var n=[],r=t;r;)n.push(r),e[r],r=e[r];return n.reverse(),n},find_path:function(e,t,n){var o=r.single_source_shortest_paths(e,t,n);return r.extract_shortest_path_from_predecessor_list(o,n)},PriorityQueue:{make:function(e){var t,n=r.PriorityQueue,o={};for(t in e=e||{},n)n.hasOwnProperty(t)&&(o[t]=n[t]);return o.queue=[],o.sorter=e.sorter||n.default_sorter,o},default_sorter:function(e,t){return e.cost-t.cost},push:function(e,t){var n={value:e,cost:t};this.queue.push(n),this.queue.sort(this.sorter)},pop:function(){return this.queue.shift()},empty:function(){return 0===this.queue.length}}};e.exports=r},function(e,t,n){var r=n(22);t.render=function(e,t,n){var o=n,i=t;void 0!==o||t&&t.getContext||(o=t,t=void 0),t||(i=function(){try{return document.createElement("canvas")}catch(e){throw new Error("You need to specify a canvas element")}}()),o=r.getOptions(o);var s=r.getImageWidth(e.modules.size,o),a=i.getContext("2d"),u=a.createImageData(s,s);return r.qrToImageData(u.data,e,o),function(e,t,n){e.clearRect(0,0,t.width,t.height),t.style||(t.style={}),t.height=n,t.width=n,t.style.height=n+"px",t.style.width=n+"px"}(a,i,s),a.putImageData(u,0,0),i},t.renderToDataURL=function(e,n,r){var o=r;void 0!==o||n&&n.getContext||(o=n,n=void 0),o||(o={});var i=t.render(e,n,o),s=o.type||"image/png",a=o.rendererOpts||{};return i.toDataURL(s,a.quality)}},function(e,t,n){var r=n(22);function o(e,t){var n=e.a/255,r=t+'="'+e.hex+'"';return n<1?r+" "+t+'-opacity="'+n.toFixed(2).slice(1)+'"':r}function i(e,t,n){var r=e+t;return void 0!==n&&(r+=" "+n),r}t.render=function(e,t,n){var s=r.getOptions(t),a=e.modules.size,u=e.modules.data,c=a+2*s.margin,l=s.color.light.a?"<path "+o(s.color.light,"fill")+' d="M0 0h'+c+"v"+c+'H0z"/>':"",d="<path "+o(s.color.dark,"stroke")+' d="'+function(e,t,n){for(var r="",o=0,s=!1,a=0,u=0;u<e.length;u++){var c=Math.floor(u%t),l=Math.floor(u/t);c||s||(s=!0),e[u]?(a++,u>0&&c>0&&e[u-1]||(r+=s?i("M",c+n,.5+l+n):i("m",o,0),o=0,s=!1),c+1<t&&e[u+1]||(r+=i("h",a),a=0)):o++}return r}(u,a,s.margin)+'"/>',f='viewBox="0 0 '+c+" "+c+'"',p='<svg xmlns="http://www.w3.org/2000/svg" '+(s.width?'width="'+s.width+'" height="'+s.width+'" ':"")+f+' shape-rendering="crispEdges">'+l+d+"</svg>";return"function"==typeof n&&n(null,p),p}},,,function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},,,,function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=n(1),s=n.n(i),a=n(5),u=n.n(a),c=n(11),l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function d(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var f=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},p=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),s=0;s<o;s++)i[s]=arguments[s];return n=r=d(this,e.call.apply(e,[this].concat(i))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!f(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,i=n.to;o?t.replace(i):t.push(i)}},d(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);u()(this.context.router,"You should not use <Link> outside a <Router>"),u()(void 0!==t,'You must specify the "to" property');var i=this.context.router.history,s="string"==typeof t?Object(c.b)(t,null,null,i.location):t,a=i.createHref(s);return o.a.createElement("a",l({},r,{onClick:this.handleClick,href:a,ref:n}))},t}(o.a.Component);p.propTypes={onClick:s.a.func,target:s.a.string,replace:s.a.bool,to:s.a.oneOfType([s.a.string,s.a.object]).isRequired,innerRef:s.a.oneOfType([s.a.string,s.a.func])},p.defaultProps={replace:!1},p.contextTypes={router:s.a.shape({history:s.a.shape({push:s.a.func.isRequired,replace:s.a.func.isRequired,createHref:s.a.func.isRequired}).isRequired}).isRequired},t.a=p},function(e,t,n){"use strict";var r=n(6),o=n.n(r),i=n(0),s=n.n(i),a=n(1),u=n.n(a),c=n(11),l=n(5),d=n.n(l),f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function p(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var h=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),s=0;s<o;s++)i[s]=arguments[s];return n=r=p(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props.history.location.pathname)},p(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:f({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;d()(null==n||1===s.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){o()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?s.a.Children.only(e):null},t}(s.a.Component);h.propTypes={history:u.a.object.isRequired,children:u.a.node},h.contextTypes={router:u.a.object},h.childContextTypes={router:u.a.object.isRequired};var m=h;function g(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var y=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),s=0;s<o;s++)i[s]=arguments[s];return n=r=g(this,e.call.apply(e,[this].concat(i))),r.history=Object(c.a)(r.props),g(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return s.a.createElement(m,{history:this.history,children:this.props.children})},t}(s.a.Component);y.propTypes={basename:u.a.string,getUserConfirmation:u.a.func,hashType:u.a.oneOf(["hashbang","noslash","slash"]),children:u.a.node};t.a=y},function(e,t,n){"use strict";var r=n(6),o=n.n(r),i=n(5),s=n.n(i),a=n(0),u=n.n(a),c=n(1),l=n.n(c),d=n(32),f=n.n(d),p={},h=0,m=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];"string"==typeof t&&(t={path:t});var r=t,o=r.path,i=r.exact,s=void 0!==i&&i,a=r.strict,u=void 0!==a&&a,c=r.sensitive,l=void 0!==c&&c;if(null==o)return n;var d=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=p[n]||(p[n]={});if(r[e])return r[e];var o=[],i={re:f()(e,o,t),keys:o};return h<1e4&&(r[e]=i,h++),i}(o,{end:s,strict:u,sensitive:l}),m=d.re,g=d.keys,y=m.exec(e);if(!y)return null;var v=y[0],b=y.slice(1),_=e===v;return s&&!_?null:{path:o,url:"/"===o&&""===v?"/":v,isExact:_,params:g.reduce(function(e,t,n){return e[t.name]=b[n],e},{})}},g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function y(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var v=function(e){return 0===u.a.Children.count(e)},b=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),s=0;s<o;s++)i[s]=arguments[s];return n=r=y(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props,r.context.router)},y(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:g({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,i=e.strict,a=e.exact,u=e.sensitive;if(n)return n;s()(t,"You should not use <Route> or withRouter() outside a <Router>");var c=t.route,l=(r||c.location).pathname;return m(l,{path:o,strict:i,exact:a,sensitive:u},c.match)},t.prototype.componentWillMount=function(){o()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),o()(!(this.props.component&&this.props.children&&!v(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),o()(!(this.props.render&&this.props.children&&!v(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){o()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,o=t.render,i=this.context.router,s=i.history,a=i.route,c=i.staticContext,l={match:e,location:this.props.location||a.location,history:s,staticContext:c};return r?e?u.a.createElement(r,l):null:o?e?o(l):null:"function"==typeof n?n(l):n&&!v(n)?u.a.Children.only(n):null},t}(u.a.Component);b.propTypes={computedMatch:l.a.object,path:l.a.string,exact:l.a.bool,strict:l.a.bool,sensitive:l.a.bool,component:l.a.func,render:l.a.func,children:l.a.oneOfType([l.a.func,l.a.node]),location:l.a.object},b.contextTypes={router:l.a.shape({history:l.a.object.isRequired,route:l.a.object.isRequired,staticContext:l.a.object})},b.childContextTypes={router:l.a.object.isRequired};var _=b;t.a=_}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,